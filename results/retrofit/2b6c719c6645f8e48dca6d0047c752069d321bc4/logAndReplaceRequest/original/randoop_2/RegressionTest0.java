import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.FULL;
        java.lang.Class<?> wildcardClass1 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean1 = logLevel0.log();
        boolean boolean2 = logLevel0.log();
        java.lang.Class<?> wildcardClass3 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client client1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setClient(client1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        java.util.concurrent.Executor executor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setExecutors(executor1, executor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setConverter(converter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.Server server3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.client.Client.Provider provider7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(provider7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.Profiler profiler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setProfiler(profiler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.NONE;
        java.lang.Class<?> wildcardClass1 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.HEADERS;
        java.lang.Class<?> wildcardClass1 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setErrorHandler(errorHandler1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.ErrorHandler errorHandler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setClient(provider1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.Server server7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setServer(server7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setRequestInterceptor(requestInterceptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.converter.Converter converter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setConverter(converter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder4.setExecutors(executor5, executor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder6.setExecutors(executor7, executor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.Profiler profiler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder2.setProfiler(profiler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter15 = builder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.client.Client client15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setClient(client15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.client.Client.Provider provider3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setClient(provider3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.converter.Converter converter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setConverter(converter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setRequestInterceptor(requestInterceptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.ErrorHandler errorHandler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder4.setErrorHandler(errorHandler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.client.Client.Provider provider5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(provider5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setClient(provider17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setRequestInterceptor(requestInterceptor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder14.setRequestInterceptor(requestInterceptor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.Profiler profiler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder4.setProfiler(profiler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.Profiler profiler19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setProfiler(profiler19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.LogLevel logLevel5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RequestInterceptor requestInterceptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder4.setRequestInterceptor(requestInterceptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.Profiler profiler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setProfiler(profiler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.client.Client client3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder2.setClient(client3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.Server server19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder18.setServer(server19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.Server server5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.converter.Converter converter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setConverter(converter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RequestInterceptor requestInterceptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean1 = logLevel0.log();
        boolean boolean2 = logLevel0.log();
        boolean boolean3 = logLevel0.log();
        java.lang.Class<?> wildcardClass4 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.Server server3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder2.setServer(server3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.ErrorHandler errorHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder6.setErrorHandler(errorHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.converter.Converter converter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setConverter(converter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean1 = logLevel0.log();
        java.lang.Class<?> wildcardClass2 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.Server server17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder4.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        java.lang.Class<?> wildcardClass19 = log16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder14.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder10.setExecutors(executor11, executor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.Server server15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setServer(server15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RequestInterceptor requestInterceptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder18.setRequestInterceptor(requestInterceptor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = builder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RequestInterceptor requestInterceptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setRequestInterceptor(requestInterceptor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.converter.Converter converter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder14.setConverter(converter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RequestInterceptor requestInterceptor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder19.setRequestInterceptor(requestInterceptor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.Server server20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder16.setServer(server20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.Profiler profiler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setProfiler(profiler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.ErrorHandler errorHandler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setErrorHandler(errorHandler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RequestInterceptor requestInterceptor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setRequestInterceptor(requestInterceptor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setExecutors(executor11, executor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.Server server17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setServer(server17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.Server server7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setServer(server7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.ErrorHandler errorHandler19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder18.setErrorHandler(errorHandler19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.Profiler profiler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder19.setProfiler(profiler20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder16.setExecutors(executor17, executor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter31 = builder30.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setErrorHandler(errorHandler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.converter.Converter converter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder6.setConverter(converter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.converter.Converter converter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder16.setConverter(converter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setErrorHandler(errorHandler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.lang.Class<?> wildcardClass7 = builder6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.Server server23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder22.setServer(server23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        java.lang.Class<?> wildcardClass23 = builder16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder16.setClient(provider23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        java.lang.Class<?> wildcardClass15 = builder6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.converter.Converter converter35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder6.setConverter(converter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder45.setClient(provider46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.ErrorHandler errorHandler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setErrorHandler(errorHandler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RequestInterceptor requestInterceptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder2.setRequestInterceptor(requestInterceptor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder0.setExecutors(executor35, executor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.client.Client client11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder10.setClient(client11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.ErrorHandler errorHandler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setErrorHandler(errorHandler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.ErrorHandler errorHandler35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder6.setErrorHandler(errorHandler35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.ErrorHandler errorHandler23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder16.setErrorHandler(errorHandler23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.ErrorHandler errorHandler46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder22.setErrorHandler(errorHandler46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.client.Client.Provider provider15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder6.setClient(provider15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        java.lang.Class<?> wildcardClass5 = log3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder6.setExecutors(executor7, executor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.converter.Converter converter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder19.setConverter(converter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.client.Client client25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder24.setClient(client25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.Server server47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder45.setServer(server47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.Server server27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder0.setExecutors(executor9, executor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RequestInterceptor requestInterceptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder26.setRequestInterceptor(requestInterceptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.Profiler profiler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setProfiler(profiler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.client.Client.Provider provider11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setClient(provider11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.Profiler profiler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder0.setProfiler(profiler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setServer(server1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.client.Client.Provider provider45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder44.setClient(provider45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        java.lang.Class<?> wildcardClass9 = builder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setRequestInterceptor(requestInterceptor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.ErrorHandler errorHandler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder16.setErrorHandler(errorHandler20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setClient(provider35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder6.setExecutors(executor15, executor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        java.lang.Class<?> wildcardClass50 = builder49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setExecutors(executor3, executor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter1 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.Server server45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder44.setServer(server45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder6.setExecutors(executor8, executor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.converter.Converter converter47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder45.setConverter(converter47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setClient(provider13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RequestInterceptor requestInterceptor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder16.setRequestInterceptor(requestInterceptor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        java.lang.Class<?> wildcardClass5 = builder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setConverter(converter3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder0.setExecutors(executor41, executor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.Server server35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder34.setServer(server35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.ErrorHandler errorHandler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setErrorHandler(errorHandler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.ErrorHandler errorHandler27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder26.setErrorHandler(errorHandler27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder0.setExecutors(executor9, executor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("hi!");
        log0.log("hi!");
        log0.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.converter.Converter converter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setConverter(converter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setErrorHandler(errorHandler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.client.Client client37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder36.setClient(client37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.converter.Converter converter27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder26.setConverter(converter27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.client.Client.Provider provider45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder44.setClient(provider45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder30.setExecutors(executor31, executor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.Profiler profiler46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder45.setProfiler(profiler46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.Server server37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setServer(server37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setExecutors(executor7, executor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder22.setClient(provider46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.Server server3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setExecutors(executor7, executor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.Server server40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder30.setServer(server40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.client.Client.Provider provider15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setClient(provider15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.Profiler profiler19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder18.setProfiler(profiler19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.RequestInterceptor requestInterceptor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder0.setRequestInterceptor(requestInterceptor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RequestInterceptor requestInterceptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder24.setRequestInterceptor(requestInterceptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder45.setExecutors(executor47, executor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.Server server5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder4.setServer(server5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.client.Client.Provider provider11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder10.setClient(provider11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.setLogLevel(logLevel24);
        java.lang.Class<?> wildcardClass26 = restAdapter20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.Server server50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder22.setServer(server50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.client.Client client31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder6.setClient(client31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        java.lang.Class<?> wildcardClass21 = builder16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.Server server45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder6.setServer(server45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.client.Client client40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder39.setClient(client40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setExecutors(executor45, executor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setErrorHandler(errorHandler13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder25.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        boolean boolean30 = logLevel28.log();
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder32 = builder24.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder34.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter38 = builder34.build();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter38.getLogLevel();
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder14.setLogLevel(logLevel40);
        retrofit.converter.Converter converter44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder45 = builder14.setConverter(converter44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.converter.Converter converter46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder45.setConverter(converter46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.Server server46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder45.setServer(server46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.client.Client client23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder22.setClient(client23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder12.setRequestInterceptor(requestInterceptor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.client.Client client27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder24.setClient(client27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder14.setExecutors(executor15, executor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        java.lang.Class<?> wildcardClass41 = builder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.converter.Converter converter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder4.setConverter(converter25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder22.setExecutors(executor46, executor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder16.setExecutors(executor45, executor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = builder34.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.converter.Converter converter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setConverter(converter3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.client.Client client43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder6.setClient(client43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.client.Client client35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setClient(client35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.client.Client client43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder42.setClient(client43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.client.Client.Provider provider8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder6.setClient(provider8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.RestAdapter.LogLevel logLevel47 = null;
        restAdapter46.setLogLevel(logLevel47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.ErrorHandler errorHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setErrorHandler(errorHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RequestInterceptor requestInterceptor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder41.setRequestInterceptor(requestInterceptor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.client.Client client66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder65.setClient(client66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        retrofit.client.Client client78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder30.setClient(client78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLogLevel(logLevel19);
        java.lang.Class<?> wildcardClass21 = builder18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        java.lang.Class<?> wildcardClass26 = logLevel19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        boolean boolean34 = logLevel32.log();
        boolean boolean35 = logLevel32.log();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        java.lang.Class<?> wildcardClass40 = builder39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.client.Client client35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder6.setClient(client35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.Server server43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder6.setServer(server43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        java.lang.Class<?> wildcardClass25 = log21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder49.setExecutors(executor50, executor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.ErrorHandler errorHandler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder40.setErrorHandler(errorHandler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder49.setExecutors(executor50, executor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.client.Client.Provider provider47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder45.setClient(provider47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.converter.Converter converter75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder74.setConverter(converter75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        retrofit.RequestInterceptor requestInterceptor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder30.setRequestInterceptor(requestInterceptor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder25.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        boolean boolean30 = logLevel28.log();
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder32 = builder24.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder34.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter38 = builder34.build();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter38.getLogLevel();
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder14.setLogLevel(logLevel40);
        retrofit.client.Client client44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder45 = builder14.setClient(client44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder6.setExecutors(executor35, executor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder20.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.converter.Converter converter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setConverter(converter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.converter.Converter converter73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder16.setConverter(converter73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.ErrorHandler errorHandler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder39.setErrorHandler(errorHandler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.converter.Converter converter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setConverter(converter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.Server server19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setServer(server19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder14.setExecutors(executor19, executor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.client.Client.Provider provider25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder24.setClient(provider25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.ErrorHandler errorHandler43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder42.setErrorHandler(errorHandler43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLogLevel(logLevel19);
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder23 = builder18.setExecutors(executor21, executor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.client.Client client40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder30.setClient(client40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.converter.Converter converter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder42.setConverter(converter43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        restAdapter45.setLogLevel(logLevel46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        log1.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        log31.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        java.lang.Class<?> wildcardClass11 = builder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.ErrorHandler errorHandler8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder6.setErrorHandler(errorHandler8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.converter.Converter converter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setConverter(converter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter66 = builder33.build();
        retrofit.converter.Converter converter67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder33.setConverter(converter67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter66);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setErrorHandler(errorHandler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.Server server75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder74.setServer(server75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RequestInterceptor requestInterceptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder6.setRequestInterceptor(requestInterceptor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(provider7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.converter.Converter converter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setConverter(converter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder34 = builder32.setClient(provider33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLogLevel(logLevel19);
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder18.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RequestInterceptor requestInterceptor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setRequestInterceptor(requestInterceptor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.client.Client client41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder0.setClient(client41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setRequestInterceptor(requestInterceptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        retrofit.RestAdapter.Builder builder56 = builder53.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder58.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder77 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        retrofit.RestAdapter.Builder builder81 = builder77.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = builder62.setLog(log79);
        retrofit.RestAdapter.Builder builder83 = builder53.setLog(log79);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log79);
        retrofit.Profiler profiler85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setProfiler(profiler85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.Profiler profiler47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder16.setProfiler(profiler47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.ErrorHandler errorHandler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setErrorHandler(errorHandler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter78 = builder30.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.converter.Converter converter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder30.setConverter(converter54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter.Builder builder54 = builder51.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter55 = builder51.build();
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        boolean boolean70 = logLevel68.log();
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean76 = logLevel75.log();
        retrofit.RestAdapter.Builder builder77 = builder74.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter78 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder57.setLogLevel(logLevel79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.Builder builder84 = builder57.setLog(log81);
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        log85.log("");
        log85.log("hi!");
        retrofit.RestAdapter.Builder builder92 = builder57.setLog(log85);
        retrofit.RestAdapter.Builder builder93 = builder6.setLog(log85);
        retrofit.ErrorHandler errorHandler94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder95 = builder6.setErrorHandler(errorHandler94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log19);
        log19.log("");
        log19.log("");
        retrofit.RestAdapter.Builder builder26 = builder2.setLog(log19);
        retrofit.Profiler profiler27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder2.setProfiler(profiler27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter.Builder builder51 = builder48.setLogLevel(logLevel49);
        retrofit.RestAdapter restAdapter52 = builder48.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder58 = builder31.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder8.setLog(log55);
        retrofit.Profiler profiler62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder8.setProfiler(profiler62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder3.setLog(log6);
        retrofit.RestAdapter.Builder builder8 = builder0.setLog(log6);
        retrofit.RequestInterceptor requestInterceptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setRequestInterceptor(requestInterceptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RequestInterceptor requestInterceptor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setRequestInterceptor(requestInterceptor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        retrofit.client.Client client50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setClient(client50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.client.Client.Provider provider45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder16.setClient(provider45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        retrofit.Server server50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder39.setServer(server50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.client.Client client54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder30.setClient(client54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        retrofit.RequestInterceptor requestInterceptor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder8.setRequestInterceptor(requestInterceptor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log19);
        log19.log("");
        log19.log("");
        retrofit.RestAdapter.Builder builder26 = builder2.setLog(log19);
        retrofit.RequestInterceptor requestInterceptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder26.setRequestInterceptor(requestInterceptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder65.setExecutors(executor66, executor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        java.lang.Class<?> wildcardClass25 = builder4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.Profiler profiler73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder72.setProfiler(profiler73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RequestInterceptor requestInterceptor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder8.setRequestInterceptor(requestInterceptor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.converter.Converter converter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder9.setConverter(converter10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.Profiler profiler42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder30.setProfiler(profiler42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        retrofit.RestAdapter.Builder builder22 = builder8.setServer("hi!");
        retrofit.ErrorHandler errorHandler23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder8.setErrorHandler(errorHandler23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder55 = builder47.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = builder55.build();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder59.setLog(log60);
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        boolean boolean64 = logLevel62.log();
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        boolean boolean71 = logLevel69.log();
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = builder65.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder74.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean78 = logLevel77.log();
        boolean boolean79 = logLevel77.log();
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder81.setLog(log82);
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean85 = logLevel84.log();
        boolean boolean86 = logLevel84.log();
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder88 = builder80.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder89 = builder65.setLogLevel(logLevel84);
        restAdapter58.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder91 = builder40.setLogLevel(logLevel84);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter92 = builder91.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.Profiler profiler51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder44.setProfiler(profiler51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.ErrorHandler errorHandler27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder24.setErrorHandler(errorHandler27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder19.setLogLevel(logLevel20);
        retrofit.RestAdapter restAdapter23 = builder19.build();
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder50.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder55.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        boolean boolean60 = logLevel58.log();
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean66 = logLevel65.log();
        boolean boolean67 = logLevel65.log();
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder69 = builder61.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.Builder builder73 = builder69.setLog(log71);
        retrofit.RestAdapter.Builder builder74 = builder54.setLog(log71);
        retrofit.RestAdapter.Builder builder75 = builder49.setLog(log71);
        log71.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        retrofit.RestAdapter.Builder builder56 = builder53.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder58.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder77 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        retrofit.RestAdapter.Builder builder81 = builder77.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = builder62.setLog(log79);
        retrofit.RestAdapter.Builder builder83 = builder53.setLog(log79);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log79);
        retrofit.ErrorHandler errorHandler85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setErrorHandler(errorHandler85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.client.Client.Provider provider47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder46.setClient(provider47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log19);
        log19.log("");
        log19.log("");
        retrofit.RestAdapter.Builder builder26 = builder2.setLog(log19);
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder26.setExecutors(executor27, executor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.Server server46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setServer(server46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder25.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        boolean boolean30 = logLevel28.log();
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder32 = builder24.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder48 = builder24.setLogLevel(logLevel43);
        restAdapter17.setLogLevel(logLevel43);
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.setLogLevel(logLevel50);
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter17.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.ErrorHandler errorHandler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder65.setErrorHandler(errorHandler66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.Server server35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setServer(server35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = builder2.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("hi!");
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder12.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        retrofit.RestAdapter.Builder builder59 = builder22.setServer("hi!");
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder59.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        retrofit.ErrorHandler errorHandler50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setErrorHandler(errorHandler50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        retrofit.converter.Converter converter78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder30.setConverter(converter78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder14.setExecutors(executor17, executor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = builder59.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = builder44.setLog(log61);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder64.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder39.setLog(log65);
        retrofit.RestAdapter restAdapter68 = builder67.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        boolean boolean74 = logLevel72.log();
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder76.setLog(log77);
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean80 = logLevel79.log();
        boolean boolean81 = logLevel79.log();
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder83 = builder75.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter.Builder builder88 = builder85.setLogLevel(logLevel86);
        retrofit.RestAdapter restAdapter89 = builder85.build();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter89.getLogLevel();
        restAdapter68.setLogLevel(logLevel91);
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter68.getLogLevel();
        restAdapter20.setLogLevel(logLevel93);
        boolean boolean95 = logLevel93.log();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder8.setClient(provider15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        log25.log("hi!");
        log25.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.client.Client.Provider provider43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder6.setClient(provider43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RequestInterceptor requestInterceptor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder72.setRequestInterceptor(requestInterceptor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.ErrorHandler errorHandler35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder34.setErrorHandler(errorHandler35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        log55.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        retrofit.converter.Converter converter58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder22.setConverter(converter58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        boolean boolean7 = logLevel3.log();
        java.lang.Class<?> wildcardClass8 = logLevel3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder15.setLog(log18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder19.setLog(log36);
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        log40.log("");
        retrofit.RestAdapter.Builder builder44 = builder8.setLog(log40);
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setExecutors(executor45, executor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        boolean boolean73 = logLevel71.log();
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = builder74.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder84.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.Builder builder90 = builder67.setLogLevel(logLevel89);
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder67.setLog(log91);
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder97 = builder44.setLog(log91);
        retrofit.RestAdapter.LogLevel logLevel98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder97.setLogLevel(logLevel98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.Server server15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setServer(server15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.converter.Converter converter50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder22.setConverter(converter50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder19.setLogLevel(logLevel20);
        retrofit.RestAdapter restAdapter23 = builder19.build();
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel47);
        retrofit.Server server50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setServer(server50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setProfiler(profiler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        log10.log("");
        log10.log("hi!");
        log10.log("");
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log10);
        retrofit.converter.Converter converter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder19.setConverter(converter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RestAdapter restAdapter46 = builder44.build();
        retrofit.ErrorHandler errorHandler47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder44.setErrorHandler(errorHandler47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder16.setExecutors(executor53, executor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder82.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        boolean boolean87 = logLevel85.log();
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder89 = builder81.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder92 = builder90.setLog(log91);
        retrofit.RestAdapter.Builder builder93 = builder89.setLog(log91);
        log91.log("");
        retrofit.RestAdapter.Builder builder96 = builder72.setLog(log91);
        java.util.concurrent.Executor executor97 = null;
        java.util.concurrent.Executor executor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder72.setExecutors(executor97, executor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        boolean boolean71 = logLevel69.log();
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder73.setLog(log74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean77 = logLevel76.log();
        boolean boolean78 = logLevel76.log();
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = builder72.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder81 = builder57.setLogLevel(logLevel76);
        restAdapter50.setLogLevel(logLevel76);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder85 = builder32.setLogLevel(logLevel83);
        retrofit.client.Client client86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder85.setClient(client86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        retrofit.RestAdapter.Builder builder56 = builder53.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder58.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder77 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        retrofit.RestAdapter.Builder builder81 = builder77.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = builder62.setLog(log79);
        retrofit.RestAdapter.Builder builder83 = builder53.setLog(log79);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log79);
        retrofit.client.Client.Provider provider85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder36.setClient(provider85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setExecutors(executor3, executor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        log12.log("");
        log12.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder19.setLog(log20);
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        boolean boolean24 = logLevel22.log();
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel22);
        boolean boolean26 = logLevel22.log();
        retrofit.RestAdapter.Builder builder27 = builder14.setLogLevel(logLevel22);
        retrofit.RequestInterceptor requestInterceptor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder27.setRequestInterceptor(requestInterceptor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.client.Client.Provider provider25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder4.setClient(provider25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder30.setExecutors(executor54, executor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.Profiler profiler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder65.setProfiler(profiler66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RestAdapter restAdapter46 = builder44.build();
        retrofit.client.Client client47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder44.setClient(client47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.ErrorHandler errorHandler47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder45.setErrorHandler(errorHandler47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        log25.log("");
        log25.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter.Builder builder51 = builder48.setLogLevel(logLevel49);
        retrofit.RestAdapter restAdapter52 = builder48.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder58 = builder31.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder8.setLog(log55);
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder61.setExecutors(executor62, executor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        retrofit.RestAdapter.Builder builder56 = builder53.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder58.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder77 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        retrofit.RestAdapter.Builder builder81 = builder77.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = builder62.setLog(log79);
        retrofit.RestAdapter.Builder builder83 = builder53.setLog(log79);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log79);
        log79.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.getLogLevel();
        restAdapter18.setLogLevel(logLevel48);
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean51 = logLevel50.log();
        boolean boolean52 = logLevel50.log();
        boolean boolean53 = logLevel50.log();
        boolean boolean54 = logLevel50.log();
        restAdapter18.setLogLevel(logLevel50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.client.Client client51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder44.setClient(client51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        boolean boolean69 = logLevel66.log();
        boolean boolean70 = logLevel66.log();
        boolean boolean71 = logLevel66.log();
        boolean boolean72 = logLevel66.log();
        retrofit.RestAdapter.Builder builder73 = builder33.setLogLevel(logLevel66);
        retrofit.ErrorHandler errorHandler74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder75 = builder33.setErrorHandler(errorHandler74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.getLogLevel();
        restAdapter18.setLogLevel(logLevel48);
        java.lang.Class<?> wildcardClass50 = restAdapter18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter.Builder builder54 = builder51.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter55 = builder51.build();
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        boolean boolean70 = logLevel68.log();
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean76 = logLevel75.log();
        retrofit.RestAdapter.Builder builder77 = builder74.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter78 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder57.setLogLevel(logLevel79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.Builder builder84 = builder57.setLog(log81);
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        log85.log("");
        log85.log("hi!");
        retrofit.RestAdapter.Builder builder92 = builder57.setLog(log85);
        retrofit.RestAdapter.Builder builder93 = builder6.setLog(log85);
        java.util.concurrent.Executor executor94 = null;
        java.util.concurrent.Executor executor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder96 = builder6.setExecutors(executor94, executor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter.Builder builder70 = builder67.setLogLevel(logLevel68);
        retrofit.RestAdapter restAdapter71 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter71.getLogLevel();
        boolean boolean78 = logLevel77.log();
        retrofit.RestAdapter.Builder builder79 = builder50.setLogLevel(logLevel77);
        retrofit.ErrorHandler errorHandler80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder79.setErrorHandler(errorHandler80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        java.lang.Class<?> wildcardClass19 = builder14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setExecutors(executor20, executor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.Profiler profiler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder24.setProfiler(profiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter18.getLogLevel();
        boolean boolean27 = logLevel26.log();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.Builder builder51 = builder47.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLogLevel(logLevel52);
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder32.setLogLevel(logLevel52);
        retrofit.RequestInterceptor requestInterceptor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder55.setRequestInterceptor(requestInterceptor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        log47.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder82.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        boolean boolean87 = logLevel85.log();
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder89 = builder81.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder92 = builder90.setLog(log91);
        retrofit.RestAdapter.Builder builder93 = builder89.setLog(log91);
        log91.log("");
        retrofit.RestAdapter.Builder builder96 = builder72.setLog(log91);
        retrofit.client.Client client97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder72.setClient(client97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder3.setLog(log6);
        retrofit.RestAdapter.Builder builder8 = builder0.setLog(log6);
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter.Builder builder70 = builder67.setLogLevel(logLevel68);
        retrofit.RestAdapter restAdapter71 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter71.getLogLevel();
        boolean boolean78 = logLevel77.log();
        retrofit.RestAdapter.Builder builder79 = builder50.setLogLevel(logLevel77);
        retrofit.Server server80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder79.setServer(server80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.ErrorHandler errorHandler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder0.setErrorHandler(errorHandler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        restAdapter7.setLogLevel(logLevel8);
        java.lang.Class<?> wildcardClass12 = restAdapter7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean1 = logLevel0.log();
        boolean boolean2 = logLevel0.log();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        java.lang.Class<?> wildcardClass45 = builder44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = builder59.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = builder44.setLog(log61);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder64.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder39.setLog(log65);
        retrofit.RestAdapter restAdapter68 = builder67.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        boolean boolean74 = logLevel72.log();
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder76.setLog(log77);
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean80 = logLevel79.log();
        boolean boolean81 = logLevel79.log();
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder83 = builder75.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter.Builder builder88 = builder85.setLogLevel(logLevel86);
        retrofit.RestAdapter restAdapter89 = builder85.build();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter89.getLogLevel();
        restAdapter68.setLogLevel(logLevel91);
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter68.getLogLevel();
        restAdapter20.setLogLevel(logLevel93);
        java.lang.Class<?> wildcardClass95 = logLevel93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.Profiler profiler50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setProfiler(profiler50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter66 = builder33.build();
        retrofit.client.Client client67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder33.setClient(client67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter66);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.ErrorHandler errorHandler51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder50.setErrorHandler(errorHandler51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.converter.Converter converter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder22.setConverter(converter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder14.setRequestInterceptor(requestInterceptor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        log21.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder16.setExecutors(executor17, executor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = builder33.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter.Builder builder46 = builder43.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter47 = builder43.build();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter47.getLogLevel();
        boolean boolean50 = logLevel49.log();
        boolean boolean51 = logLevel49.log();
        retrofit.RestAdapter.Builder builder52 = builder23.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder53 = builder8.setLogLevel(logLevel49);
        retrofit.ErrorHandler errorHandler54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder53.setErrorHandler(errorHandler54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder3.setLog(log6);
        retrofit.RestAdapter.Builder builder8 = builder0.setLog(log6);
        retrofit.client.Client.Provider provider9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(provider9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder46.setLog(log47);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        boolean boolean51 = logLevel49.log();
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder52.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter.Builder builder65 = builder62.setLogLevel(logLevel63);
        retrofit.RestAdapter restAdapter66 = builder62.build();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter66.getLogLevel();
        restAdapter45.setLogLevel(logLevel68);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = null;
        restAdapter45.setLogLevel(logLevel71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder30.setClient(provider40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.client.Client.Provider provider46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setClient(provider46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        log70.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.Profiler profiler45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder44.setProfiler(profiler45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.client.Client.Provider provider41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder0.setClient(provider41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.client.Client client37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setClient(client37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = builder72.build();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter75);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        log10.log("");
        log10.log("hi!");
        log10.log("");
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log10);
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder19.setExecutors(executor20, executor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder16.build();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter41 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        boolean boolean73 = logLevel71.log();
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = builder74.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder84.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.Builder builder90 = builder67.setLogLevel(logLevel89);
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder67.setLog(log91);
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder97 = builder44.setLog(log91);
        retrofit.ErrorHandler errorHandler98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder44.setErrorHandler(errorHandler98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        log7.log("");
        log7.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.Server server34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder6.setServer(server34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setRequestInterceptor(requestInterceptor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder0.build();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = builder16.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter.Builder builder29 = builder26.setLogLevel(logLevel27);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter30.getLogLevel();
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        restAdapter9.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder36.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean40 = logLevel39.log();
        boolean boolean41 = logLevel39.log();
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel39);
        boolean boolean43 = logLevel39.log();
        restAdapter9.setLogLevel(logLevel39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder33.setClient(provider34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        log38.log("");
        log38.log("");
        log38.log("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder15.setLog(log18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder19.setLog(log36);
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        log40.log("");
        retrofit.RestAdapter.Builder builder44 = builder8.setLog(log40);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder62.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder67.setLog(log68);
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        boolean boolean72 = logLevel70.log();
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder74.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean78 = logLevel77.log();
        boolean boolean79 = logLevel77.log();
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder81 = builder73.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder82.setLog(log83);
        retrofit.RestAdapter.Builder builder85 = builder81.setLog(log83);
        retrofit.RestAdapter.Builder builder86 = builder66.setLog(log83);
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder86.setLog(log87);
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter restAdapter90 = builder89.build();
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter90.getLogLevel();
        retrofit.RestAdapter.Builder builder92 = builder8.setLogLevel(logLevel91);
        retrofit.Server server93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder8.setServer(server93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder82.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        boolean boolean87 = logLevel85.log();
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder89 = builder81.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder92 = builder90.setLog(log91);
        retrofit.RestAdapter.Builder builder93 = builder89.setLog(log91);
        log91.log("");
        retrofit.RestAdapter.Builder builder96 = builder72.setLog(log91);
        retrofit.Profiler profiler97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder96.setProfiler(profiler97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder15.setLog(log18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder19.setLog(log36);
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        log40.log("");
        retrofit.RestAdapter.Builder builder44 = builder8.setLog(log40);
        retrofit.client.Client client45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder44.setClient(client45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder6.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.client.Client.Provider provider21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder16.setClient(provider21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder27.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder47.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = builder46.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = builder31.setLog(log48);
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        log52.log("hi!");
        retrofit.RestAdapter.Builder builder56 = builder26.setLog(log52);
        java.lang.Class<?> wildcardClass57 = builder26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        log75.log("");
        log75.log("hi!");
        log75.log("");
        retrofit.RestAdapter.Builder builder84 = builder72.setLog(log75);
        log75.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log19);
        log19.log("");
        log19.log("");
        retrofit.RestAdapter.Builder builder26 = builder2.setLog(log19);
        java.lang.Class<?> wildcardClass27 = builder2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder34.setClient(provider35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.Server server19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setServer(server19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder19.setLog(log20);
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        boolean boolean24 = logLevel22.log();
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = builder25.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter36.getLogLevel();
        restAdapter17.setLogLevel(logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter17.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("");
        retrofit.RestAdapter.Builder builder27 = builder17.setLog(log24);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder28.setLog(log29);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        boolean boolean33 = logLevel31.log();
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder34.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter.Builder builder47 = builder44.setLogLevel(logLevel45);
        retrofit.RestAdapter restAdapter48 = builder44.build();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.Builder builder51 = builder17.setLogLevel(logLevel50);
        boolean boolean52 = logLevel50.log();
        retrofit.RestAdapter.Builder builder53 = builder16.setLogLevel(logLevel50);
        retrofit.converter.Converter converter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder16.setConverter(converter54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter restAdapter63 = builder62.build();
        retrofit.ErrorHandler errorHandler64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder62.setErrorHandler(errorHandler64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter63);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder54.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean58 = logLevel57.log();
        boolean boolean59 = logLevel57.log();
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel57);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("");
        retrofit.RestAdapter.Builder builder64 = builder54.setLog(log61);
        log61.log("hi!");
        retrofit.RestAdapter.Builder builder67 = builder30.setLog(log61);
        retrofit.client.Client.Provider provider68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder30.setClient(provider68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder8.build();
        java.lang.Class<?> wildcardClass10 = builder8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        boolean boolean69 = logLevel66.log();
        boolean boolean70 = logLevel66.log();
        boolean boolean71 = logLevel66.log();
        boolean boolean72 = logLevel66.log();
        retrofit.RestAdapter.Builder builder73 = builder33.setLogLevel(logLevel66);
        retrofit.Server server74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder75 = builder33.setServer(server74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("");
        retrofit.RestAdapter.Builder builder27 = builder17.setLog(log24);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder28.setLog(log29);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        boolean boolean33 = logLevel31.log();
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder34.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter.Builder builder47 = builder44.setLogLevel(logLevel45);
        retrofit.RestAdapter restAdapter48 = builder44.build();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.Builder builder51 = builder17.setLogLevel(logLevel50);
        boolean boolean52 = logLevel50.log();
        retrofit.RestAdapter.Builder builder53 = builder16.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder16.setClient(provider54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        retrofit.converter.Converter converter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder8.setConverter(converter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder9.setLog(log12);
        log12.log("hi!");
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder20 = builder8.setLog(log12);
        retrofit.Server server21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder20.setServer(server21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder68.setLog(log71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder73.setLog(log74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean77 = logLevel76.log();
        boolean boolean78 = logLevel76.log();
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder80.setLog(log81);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean84 = logLevel83.log();
        boolean boolean85 = logLevel83.log();
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder87 = builder79.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder90 = builder88.setLog(log89);
        retrofit.RestAdapter.Builder builder91 = builder87.setLog(log89);
        retrofit.RestAdapter.Builder builder92 = builder72.setLog(log89);
        retrofit.RestAdapter.Log log93 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder94 = builder92.setLog(log93);
        retrofit.RestAdapter.Builder builder95 = builder67.setLog(log93);
        retrofit.RestAdapter.Builder builder96 = builder44.setLog(log93);
        retrofit.RequestInterceptor requestInterceptor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder44.setRequestInterceptor(requestInterceptor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.ErrorHandler errorHandler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder16.setErrorHandler(errorHandler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        boolean boolean26 = logLevel19.log();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.ErrorHandler errorHandler46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setErrorHandler(errorHandler46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder19.setLog(log20);
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        boolean boolean24 = logLevel22.log();
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel22);
        boolean boolean26 = logLevel22.log();
        retrofit.RestAdapter.Builder builder27 = builder14.setLogLevel(logLevel22);
        retrofit.RequestInterceptor requestInterceptor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder14.setRequestInterceptor(requestInterceptor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder53.setExecutors(executor54, executor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.client.Client client50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setClient(client50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter20.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Server server7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setServer(server7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder19.build();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder6.setExecutors(executor17, executor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder19.setLogLevel(logLevel20);
        retrofit.RestAdapter restAdapter23 = builder19.build();
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setClient(provider50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter.Builder builder54 = builder51.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter55 = builder51.build();
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        boolean boolean70 = logLevel68.log();
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean76 = logLevel75.log();
        retrofit.RestAdapter.Builder builder77 = builder74.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter78 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder57.setLogLevel(logLevel79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.Builder builder84 = builder57.setLog(log81);
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        log85.log("");
        log85.log("hi!");
        retrofit.RestAdapter.Builder builder92 = builder57.setLog(log85);
        retrofit.RestAdapter.Builder builder93 = builder6.setLog(log85);
        retrofit.converter.Converter converter94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder95 = builder93.setConverter(converter94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log19);
        log19.log("");
        log19.log("");
        retrofit.RestAdapter.Builder builder26 = builder2.setLog(log19);
        retrofit.RequestInterceptor requestInterceptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder2.setRequestInterceptor(requestInterceptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder25.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        boolean boolean30 = logLevel28.log();
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder32 = builder24.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder34.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter38 = builder34.build();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter38.getLogLevel();
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        boolean boolean43 = logLevel40.log();
        restAdapter17.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.setLogLevel(logLevel69);
        restAdapter17.setLogLevel(logLevel69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder74.setClient(provider75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder22.setRequestInterceptor(requestInterceptor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        retrofit.converter.Converter converter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder54 = builder16.setConverter(converter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder27.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder47.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = builder46.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = builder31.setLog(log48);
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        log52.log("hi!");
        retrofit.RestAdapter.Builder builder56 = builder26.setLog(log52);
        retrofit.Server server57 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder58 = builder56.setServer(server57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder32.setExecutors(executor33, executor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        log75.log("");
        log75.log("hi!");
        log75.log("");
        retrofit.RestAdapter.Builder builder84 = builder72.setLog(log75);
        retrofit.RequestInterceptor requestInterceptor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder72.setRequestInterceptor(requestInterceptor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder3.setLog(log6);
        retrofit.RestAdapter.Builder builder8 = builder0.setLog(log6);
        retrofit.ErrorHandler errorHandler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setErrorHandler(errorHandler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.converter.Converter converter47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder46.setConverter(converter47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        retrofit.ErrorHandler errorHandler53 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder54 = builder16.setErrorHandler(errorHandler53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter restAdapter63 = builder62.build();
        retrofit.client.Client client64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder62.setClient(client64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter63);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        boolean boolean22 = logLevel19.log();
        boolean boolean23 = logLevel19.log();
        boolean boolean24 = logLevel19.log();
        restAdapter18.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.getLogLevel();
        restAdapter18.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean68 = logLevel67.log();
        retrofit.RestAdapter.Builder builder69 = builder66.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter70 = builder66.build();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.setLogLevel(logLevel74);
        restAdapter18.setLogLevel(logLevel74);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean78 = logLevel77.log();
        restAdapter18.setLogLevel(logLevel77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.Profiler profiler10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder9.setProfiler(profiler10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.client.Client client54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder53.setClient(client54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder0.build();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = builder16.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter.Builder builder29 = builder26.setLogLevel(logLevel27);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter30.getLogLevel();
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        restAdapter9.setLogLevel(logLevel32);
        java.lang.Class<?> wildcardClass36 = restAdapter9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        retrofit.Server server58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder57.setServer(server58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder21 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder14.setExecutors(executor22, executor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter78 = builder77.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.converter.Converter converter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setConverter(converter31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        log38.log("");
        log38.log("");
        log38.log("");
        java.lang.Class<?> wildcardClass51 = log38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder6.setRequestInterceptor(requestInterceptor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log45);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter.Builder builder70 = builder67.setLogLevel(logLevel68);
        retrofit.RestAdapter restAdapter71 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter71.getLogLevel();
        boolean boolean78 = logLevel77.log();
        retrofit.RestAdapter.Builder builder79 = builder50.setLogLevel(logLevel77);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter80 = builder79.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder43.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        boolean boolean48 = logLevel46.log();
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder51 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = builder43.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder42.setLogLevel(logLevel53);
        retrofit.ErrorHandler errorHandler55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder54.setErrorHandler(errorHandler55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        retrofit.converter.Converter converter50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setConverter(converter50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.Builder builder51 = builder47.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLogLevel(logLevel52);
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder32.setLogLevel(logLevel52);
        java.lang.Class<?> wildcardClass56 = builder32.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder6.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.Profiler profiler50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder22.setProfiler(profiler50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        boolean boolean69 = logLevel66.log();
        boolean boolean70 = logLevel66.log();
        boolean boolean71 = logLevel66.log();
        boolean boolean72 = logLevel66.log();
        retrofit.RestAdapter.Builder builder73 = builder33.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter74 = builder33.build();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter74);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        boolean boolean73 = logLevel71.log();
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = builder74.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder84.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.Builder builder90 = builder67.setLogLevel(logLevel89);
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder67.setLog(log91);
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder97 = builder44.setLog(log91);
        retrofit.RequestInterceptor requestInterceptor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder97.setRequestInterceptor(requestInterceptor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter.Builder builder54 = builder51.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter55 = builder51.build();
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        boolean boolean70 = logLevel68.log();
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean76 = logLevel75.log();
        retrofit.RestAdapter.Builder builder77 = builder74.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter78 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder57.setLogLevel(logLevel79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.Builder builder84 = builder57.setLog(log81);
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        log85.log("");
        log85.log("hi!");
        retrofit.RestAdapter.Builder builder92 = builder57.setLog(log85);
        retrofit.RestAdapter.Builder builder93 = builder6.setLog(log85);
        java.lang.Class<?> wildcardClass94 = log85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder14.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        boolean boolean19 = logLevel17.log();
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        boolean boolean26 = logLevel24.log();
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder28 = builder20.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = builder28.setLog(log30);
        log30.log("");
        log30.log("");
        retrofit.RestAdapter.Builder builder37 = builder13.setLog(log30);
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log30);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter39 = builder38.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.converter.Converter converter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder6.setConverter(converter43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter.Builder builder64 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder66.setLog(log69);
        log69.log("hi!");
        log69.log("");
        log69.log("");
        log69.log("hi!");
        log69.log("");
        retrofit.RestAdapter.Builder builder81 = builder64.setLog(log69);
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder84 = builder64.setExecutors(executor82, executor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        boolean boolean71 = logLevel69.log();
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder73.setLog(log74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean77 = logLevel76.log();
        boolean boolean78 = logLevel76.log();
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = builder72.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder81 = builder57.setLogLevel(logLevel76);
        restAdapter50.setLogLevel(logLevel76);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder85 = builder32.setLogLevel(logLevel83);
        retrofit.Server server86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder85.setServer(server86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder27.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder47.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = builder46.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = builder31.setLog(log48);
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        log52.log("hi!");
        retrofit.RestAdapter.Builder builder56 = builder26.setLog(log52);
        retrofit.Profiler profiler57 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder58 = builder56.setProfiler(profiler57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter66 = builder33.build();
        retrofit.RequestInterceptor requestInterceptor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder33.setRequestInterceptor(requestInterceptor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter66);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        retrofit.converter.Converter converter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder54 = builder52.setConverter(converter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder19.setExecutors(executor20, executor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder29.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder6.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter.Builder builder54 = builder51.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter55 = builder51.build();
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        boolean boolean70 = logLevel68.log();
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean76 = logLevel75.log();
        retrofit.RestAdapter.Builder builder77 = builder74.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter78 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder57.setLogLevel(logLevel79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.Builder builder84 = builder57.setLog(log81);
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        log85.log("");
        log85.log("hi!");
        retrofit.RestAdapter.Builder builder92 = builder57.setLog(log85);
        retrofit.RestAdapter.Builder builder93 = builder6.setLog(log85);
        retrofit.converter.Converter converter94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder95 = builder6.setConverter(converter94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder60.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        boolean boolean65 = logLevel63.log();
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter.Builder builder72 = builder69.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter73 = builder69.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder76 = builder42.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder30.setLogLevel(logLevel75);
        retrofit.Server server78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder77.setServer(server78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean39 = logLevel38.log();
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder50 = builder26.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        boolean boolean58 = logLevel54.log();
        retrofit.RestAdapter.Builder builder59 = builder50.setLogLevel(logLevel54);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder61 = builder50.setLogLevel(logLevel60);
        restAdapter17.setLogLevel(logLevel60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        retrofit.RestAdapter.Builder builder68 = builder65.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter69 = builder65.build();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = builder48.setLogLevel(logLevel70);
        restAdapter20.setLogLevel(logLevel70);
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter20.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder14.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        boolean boolean19 = logLevel17.log();
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        boolean boolean26 = logLevel24.log();
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder28 = builder20.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = builder28.setLog(log30);
        log30.log("");
        log30.log("");
        retrofit.RestAdapter.Builder builder37 = builder13.setLog(log30);
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log30);
        retrofit.ErrorHandler errorHandler39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder40 = builder38.setErrorHandler(errorHandler39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.setLogLevel(logLevel24);
        boolean boolean26 = logLevel24.log();
        boolean boolean27 = logLevel24.log();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.client.Client client46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder44.setClient(client46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.client.Client client25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder4.setClient(client25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder19.setLog(log20);
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        boolean boolean24 = logLevel22.log();
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel22);
        boolean boolean26 = logLevel22.log();
        retrofit.RestAdapter.Builder builder27 = builder14.setLogLevel(logLevel22);
        retrofit.Server server28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder27.setServer(server28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = builder14.build();
        retrofit.converter.Converter converter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder14.setConverter(converter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter18);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        retrofit.RestAdapter.Builder builder42 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder43.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        boolean boolean48 = logLevel46.log();
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder51 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = builder43.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder42.setLogLevel(logLevel53);
        retrofit.converter.Converter converter55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder42.setConverter(converter55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter.Builder builder51 = builder48.setLogLevel(logLevel49);
        retrofit.RestAdapter restAdapter52 = builder48.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder58 = builder31.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder8.setLog(log55);
        log55.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter.Builder builder64 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("hi!");
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        log75.log("");
        log75.log("hi!");
        log75.log("");
        retrofit.RestAdapter.Builder builder84 = builder72.setLog(log75);
        retrofit.RestAdapter.Builder builder86 = builder72.setServer("hi!");
        retrofit.converter.Converter converter87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder72.setConverter(converter87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        log75.log("");
        log75.log("hi!");
        log75.log("");
        retrofit.RestAdapter.Builder builder84 = builder72.setLog(log75);
        retrofit.RestAdapter.Builder builder86 = builder72.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder72.setRequestInterceptor(requestInterceptor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder14.setExecutors(executor63, executor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder21.setLog(log22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder21.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("");
        log47.log("");
        retrofit.RestAdapter.Builder builder52 = builder16.setLog(log47);
        retrofit.RestAdapter restAdapter53 = builder16.build();
        retrofit.client.Client.Provider provider54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder16.setClient(provider54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter53);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter66 = builder33.build();
        retrofit.RestAdapter.LogLevel logLevel67 = null;
        restAdapter66.setLogLevel(logLevel67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter66);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        log50.log("");
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder57 = builder22.setLog(log50);
        retrofit.client.Client client58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder57.setClient(client58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder46.setLog(log47);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        boolean boolean51 = logLevel49.log();
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel49);
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("");
        retrofit.RestAdapter.Builder builder56 = builder46.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder64.setLog(log65);
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean68 = logLevel67.log();
        boolean boolean69 = logLevel67.log();
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder71 = builder63.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean75 = logLevel74.log();
        retrofit.RestAdapter.Builder builder76 = builder73.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter77 = builder73.build();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = builder46.setLogLevel(logLevel79);
        boolean boolean81 = logLevel79.log();
        boolean boolean82 = logLevel79.log();
        restAdapter45.setLogLevel(logLevel79);
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter45.getLogLevel();
        java.lang.Class<?> wildcardClass85 = restAdapter45.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.ErrorHandler errorHandler35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder38.setLog(log39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        boolean boolean43 = logLevel41.log();
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder45 = builder37.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder46.setLog(log47);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        boolean boolean51 = logLevel49.log();
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder52.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder61.setLog(log62);
        retrofit.RestAdapter.Builder builder64 = builder60.setLog(log62);
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log62);
        log62.log("");
        retrofit.RestAdapter.Builder builder68 = builder6.setLog(log62);
        retrofit.converter.Converter converter69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder6.setConverter(converter69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter.Builder builder64 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.RequestInterceptor requestInterceptor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder64.setRequestInterceptor(requestInterceptor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.RequestInterceptor requestInterceptor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder6.setRequestInterceptor(requestInterceptor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder19.setLogLevel(logLevel20);
        retrofit.RestAdapter restAdapter23 = builder19.build();
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder50.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder55.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        boolean boolean60 = logLevel58.log();
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean66 = logLevel65.log();
        boolean boolean67 = logLevel65.log();
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder69 = builder61.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.Builder builder73 = builder69.setLog(log71);
        retrofit.RestAdapter.Builder builder74 = builder54.setLog(log71);
        retrofit.RestAdapter.Builder builder75 = builder49.setLog(log71);
        retrofit.client.Client.Provider provider76 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder77 = builder75.setClient(provider76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder0.build();
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setExecutors(executor10, executor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter9);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean24 = logLevel23.log();
        boolean boolean25 = logLevel23.log();
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        retrofit.RestAdapter.Builder builder38 = builder34.setLog(log36);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log36);
        retrofit.RestAdapter.Builder builder40 = builder0.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder42 = builder0.setLogLevel(logLevel41);
        retrofit.converter.Converter converter43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder0.setConverter(converter43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean6 = logLevel5.log();
        boolean boolean7 = logLevel5.log();
        boolean boolean8 = logLevel5.log();
        boolean boolean9 = logLevel5.log();
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = builder25.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder36.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean40 = logLevel39.log();
        boolean boolean41 = logLevel39.log();
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder50.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder59 = builder35.setLogLevel(logLevel54);
        restAdapter28.setLogLevel(logLevel54);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.setLogLevel(logLevel61);
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder10.setLogLevel(logLevel61);
        retrofit.Server server65 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder66 = builder64.setServer(server65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder38.setLog(log39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        boolean boolean43 = logLevel41.log();
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder45 = builder37.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder46.setLog(log47);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        boolean boolean51 = logLevel49.log();
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder52.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder61.setLog(log62);
        retrofit.RestAdapter.Builder builder64 = builder60.setLog(log62);
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log62);
        log62.log("");
        retrofit.RestAdapter.Builder builder68 = builder6.setLog(log62);
        log62.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        boolean boolean73 = logLevel71.log();
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = builder74.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder84.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.Builder builder90 = builder67.setLogLevel(logLevel89);
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder67.setLog(log91);
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder97 = builder44.setLog(log91);
        java.lang.Class<?> wildcardClass98 = builder97.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        boolean boolean11 = logLevel9.log();
        boolean boolean12 = logLevel9.log();
        boolean boolean13 = logLevel9.log();
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter.Builder builder34 = builder31.setLogLevel(logLevel32);
        boolean boolean35 = logLevel32.log();
        retrofit.RestAdapter.Builder builder36 = builder8.setLogLevel(logLevel32);
        retrofit.RequestInterceptor requestInterceptor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder8.setRequestInterceptor(requestInterceptor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder27.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder47.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = builder46.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = builder31.setLog(log48);
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        log52.log("hi!");
        retrofit.RestAdapter.Builder builder56 = builder26.setLog(log52);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter57 = builder56.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder54.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean58 = logLevel57.log();
        boolean boolean59 = logLevel57.log();
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel57);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("");
        retrofit.RestAdapter.Builder builder64 = builder54.setLog(log61);
        log61.log("hi!");
        retrofit.RestAdapter.Builder builder67 = builder30.setLog(log61);
        retrofit.client.Client client68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder67.setClient(client68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLogLevel(logLevel19);
        retrofit.ErrorHandler errorHandler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder20.setErrorHandler(errorHandler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.setLogLevel(logLevel24);
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter20.getLogLevel();
        java.lang.Class<?> wildcardClass27 = restAdapter20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.client.Client client35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder34.setClient(client35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        java.lang.Class<?> wildcardClass17 = builder6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.setLogLevel(logLevel24);
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        boolean boolean30 = logLevel27.log();
        restAdapter20.setLogLevel(logLevel27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter.Builder builder64 = builder14.setServer("hi!");
        retrofit.Server server65 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder66 = builder14.setServer(server65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.Server server31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setServer(server31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        log16.log("hi!");
        log16.log("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.Builder builder49 = builder22.setLog(log46);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder45.setLog(log48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        boolean boolean55 = logLevel53.log();
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder57.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        boolean boolean62 = logLevel60.log();
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder56.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        retrofit.RestAdapter.Builder builder68 = builder64.setLog(log66);
        retrofit.RestAdapter.Builder builder69 = builder49.setLog(log66);
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder16.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder72.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        log75.log("");
        log75.log("hi!");
        log75.log("");
        retrofit.RestAdapter.Builder builder84 = builder72.setLog(log75);
        retrofit.Server server85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setServer(server85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = builder39.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        boolean boolean56 = logLevel54.log();
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        boolean boolean63 = logLevel61.log();
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder57.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        boolean boolean71 = logLevel69.log();
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder73.setLog(log74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean77 = logLevel76.log();
        boolean boolean78 = logLevel76.log();
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = builder72.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder81 = builder57.setLogLevel(logLevel76);
        restAdapter50.setLogLevel(logLevel76);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder85 = builder32.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder85.setClient(provider86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        log10.log("");
        log10.log("hi!");
        log10.log("");
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log10);
        retrofit.Server server20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder6.setServer(server20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.client.Client client18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder14.setClient(client18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        java.lang.Class<?> wildcardClass3 = builder0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder62.setExecutors(executor63, executor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("");
        retrofit.RestAdapter.Builder builder41 = builder31.setLog(log38);
        log38.log("hi!");
        retrofit.RestAdapter.Builder builder44 = builder6.setLog(log38);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder45.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean56 = logLevel55.log();
        boolean boolean57 = logLevel55.log();
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder51.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder61.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = builder61.build();
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        boolean boolean73 = logLevel71.log();
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder75.setLog(log76);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        boolean boolean80 = logLevel78.log();
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = builder74.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder84.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.Builder builder90 = builder67.setLogLevel(logLevel89);
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder67.setLog(log91);
        log91.log("hi!");
        retrofit.RestAdapter.Builder builder97 = builder44.setLog(log91);
        retrofit.Server server98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder97.setServer(server98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        retrofit.Server server66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder33.setServer(server66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = builder51.setLog(log53);
        log53.log("");
        log53.log("");
        retrofit.RestAdapter.Builder builder60 = builder36.setLog(log53);
        retrofit.RestAdapter.Builder builder61 = builder6.setLog(log53);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        retrofit.client.Client.Provider provider64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder63.setClient(provider64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.Builder builder18 = builder14.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLogLevel(logLevel19);
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder18.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder5.setLog(log6);
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean9 = logLevel8.log();
        boolean boolean10 = logLevel8.log();
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        boolean boolean17 = logLevel15.log();
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = builder19.setLog(log21);
        retrofit.RestAdapter.Builder builder24 = builder4.setLog(log21);
        retrofit.Server server25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder24.setServer(server25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.ErrorHandler errorHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder14.setErrorHandler(errorHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter56 = builder55.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        boolean boolean35 = logLevel33.log();
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder39.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = builder22.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        retrofit.client.Client.Provider provider48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder45.setClient(provider48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder17.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        boolean boolean34 = logLevel32.log();
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder28.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = builder36.setLog(log38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLog(log38);
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        log45.log("");
        retrofit.RestAdapter.Builder builder50 = builder16.setLog(log45);
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder50.setExecutors(executor51, executor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        retrofit.client.Client client56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder55.setClient(client56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        retrofit.RestAdapter.Builder builder19 = builder16.setLogLevel(logLevel17);
        retrofit.RestAdapter restAdapter20 = builder16.build();
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.Server server23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder16.setServer(server23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        boolean boolean16 = logLevel14.log();
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder18.setLog(log19);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        boolean boolean23 = logLevel21.log();
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder27.setLogLevel(logLevel28);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        retrofit.RestAdapter.Builder builder56 = builder53.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder58.setLog(log59);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder58.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        boolean boolean68 = logLevel66.log();
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder77 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        retrofit.RestAdapter.Builder builder81 = builder77.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = builder62.setLog(log79);
        retrofit.RestAdapter.Builder builder83 = builder53.setLog(log79);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log79);
        retrofit.converter.Converter converter85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setConverter(converter85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder19 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter20 = builder14.build();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter20.getLogLevel();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log7);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter11 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = builder51.setLog(log53);
        log53.log("");
        log53.log("");
        retrofit.RestAdapter.Builder builder60 = builder36.setLog(log53);
        retrofit.RestAdapter.Builder builder61 = builder6.setLog(log53);
        java.lang.Class<?> wildcardClass62 = builder61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder34.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        boolean boolean46 = logLevel44.log();
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = builder40.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        boolean boolean54 = logLevel52.log();
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        boolean boolean61 = logLevel59.log();
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder55.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder64 = builder40.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder65 = builder33.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder33.setExecutors(executor66, executor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder47 = builder23.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        boolean boolean53 = logLevel51.log();
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel51);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("");
        retrofit.RestAdapter.Builder builder58 = builder48.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder23.setLog(log55);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log55);
        retrofit.RestAdapter.Builder builder64 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.converter.Converter converter66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder64.setConverter(converter66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter65);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder30.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder42.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        retrofit.RestAdapter.Builder builder52 = builder42.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder30.setLog(log49);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder54.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean58 = logLevel57.log();
        boolean boolean59 = logLevel57.log();
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel57);
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("");
        retrofit.RestAdapter.Builder builder64 = builder54.setLog(log61);
        log61.log("hi!");
        retrofit.RestAdapter.Builder builder67 = builder30.setLog(log61);
        retrofit.converter.Converter converter68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder30.setConverter(converter68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder6.setRequestInterceptor(requestInterceptor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder32 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = builder6.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder37.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        boolean boolean42 = logLevel40.log();
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        boolean boolean49 = logLevel47.log();
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder52.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = builder51.setLog(log53);
        log53.log("");
        log53.log("");
        retrofit.RestAdapter.Builder builder60 = builder36.setLog(log53);
        retrofit.RestAdapter.Builder builder61 = builder6.setLog(log53);
        retrofit.RestAdapter restAdapter62 = builder61.build();
        retrofit.ErrorHandler errorHandler63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder61.setErrorHandler(errorHandler63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter62);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder40.setLog(log43);
        log43.log("hi!");
        log43.log("");
        retrofit.RestAdapter.Builder builder49 = builder39.setLog(log43);
        retrofit.Profiler profiler50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setProfiler(profiler50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.Log log3 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder9.setLog(log10);
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        boolean boolean14 = logLevel12.log();
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder23 = builder15.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter.Builder builder28 = builder25.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder32.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder39.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        boolean boolean44 = logLevel42.log();
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder46 = builder38.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter.Builder builder51 = builder48.setLogLevel(logLevel49);
        retrofit.RestAdapter restAdapter52 = builder48.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder58 = builder31.setLog(log55);
        log55.log("hi!");
        retrofit.RestAdapter.Builder builder61 = builder8.setLog(log55);
        retrofit.client.Client.Provider provider62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder8.setClient(provider62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLog(log4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        boolean boolean8 = logLevel6.log();
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder10.setLog(log11);
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder17 = builder9.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder19.setLogLevel(logLevel20);
        retrofit.RestAdapter restAdapter23 = builder19.build();
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        boolean boolean31 = logLevel29.log();
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean37 = logLevel36.log();
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder42.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter46 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder50.setLog(log51);
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder50.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder55.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        boolean boolean60 = logLevel58.log();
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean66 = logLevel65.log();
        boolean boolean67 = logLevel65.log();
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder69 = builder61.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder70.setLog(log71);
        retrofit.RestAdapter.Builder builder73 = builder69.setLog(log71);
        retrofit.RestAdapter.Builder builder74 = builder54.setLog(log71);
        retrofit.RestAdapter.Builder builder75 = builder49.setLog(log71);
        retrofit.RestAdapter.Builder builder77 = builder49.setServer("hi!");
        retrofit.Server server78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder77.setServer(server78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder2 = builder0.setLog(log1);
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean4 = logLevel3.log();
        boolean boolean5 = logLevel3.log();
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel3);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder7.setLog(log8);
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        boolean boolean12 = logLevel10.log();
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder29 = builder21.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel34);
        boolean boolean38 = logLevel34.log();
        retrofit.RestAdapter.Builder builder39 = builder30.setLogLevel(logLevel34);
        retrofit.Profiler profiler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder39.setProfiler(profiler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(log32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
    }
}

