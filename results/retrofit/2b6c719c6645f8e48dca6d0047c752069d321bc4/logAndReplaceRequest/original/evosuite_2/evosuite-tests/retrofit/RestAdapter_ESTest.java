/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 06:18:15 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import java.lang.reflect.Method;
import java.net.Proxy;
import java.net.ResponseCache;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.protocol.ResponseDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      String string1 = "jT@fC4]UMIsjhr[H,^f";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient((Client) urlConnectionClient0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(wireConverter0);
      long long0 = 778L;
      System.setCurrentTimeMillis(long0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      String string2 = "ZT8<2y)";
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder5.setServer(string2);
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      Class<HttpResponseInterceptor> class0 = HttpResponseInterceptor.class;
      HttpResponseInterceptor httpResponseInterceptor0 = restAdapter0.create(class0);
      Class<TypedByteArray> class1 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(wireConverter0);
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLog(restAdapter_Log0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      String string0 = " for ";
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setServer(string0);
      String string1 = "BASIC";
      restAdapter_Log0.log(string1);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setProfiler(profiler0);
      String string2 = "Invalid numeric value: ";
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder5.setServer(string2);
      RestAdapter.Builder restAdapter_Builder8 = new RestAdapter.Builder();
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder2.setClient((Client) apacheClient0);
      Profiler<Delayed> profiler1 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder4.setProfiler(profiler1);
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder3.setLog(restAdapter_Log0);
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder6.setLog(restAdapter_Log0);
      RestAdapter restAdapter0 = restAdapter_Builder12.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      String string0 = "E7VcyG?79xD";
      Server server0 = new Server(string0, string0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler1 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      boolean boolean0 = restAdapter_LogLevel0.log();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      Gson gson0 = new Gson();
      String string0 = "Asynchronous invocation requires calling setExecutors.";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      OkClient okClient0 = new OkClient(okHttpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setClient((Client) okClient0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      Converter converter0 = null;
      Method method0 = null;
      RestMethodInfo restMethodInfo0 = null;
      try {
        restMethodInfo0 = new RestMethodInfo(method0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(forkJoinPool0, forkJoinPool0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper2);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setConverter(jacksonConverter0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder5.setRequestInterceptor(requestInterceptor0);
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "b{w&}jae|_;F.^]>J";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      RestAdapter restAdapter1 = restAdapter_Builder0.build();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter1.setLogLevel(restAdapter_LogLevel0);
      String string1 = "+qR";
      Server server0 = new Server(string1);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(server0);
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setServer(string1);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      String string2 = "9;nBIZ*`4GR\"~9";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(string2);
      restAdapter1.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter1.setLogLevel(restAdapter_LogLevel1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      forkJoinPool0.shutdown();
      boolean boolean1 = forkJoinPool0.isShutdown();
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder4.setExecutors(forkJoinPool0, forkJoinPool0);
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter1.getLogLevel();
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.b{w&}jae|_;F.^]>J
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = null;
      restAdapter_Log0.log(string0);
      String string1 = "";
      restAdapter_Log0.log(string1);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      Client client0 = null;
      RestAdapter.Builder restAdapter_Builder4 = new RestAdapter.Builder();
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setClient(client_Provider0);
      Client.Provider client_Provider1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setClient(client_Provider1);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      OkClient okClient0 = new OkClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      String string1 = "EnH";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setConverter(jacksonConverter0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      OkClient okClient0 = new OkClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      // Undeclared exception!
      try { 
        restAdapter_Builder3.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      int int0 = 3;
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      BlockingQueue<Runnable> blockingQueue0 = null;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, blockingQueue0, threadPoolExecutor_DiscardPolicy0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "X%\\5Ifu>+";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setConverter(wireConverter0);
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setClient(client_Provider0);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      String string0 = "";
      String string1 = "\\7T+lXvb/tAiL]y";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "ho.y/VzW@@)eU";
      restAdapter_Log0.log(string0);
      String string1 = "42";
      restAdapter_Log0.log(string1);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string2 = " entries, got ";
      Server server0 = new Server(string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(string2);
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptor0);
      RestAdapter restAdapter2 = restAdapter_Builder2.build();
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        restAdapter2.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<ResponseDate> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "$C|O5";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      String string1 = "kJ\\4Lk`uk!bq)x(}X";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      OkClient okClient0 = new OkClient();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient((Client) okClient0);
      AndroidLog androidLog0 = new AndroidLog(string1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLog(androidLog0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      ApacheClient apacheClient0 = new ApacheClient();
      ErrorHandler errorHandler1 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      String string0 = "eOQ7X*\\g{";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string1 = "";
      restAdapter_Log0.log(string1);
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      String string2 = "#";
      restAdapter_Log0.log(string2);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ProtoConverter protoConverter0 = new ProtoConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setConverter(gsonConverter0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setRequestInterceptor(requestInterceptor0);
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      String string0 = null;
      Gson gson0 = new Gson();
      String string1 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setConverter(gsonConverter0);
      String string2 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string2);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Gson gson0 = new Gson();
      String string0 = "ddAczCELo";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      int int0 = 2112;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(scheduledThreadPoolExecutor0, forkJoinPool0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      // Undeclared exception!
      try { 
        restAdapter_Builder3.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      String string1 = "jT@fC4]UMIsjhr[H,^f";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient((Client) urlConnectionClient0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(wireConverter0);
      long long0 = 778L;
      System.setCurrentTimeMillis(long0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      Class<HttpResponseInterceptor> class0 = HttpResponseInterceptor.class;
      HttpResponseInterceptor httpResponseInterceptor0 = restAdapter0.create(class0);
  }
}
