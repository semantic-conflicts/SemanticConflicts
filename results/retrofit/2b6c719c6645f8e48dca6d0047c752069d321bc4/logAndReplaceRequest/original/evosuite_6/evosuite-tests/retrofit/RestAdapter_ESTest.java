/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 06:43:01 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.Bitmap;
import com.google.gson.Gson;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.wire.Wire;
import java.lang.reflect.Array;
import java.net.CookieHandler;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      int int0 = 2852;
      int int1 = 300;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "$VALUES";
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      String string1 = "E7;G";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(server0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(client_Provider0);
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider1);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Builder restAdapter_Builder6 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder4.setLog(restAdapter_Log0);
      restAdapter_Log0.log(string0);
      RestAdapter restAdapter0 = restAdapter_Builder7.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      UrlConnectionClient urlConnectionClient1 = new UrlConnectionClient();
      String string2 = "M|iaECK|b:vHK$'";
      String string3 = "";
      Vector<Header> vector0 = new Vector<Header>();
      Gson gson0 = new Gson();
      String string4 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string4);
      // Undeclared exception!
      try { 
        gsonConverter0.toBody(restAdapter_Builder2);
      } catch(IllegalArgumentException e) {
         //
         // class sun.misc.Launcher$AppClassLoader declares multiple JSON fields named ucp
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "ROOT";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      int int0 = 443;
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_DiscardPolicy0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(threadPoolExecutor0, threadPoolExecutor0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      ProtoConverter protoConverter0 = new ProtoConverter();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(protoConverter0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLogLevel(restAdapter_LogLevel0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setErrorHandler(errorHandler0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setConverter(gsonConverter0);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setProfiler(profiler0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      String string0 = null;
      Server server0 = new Server(string0, string0);
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder0.setServer(server0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string1 = "";
      InetAddress inetAddress0 = MockInetAddress.getByName(string1);
      int int0 = 4;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int0);
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address /127.0.0.1:4
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(client_Provider0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setExecutors(forkJoinPool0, forkJoinPool0);
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Gson gson0 = new Gson();
      String string0 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      String string1 = "^*QhEK(rIyK";
      AndroidLog androidLog0 = new AndroidLog(string1);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setConverter(gsonConverter0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setClient(client_Provider0);
      String string2 = ";";
      String string3 = "j{(5~";
      Server server0 = new Server(string2, string3);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder6.setRequestInterceptor(requestInterceptorTape0);
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder6.setClient((Client) apacheClient0);
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder6.setLogLevel(restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "_{}DV%%\"";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      restAdapter_Log0.log(string0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "h}q]QOVL";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(wireConverter0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setErrorHandler(errorHandler0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<Delayed> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "S-4|idta<+ ~F(%8|&9";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      Executor executor0 = null;
      int int0 = 4;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(executor0, scheduledThreadPoolExecutor0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      int int0 = 0;
      int int1 = 416;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, int0, timeUnit0, blockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(threadPoolExecutor0, scheduledThreadPoolExecutor0);
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      Profiler<Bitmap.CompressFormat> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client_Provider0);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkClient okClient0 = new OkClient(okHttpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      String string0 = "(?RW,_oRarISL$";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(client_Provider0);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setServer(string0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      String string1 = "http.request_sent";
      String string2 = "";
      String string3 = "VN.[Il^1W";
      List<Header> list0 = null;
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string2, string3, list0, typedOutput0);
      try { 
        urlConnectionClient0.execute(request0);
      } catch(MalformedURLException e) {
         //
         // no protocol: VN.[Il^1W
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "info";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      int int0 = 143;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptor0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "rj'{96TIUNa7gW";
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      Server server0 = new Server(string0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setConverter(gsonConverter0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }
}
