/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 17:02:50 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.wire.Wire;
import java.lang.reflect.Array;
import java.net.Proxy;
import java.util.HashSet;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.TypedByteArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(client_Provider0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setConverter(wireConverter0);
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(server0);
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      int int0 = 0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = null;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "#;e_hugYBs`@wz";
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      String string1 = "v9T.o";
      AndroidLog androidLog0 = new AndroidLog(string1);
      String string2 = "";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_LogLevel1.log();
      String string3 = "k@X";
      int int0 = 58;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      String string4 = "~_";
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string2);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      String string1 = "K";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string1);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Wire wire0 = new Wire(classArray0);
      WireConverter wireConverter0 = new WireConverter(wire0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(wireConverter0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = ": latter is not a subtype of former";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      int int0 = 2652;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, blockingQueue0, threadFactory1, threadPoolExecutor_DiscardPolicy0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(threadPoolExecutor0, threadPoolExecutor0);
      // Undeclared exception!
      try { 
        restAdapter_Builder4.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      String string0 = "aOq/P38m,_u^M";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(errorHandler0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLog(restAdapter_Log0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setLogLevel(restAdapter_LogLevel0);
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      String string0 = "+- Pq6A:](*k)PMY^HN";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setErrorHandler(errorHandler0);
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setProfiler(profiler0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setLog(restAdapter_Log0);
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder1.setConverter(wireConverter0);
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder5.setConverter(gsonConverter0);
      RestAdapter restAdapter0 = restAdapter_Builder7.build();
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder7.setRequestInterceptor(requestInterceptor0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder4.setClient((Client) urlConnectionClient0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      String string1 = "B6OGHNz)6~21V#(V";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      String string2 = "lTW|~;";
      Server server0 = new Server(string2, string2);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      EvoSuiteFile evoSuiteFile0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      HashSet<Module> hashSet0 = new HashSet<Module>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<Module>) hashSet0);
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper2);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setConverter(jacksonConverter0);
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string1);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.B6OGHNz)6~21V#(V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      long long0 = (-916L);
      System.setCurrentTimeMillis(long0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "`UIR|<vC'q} ";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      Profiler<MatchStrength> profiler0 = (Profiler<MatchStrength>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      androidLog0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      androidLog0.log(string0);
      int int0 = (-2289);
      int int1 = 1450;
      long long0 = 1L;
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client_Provider0);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      String string0 = "io/gSph";
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(string0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      Server server0 = new Server(string0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      Profiler<Object> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ProtoConverter protoConverter0 = new ProtoConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptorTape0);
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      String string0 = "'53x;G#.o2<k9jP8Cr";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      Class<Header> class0 = Header.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "z&k";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      Server server0 = new Server(string0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      String string0 = "com.fasterxml.jackson.databind.type.MapType";
      String string1 = "I";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(string0);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 2009;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      AllowAllHostnameVerifier allowAllHostnameVerifier0 = new AllowAllHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(allowAllHostnameVerifier0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient3 = okHttpClient0.setProxy(proxy0);
      OkClient okClient0 = new OkClient(okHttpClient1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) okClient0);
      RestAdapter restAdapter0 = restAdapter_Builder3.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      Server server1 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder1.setServer(server1);
      RestAdapter restAdapter1 = restAdapter_Builder0.build();
      boolean boolean0 = restAdapter_LogLevel0.log();
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder0.setProfiler(profiler0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(client_Provider0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      int int0 = 5;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        restAdapter_Builder4.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      int int0 = 138;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedTransferQueue0);
      Executor executor0 = null;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(threadPoolExecutor0, executor0);
      String string0 = "io/gSph";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setServer(string0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
  }
}
