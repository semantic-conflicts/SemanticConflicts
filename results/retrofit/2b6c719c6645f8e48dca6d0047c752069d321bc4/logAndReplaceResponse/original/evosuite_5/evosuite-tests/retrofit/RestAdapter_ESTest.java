/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 17:31:30 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.os.ResultReceiver;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.google.gson.Gson;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkHttpClient;
import java.net.ResponseCache;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.impl.client.DefaultHttpClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptorTape0);
      ProtoConverter protoConverter0 = new ProtoConverter();
      String string0 = "android.widget.TextSwitcher";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLog(androidLog0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setConverter(protoConverter0);
      String string1 = "U!:=}e ";
      Server server0 = new Server(string1, string1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setProfiler(profiler0);
      RestAdapter restAdapter0 = restAdapter_Builder6.build();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      int int0 = 1632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      WireConverter wireConverter0 = new WireConverter();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setConverter(wireConverter0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        restAdapter_Builder5.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "q8d_#'phDdh\"~+BJ";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      String string1 = "resource not found: /META-INF/services/org.xmlpull.v1.XmlPullParserFactory make sure that parser implementing XmlPull API is available";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string1);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(errorHandler0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      Profiler<Object> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(jacksonConverter0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      int int0 = (-455);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      Executor executor0 = null;
      int int0 = 4787;
      long long0 = 2609L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedTransferQueue0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(executor0, threadPoolExecutor0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = ">b";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptorTape0);
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setServer(string0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      Profiler<Integer> profiler1 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder2.setProfiler(profiler1);
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder5.setLogLevel(restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "";
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      String string1 = "|Y'4\"-t[";
      restAdapter_Log0.log(string1);
      long long0 = 2766L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ProtoConverter protoConverter0 = new ProtoConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      // Undeclared exception!
      try { 
        restAdapter_Builder2.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "*/";
      restAdapter_Log0.log(string0);
      String string1 = "2UUFZ6!n*yJ%`s";
      restAdapter_Log0.log(string1);
      String string2 = "%nB";
      restAdapter_Log0.log(string2);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client_Provider0);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      AndroidLog androidLog0 = new AndroidLog(string0);
      androidLog0.log(string0);
      androidLog0.log(string0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLog(androidLog0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      String string1 = "xv~x[";
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "startTag() must be called before attribute()";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "L9}0<}#";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setProfiler(profiler0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0);
      Profiler<Header> profiler1 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setProfiler(profiler1);
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      String string1 = "Converter may not be null.";
      requestInterceptorTape0.addPathParam(string1, string1);
      String string2 = "Y\"El!C].s";
      requestInterceptorTape0.addHeader(server0.DEFAULT_NAME, string2);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter restAdapter1 = restAdapter_Builder0.build();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "0v3>[+|G5i9[l'0AP-R";
      String string1 = null;
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      Gson gson0 = new Gson();
      String string2 = "]2D-<&aPmHMcQ@";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string2);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setConverter(gsonConverter0);
      AndroidLog androidLog0 = new AndroidLog(string1);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setLog(androidLog0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      int int0 = 2401;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      String string0 = "best-match";
      String string1 = "retrofit.RestAdapter$Builder$1";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(server0);
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = ".:uC's";
      String string1 = "(%X<H8%(,UDB%.+-gL";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      String string2 = "";
      AndroidLog androidLog0 = new AndroidLog(string2);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(server0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setErrorHandler(errorHandler0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setRequestInterceptor(requestInterceptor0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setExecutors(forkJoinPool0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }
}
