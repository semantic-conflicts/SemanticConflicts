/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:10:55 GMT 2020
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Proxy;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLStreamHandlerFactory;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Delayed;
import java.util.function.Predicate;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import org.atmosphere.client.TrackMessageSizeInterceptor;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.cpr.Action;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereFrameworkListener;
import org.atmosphere.cpr.AtmosphereFrameworkListenerAdapter;
import org.atmosphere.cpr.AtmosphereInterceptor;
import org.atmosphere.cpr.AtmosphereInterceptorWriter;
import org.atmosphere.cpr.AtmosphereObjectFactory;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceFactory;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceListenerAdapter;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.AtmosphereResponse;
import org.atmosphere.cpr.AtmosphereServlet;
import org.atmosphere.cpr.Broadcaster;
import org.atmosphere.cpr.BroadcasterFactory;
import org.atmosphere.cpr.BroadcasterListenerAdapter;
import org.atmosphere.cpr.DefaultAtmosphereResourceFactory;
import org.atmosphere.cpr.DefaultBroadcaster;
import org.atmosphere.cpr.MetaBroadcaster;
import org.atmosphere.cpr.MeteorServlet;
import org.atmosphere.handler.ReflectorServletProcessor;
import org.atmosphere.interceptor.HeartbeatInterceptor;
import org.atmosphere.util.DefaultEndpointMapper;
import org.atmosphere.util.DefaultUUIDProvider;
import org.atmosphere.util.EndpointMapper;
import org.atmosphere.util.UUIDProvider;
import org.atmosphere.websocket.WebSocketHandler;
import org.atmosphere.websocket.WebSocketHandlerAdapter;
import org.atmosphere.websocket.WebSocketProcessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile1);
      AtmosphereFramework atmosphereFramework1 = new AtmosphereFramework();
      String string0 = ",BFji6D2Kn-Y}7=";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setHandlersPath(string0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.init();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      atmosphereConfig0.destroy();
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework2);
      String string1 = atmosphereConfig1.getWebServerName();
      atmosphereConfig1.initComplete();
      String string2 = atmosphereConfig1.getInitParameter(string1, string1);
      boolean boolean1 = false;
      LinkedList<AtmosphereConfig.StartupHook> linkedList0 = new LinkedList<AtmosphereConfig.StartupHook>();
      atmosphereConfig1.startUpHook = (List<AtmosphereConfig.StartupHook>) linkedList0;
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = null;
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = linkedList0.add(atmosphereConfig_StartupHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook1 = linkedList0.pollLast();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = (DefaultAtmosphereResourceFactory)atmosphereConfig1.resourcesFactory();
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig_StartupHook1.started(atmosphereFramework3);
      atmosphereConfig3.initComplete();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      int int0 = 0;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      MeteorServlet meteorServlet0 = new MeteorServlet();
      String string0 = meteorServlet0.getServletInfo();
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.framework();
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "l)HW[";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.resetStates();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.getAtmosphereConfig();
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      AtmosphereFramework atmosphereFramework2 = atmosphereConfig0.framework();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework2.config;
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.startupHook(atmosphereConfig_StartupHook0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig0.populate(atmosphereConfig1);
      atmosphereConfig1.setThrowExceptionOnCloned(boolean0);
      String string2 = "";
      String string3 = atmosphereConfig2.getInitParameter(string2);
      atmosphereConfig3.setSessionTimeoutRemovalAllowed(boolean0);
      // Undeclared exception!
      try { 
        atmosphereConfig2.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      Class<Broadcaster> class0 = Broadcaster.class;
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework0.interceptors;
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandlerAdapter0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = webSocketProcessor_WebSocketHandlerProxy0.path(atmosphereFramework0.MAPPING_REGEX);
      MeteorServlet meteorServlet0 = new MeteorServlet();
      ReflectorServletProcessor reflectorServletProcessor0 = new ReflectorServletProcessor(meteorServlet0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifyDestroyed(atmosphereFramework0.MAPPING_REGEX);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.config;
      boolean boolean1 = true;
      atmosphereConfig0.setSupportSession(boolean1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      String string1 = atmosphereConfig1.getInitParameter(string0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook1 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook2 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig2.startupHook(atmosphereConfig_StartupHook2);
      boolean boolean2 = atmosphereConfig4.isSessionTimeoutRemovalAllowed();
      atmosphereConfig4.destroy();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifySuspended(string0);
      String string1 = "^bWAxDS>c[";
      String string2 = "T3WEU}Tu1=";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.setBroadcasterCacheClassName(string2);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      String string3 = "";
      Class<Broadcaster> class0 = Broadcaster.class;
      WebSocketHandler webSocketHandler0 = null;
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework0.interceptors();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandler0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = webSocketProcessor_WebSocketHandlerProxy0.path(atmosphereFramework1.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setDefaultSerializerClassName(string3);
      boolean boolean2 = true;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.annotationScanned(boolean2);
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework0.setAtmosphereDotXmlPath(atmosphereFramework5.META_SERVICE);
      AtmosphereFramework atmosphereFramework7 = atmosphereFramework3.removeAllAtmosphereHandler();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework7.getAtmosphereConfig();
      atmosphereConfig0.setThrowExceptionOnCloned(boolean2);
      atmosphereFramework7.webSocketEnabled = boolean0;
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      Map<String, Object> map0 = atmosphereConfig0.properties();
      String string4 = "PK=-XxY.W$d";
      int int0 = (-1);
      int int1 = atmosphereConfig0.getInitParameter(string4, int0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean1, boolean0);
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.wrap(atmosphereRequest0);
      boolean boolean2 = true;
      AtmosphereRequest atmosphereRequest2 = AtmosphereRequest.cloneRequest(atmosphereRequest1, boolean2, boolean2, boolean0, boolean2);
      String string0 = "";
      AtmosphereRequest atmosphereRequest3 = atmosphereRequest2.requestURI(string0);
      AtmosphereRequest atmosphereRequest4 = atmosphereRequest3.method(string0);
      String string1 = ":t'.s,P}-Z`V=b,a{-";
      AtmosphereRequest atmosphereRequest5 = atmosphereRequest4.queryString(string1);
      AtmosphereRequest atmosphereRequest6 = atmosphereRequest5.header(atmosphereFramework0.DEFAULT_LIB_PATH, string0);
      AtmosphereResourceImpl atmosphereResourceImpl0 = new AtmosphereResourceImpl();
      AtmosphereResourceImpl atmosphereResourceImpl1 = atmosphereResourceImpl0.disableSuspendEvent(boolean1);
      AtmosphereResponse atmosphereResponse0 = atmosphereResourceImpl1.getResponse(boolean0);
      AtmosphereInterceptorWriter atmosphereInterceptorWriter0 = new AtmosphereInterceptorWriter();
      String string2 = "x/@IA%9B&MipCBwK\"Q";
      // Undeclared exception!
      try { 
        atmosphereInterceptorWriter0.write(atmosphereResponse0, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereInterceptorWriter", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      atmosphereFramework0.initGlobalInterceptors();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      DefaultEndpointMapper<String> defaultEndpointMapper0 = new DefaultEndpointMapper<String>();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.endPointMapper((EndpointMapper) defaultEndpointMapper0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.newAtmosphereConfig();
      String string0 = atmosphereConfig0.getInitParameter(atmosphereFramework2.META_SERVICE, atmosphereFramework2.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      String string1 = atmosphereConfig0.getInitParameter(atmosphereFramework2.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      String string2 = atmosphereConfig0.getWebServerName();
      atmosphereFramework0.isThrowExceptionOnClonedRequestSpecified = boolean0;
      String string3 = "FDo81 AA1PAPOvWE";
      boolean boolean2 = atmosphereConfig0.getInitParameter(string3, boolean0);
      int int0 = 43;
      Proxy proxy0 = (Proxy)atmosphereFramework0.getServletContext();
      int int1 = atmosphereConfig0.getInitParameter(atmosphereFramework2.DEFAULT_ATMOSPHERE_CONFIG_PATH, int0);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework2);
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig1.resourcesFactory();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig2.handlers();
      atmosphereConfig1.initComplete();
      ArrayDeque<AtmosphereConfig.ShutdownHook> arrayDeque0 = new ArrayDeque<AtmosphereConfig.ShutdownHook>();
      LinkedList<AtmosphereConfig.ShutdownHook> linkedList0 = new LinkedList<AtmosphereConfig.ShutdownHook>(arrayDeque0);
      atmosphereConfig2.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) linkedList0;
      Map<String, Object> map1 = atmosphereConfig0.properties();
      boolean boolean3 = atmosphereConfig2.isSupportSession();
      atmosphereConfig2.setThrowExceptionOnCloned(boolean3);
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      TrackMessageSizeInterceptor trackMessageSizeInterceptor0 = new TrackMessageSizeInterceptor();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.interceptor(trackMessageSizeInterceptor0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.config;
      String string0 = atmosphereConfig0.getInitParameter(atmosphereFramework1.DEFAULT_LIB_PATH, atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.framework();
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationScanned(boolean1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.newAtmosphereConfig();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      Class<Delayed> class0 = Delayed.class;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addAnnotationPackage(class0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifyDestroyed(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.webSocketEnabled(boolean0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.removeAtmosphereHandler(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setUseStreamForFlushingComments(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterType(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      DefaultEndpointMapper<Integer> defaultEndpointMapper0 = new DefaultEndpointMapper<Integer>();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.endPointMapper((EndpointMapper) defaultEndpointMapper0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.resetStates();
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.queryString(atmosphereFramework4.MAPPING_REGEX);
      HashMap<String, String> hashMap0 = atmosphereFramework1.initParams;
      AtmosphereRequest atmosphereRequest2 = atmosphereRequest1.headers(hashMap0);
      AtmosphereRequest atmosphereRequest3 = atmosphereRequest2.method(atmosphereFramework4.DEFAULT_HANDLER_PATH);
      String string0 = null;
      AtmosphereRequest atmosphereRequest4 = atmosphereRequest3.contentType(string0);
      AtmosphereResource atmosphereResource0 = atmosphereRequest4.resource();
      String string1 = atmosphereRequest4.getRemoteAddr();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = defaultEndpointMapper0.map(atmosphereRequest4, (Map<String, Integer>) hashMap1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework4.sharedThreadPools(boolean1);
      String string2 = atmosphereConfig0.getInitParameter(atmosphereFramework1.META_SERVICE);
      boolean boolean2 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean2);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0, boolean1);
      String string0 = atmosphereServlet0.getServletInfo();
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.resetStates();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.getAtmosphereConfig();
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereFramework atmosphereFramework2 = atmosphereConfig0.framework();
      AtmosphereResourceFactory atmosphereResourceFactory1 = atmosphereConfig0.resourcesFactory();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework2.config;
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.startupHook(atmosphereConfig_StartupHook0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig0.populate(atmosphereConfig1);
      String string1 = "";
      String string2 = atmosphereConfig2.getInitParameter(string1);
      boolean boolean2 = true;
      atmosphereConfig3.setSessionTimeoutRemovalAllowed(boolean2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = null;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.frameworkListener(atmosphereFrameworkListenerAdapter0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setWebsocketProcessorClassName(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      String string0 = null;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notifySuspended(string0);
      String string1 = "";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.excludeInterceptor(string1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean0 = true;
      atmosphereConfig1.setThrowExceptionOnCloned(boolean0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.removeAllAtmosphereHandler();
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      atmosphereFramework1.configureBroadcaster();
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.wrap(atmosphereRequest0);
      boolean boolean1 = false;
      Map<String, String> map0 = atmosphereFramework1.configureQueryStringAsRequest(atmosphereRequest1);
      ServletContext servletContext0 = atmosphereRequest0.getServletContext();
      boolean boolean2 = true;
      boolean boolean3 = true;
      AtmosphereRequest atmosphereRequest2 = AtmosphereRequest.cloneRequest(atmosphereRequest1, boolean1, boolean2, boolean3, boolean1);
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.configureRequestResponse(atmosphereRequest2, atmosphereResponse0);
      boolean boolean4 = true;
      atmosphereFramework2.sessionSupport(boolean4);
      String string0 = "/8]g";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setWebSocketProtocolClassName(string0);
      AtmosphereObjectFactory<DefaultBroadcaster> atmosphereObjectFactory0 = (AtmosphereObjectFactory<DefaultBroadcaster>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      atmosphereFramework3.objectFactory(atmosphereObjectFactory0);
      Action.TYPE action_TYPE0 = Action.TYPE.CONTINUE;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.notify(action_TYPE0, atmosphereRequest2, atmosphereResponse0);
      atmosphereFramework4.onPreDestroy();
      String string1 = "";
      atmosphereResponse0.setCharacterEncoding(string1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      boolean boolean5 = true;
      atmosphereConfig0.setSupportSession(boolean5);
      atmosphereConfig0.setSupportSession(boolean2);
      AtmosphereFramework atmosphereFramework5 = atmosphereConfig0.framework();
      boolean boolean6 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      Map<String, Object> map1 = atmosphereConfig0.properties();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      String string0 = "Committed error code {} {}";
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      LinkedList<AtmosphereConfig.ShutdownHook> linkedList0 = new LinkedList<AtmosphereConfig.ShutdownHook>();
      String string1 = atmosphereConfig0.getInitParameter(atmosphereFramework0.META_SERVICE, atmosphereFramework0.MAPPING_REGEX);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      linkedList0.push(atmosphereConfig_ShutdownHook0);
      atmosphereConfig0.shutdownHooks = (List<AtmosphereConfig.ShutdownHook>) linkedList0;
      String string2 = "[RG!81vC";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationProcessorClassName(string2);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      boolean boolean1 = atmosphereConfig0.getInitParameter(string0, boolean0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.sharedThreadPools(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setUseBlockingImplementation(boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notifySuspended(string0);
      String string1 = "";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setBroadcasterCacheClassName(string1);
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.setUseBlockingImplementation(boolean1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      DefaultUUIDProvider defaultUUIDProvider0 = new DefaultUUIDProvider();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.uuidProvider((UUIDProvider) defaultUUIDProvider0);
      String string0 = "{Uz70GAok^*l";
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework1.interceptors;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(string0, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, (List<AtmosphereInterceptor>) linkedList0);
      Action.TYPE action_TYPE0 = Action.TYPE.CONTINUE;
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.wrap(atmosphereRequest0);
      boolean boolean0 = true;
      AtmosphereRequest atmosphereRequest2 = AtmosphereRequest.cloneRequest(atmosphereRequest1, boolean0, boolean0, boolean0, boolean0);
      AtmosphereRequest atmosphereRequest3 = atmosphereRequest2.method(string0);
      AtmosphereResponse atmosphereResponse0 = null;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notify(action_TYPE0, atmosphereRequest3, atmosphereResponse0);
      AtmosphereFrameworkListener atmosphereFrameworkListener0 = null;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.frameworkListener(atmosphereFrameworkListener0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.config;
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "2b[/Tt/Vxj,O;J&2+X";
      String string1 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addInitParameter(string0, string1);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.setAtmosphereDotXmlPath(string0);
      boolean boolean0 = false;
      atmosphereFramework0.annotationFound = boolean0;
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      atmosphereConfig0.destroy();
      AtmosphereConfig atmosphereConfig1 = null;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean0 = false;
      atmosphereConfig1.setThrowExceptionOnCloned(boolean0);
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.shutdownHook(atmosphereConfig_ShutdownHook0);
      // Undeclared exception!
      try { 
        atmosphereConfig1.getBroadcasterFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = null;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setBroadcasterCacheClassName(string0);
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework0.interceptors;
      HeartbeatInterceptor heartbeatInterceptor0 = new HeartbeatInterceptor();
      int int0 = 249;
      HeartbeatInterceptor heartbeatInterceptor1 = heartbeatInterceptor0.clientHeartbeatFrequencyInSeconds(int0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-55);
      byteArray0[0] = byte0;
      HeartbeatInterceptor heartbeatInterceptor2 = heartbeatInterceptor1.paddingText(byteArray0);
      String string1 = "B,6T`Uy7";
      int int1 = (-1);
      HeartbeatInterceptor heartbeatInterceptor3 = heartbeatInterceptor2.clientHeartbeatFrequencyInSeconds(int1);
      WebSocketHandler webSocketHandler0 = null;
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.webSocketEnabled(boolean0);
      HeartbeatInterceptor heartbeatInterceptor4 = heartbeatInterceptor2.heartbeatFrequencyInSeconds(int0);
      String string2 = "U,K<>h8`+?),";
      String string3 = "";
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.getAtmosphereConfig();
      boolean boolean1 = atmosphereConfig0.isThrowExceptionOnCloned();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      boolean boolean1 = false;
      boolean boolean2 = false;
      atmosphereFramework0.webSocketProtocolInitialized = boolean2;
      atmosphereFramework0.setUseServlet30(boolean1);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.sharedThreadPools(boolean0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework2);
      String string0 = "";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setDefaultSerializerClassName(string0);
      String string1 = "JPJ{?zwI|Z?%";
      String string2 = atmosphereConfig0.getInitParameter(string1);
      boolean boolean3 = atmosphereConfig0.isThrowExceptionOnCloned();
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.addBroadcasterListener(broadcasterListenerAdapter0);
      AtmosphereResourceFactory atmosphereResourceFactory1 = atmosphereConfig0.resourcesFactory();
      atmosphereFramework2.setUseServlet30(boolean3);
      int int0 = (-1);
      int int1 = atmosphereConfig0.getInitParameter(atmosphereFramework2.DEFAULT_HANDLER_PATH, int0);
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      atmosphereConfig0.initComplete();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      AtmosphereFramework atmosphereFramework1 = new AtmosphereFramework();
      String string0 = ",BFji6D2Kn-Y}7=";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setHandlersPath(string0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.init();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      atmosphereConfig0.destroy();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/server/study-execution/new-nimrod/mergedataset/atmosphere/ffc0c6e274094c6423e29d1c45bab1593b8fac7d/original/left/atmosphere-runtime-2.3.0-SNAPSHOT-jar-with-dependencies.jar");
      boolean boolean1 = true;
      Proxy proxy0 = (Proxy)atmosphereConfig0.getServletContext();
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean0, boolean1);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework0);
      atmosphereConfig1.initComplete();
      String string1 = atmosphereConfig1.getInitParameter(atmosphereFramework2.DEFAULT_HANDLER_PATH, atmosphereFramework2.DEFAULT_HANDLER_PATH);
      boolean boolean3 = false;
      LinkedList<AtmosphereConfig.StartupHook> linkedList0 = new LinkedList<AtmosphereConfig.StartupHook>();
      atmosphereConfig1.startUpHook = (List<AtmosphereConfig.StartupHook>) linkedList0;
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = null;
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = linkedList0.add(atmosphereConfig_StartupHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook1 = linkedList0.pollLast();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean3);
      // Undeclared exception!
      try { 
        atmosphereConfig1.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile1);
      AtmosphereFramework atmosphereFramework1 = new AtmosphereFramework();
      String string0 = ",BFji6D2Kn-Y}7=";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setHandlersPath(string0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.init();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      String string1 = "";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.notifyDestroyed(string1);
      atmosphereConfig0.destroy();
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework2);
      String string2 = atmosphereConfig1.getWebServerName();
      atmosphereConfig1.initComplete();
      String string3 = atmosphereConfig1.getInitParameter(string2, string2);
      boolean boolean1 = false;
      LinkedList<AtmosphereConfig.StartupHook> linkedList0 = new LinkedList<AtmosphereConfig.StartupHook>();
      atmosphereConfig1.startUpHook = (List<AtmosphereConfig.StartupHook>) linkedList0;
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = null;
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = linkedList0.add(atmosphereConfig_StartupHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook1 = linkedList0.pollLast();
      atmosphereConfig2.initComplete();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = (DefaultAtmosphereResourceFactory)atmosphereConfig1.resourcesFactory();
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig2.destroy();
      atmosphereConfig_StartupHook1.started(atmosphereFramework3);
  }
}
