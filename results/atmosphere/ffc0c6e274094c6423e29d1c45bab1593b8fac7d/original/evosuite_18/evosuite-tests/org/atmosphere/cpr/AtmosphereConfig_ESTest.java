/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:00:51 GMT 2020
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Proxy;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import javax.servlet.Filter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import org.atmosphere.cache.BroadcasterCacheInspector;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.cpr.AsyncSupportListenerAdapter;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereFrameworkListenerAdapter;
import org.atmosphere.cpr.AtmosphereHandler;
import org.atmosphere.cpr.AtmosphereInterceptor;
import org.atmosphere.cpr.AtmosphereObjectFactory;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceFactory;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceListenerAdapter;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.AtmosphereResponse;
import org.atmosphere.cpr.AtmosphereServlet;
import org.atmosphere.cpr.BroadcastFilter;
import org.atmosphere.cpr.BroadcastFilterAdapter;
import org.atmosphere.cpr.Broadcaster;
import org.atmosphere.cpr.BroadcasterConfig;
import org.atmosphere.cpr.BroadcasterFactory;
import org.atmosphere.cpr.BroadcasterListenerAdapter;
import org.atmosphere.cpr.DefaultAtmosphereResourceFactory;
import org.atmosphere.cpr.DefaultBroadcaster;
import org.atmosphere.cpr.DefaultBroadcasterFactory;
import org.atmosphere.cpr.MetaBroadcaster;
import org.atmosphere.cpr.MeteorServlet;
import org.atmosphere.lifecycle.LifecycleHandler;
import org.atmosphere.util.UUIDProvider;
import org.atmosphere.websocket.WebSocket;
import org.atmosphere.websocket.WebSocketHandler;
import org.atmosphere.websocket.WebSocketHandlerAdapter;
import org.atmosphere.websocket.WebSocketProcessor;
import org.atmosphere.websocket.WebSocketStreamingHandlerAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean1 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifySuspended(atmosphereFramework0.META_SERVICE);
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addBroadcasterListener(broadcasterListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      BroadcasterListenerAdapter broadcasterListenerAdapter1 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.addBroadcasterListener(broadcasterListenerAdapter1);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Supplier<AtmosphereHandlerConfig> supplier0 = null;
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      LifecycleHandler lifecycleHandler0 = new LifecycleHandler();
      LifecycleHandler lifecycleHandler1 = lifecycleHandler0.offIfEmpty(defaultBroadcaster0);
      DefaultBroadcaster defaultBroadcaster1 = defaultBroadcaster0.lifecycleHandler(lifecycleHandler1);
      DefaultBroadcaster defaultBroadcaster2 = new DefaultBroadcaster();
      Supplier<DefaultBroadcaster> supplier1 = (Supplier<DefaultBroadcaster>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(supplier1).get();
      CompletableFuture<DefaultBroadcaster> completableFuture0 = CompletableFuture.supplyAsync(supplier1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      CompletableFuture<AtmosphereConfig.ShutdownHook> completableFuture1 = CompletableFuture.completedFuture(atmosphereConfig_ShutdownHook0);
      BiFunction<Object, Object, DefaultBroadcaster> biFunction0 = (BiFunction<Object, Object, DefaultBroadcaster>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(biFunction0).apply(any() , any());
      CompletableFuture<DefaultBroadcaster> completableFuture2 = completableFuture0.thenCombine((CompletionStage<? extends AtmosphereConfig.ShutdownHook>) completableFuture1, (BiFunction<? super DefaultBroadcaster, ? super AtmosphereConfig.ShutdownHook, ? extends DefaultBroadcaster>) biFunction0);
      AtmosphereObjectFactory atmosphereObjectFactory0 = atmosphereFramework1.lookupDefaultObjectFactoryType();
      BiFunction<DefaultBroadcaster, Object, DefaultBroadcaster> biFunction1 = null;
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.frameworkListener(atmosphereFrameworkListenerAdapter0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.init();
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addWebSocketHandler(atmosphereFramework0.META_SERVICE, (WebSocketHandler) webSocketHandlerAdapter0, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      atmosphereConfig0.destroy();
      boolean boolean0 = true;
      atmosphereConfig0.setSupportSession(boolean0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      Collection<Broadcaster> collection0 = defaultBroadcasterFactory0.lookupAll();
      defaultBroadcasterFactory0.clazz = class0;
      AtmosphereConfig atmosphereConfig1 = defaultBroadcasterFactory0.config;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtmosphereResourceImpl atmosphereResourceImpl0 = new AtmosphereResourceImpl();
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereResource atmosphereResource0 = defaultAtmosphereResourceFactory0.create(atmosphereConfig0, atmosphereResourceImpl0.METEOR);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcastFilterAdapter broadcastFilterAdapter0 = new BroadcastFilterAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterFilters((BroadcastFilter) broadcastFilterAdapter0);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.allowAllClassesScan(boolean0);
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      LinkedList<AtmosphereInterceptor> linkedList0 = new LinkedList<AtmosphereInterceptor>();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandlerAdapter0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketProcessor_WebSocketHandlerProxy0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addWebSocketHandler(atmosphereFramework1.META_SERVICE, (WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy1, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER, (List<AtmosphereInterceptor>) linkedList0);
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.destroyable(boolean0);
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      AtmosphereRequest atmosphereRequest2 = atmosphereRequest1.contentType(string0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      WebSocket webSocket0 = mock(WebSocket.class, new ViolatedAssumptionAnswer());
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance(atmosphereConfig0, atmosphereRequest1, webSocket0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.annotationScanned(boolean0);
      AtmosphereResponse atmosphereResponse1 = AtmosphereResponse.wrap(atmosphereResponse0);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.configureRequestResponse(atmosphereRequest2, atmosphereResponse1);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      String string1 = "Using BroadcasterFactory: {}";
      long long0 = 298L;
      atmosphereResponse0.addDateHeader(string1, long0);
      AtmosphereResponse atmosphereResponse2 = AtmosphereResponse.wrap(atmosphereResponse1);
      // Undeclared exception!
      try { 
        atmosphereConfig1.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0, boolean0);
      String string0 = "64,mn@-Nc>gs?M,/z";
      ArrayDeque<Filter> arrayDeque0 = new ArrayDeque<Filter>();
      MeteorServlet meteorServlet1 = new MeteorServlet(meteorServlet0, string0, arrayDeque0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet1.framework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      String string0 = null;
      WebSocketStreamingHandlerAdapter webSocketStreamingHandlerAdapter0 = new WebSocketStreamingHandlerAdapter();
      // Undeclared exception!
      try { 
        atmosphereFramework0.addWebSocketHandler(string0, (WebSocketHandler) webSocketStreamingHandlerAdapter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.init();
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Class<Broadcaster> class0 = Broadcaster.class;
      Supplier<Object> supplier0 = null;
      // Undeclared exception!
      try { 
        CompletableFuture.supplyAsync(supplier0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(atmosphereFramework0.META_SERVICE, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, (Broadcaster) defaultBroadcaster0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setDefaultSerializerClassName(atmosphereFramework0.META_SERVICE);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.allowAllClassesScan(boolean0);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework1);
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      String string1 = ".A";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationProcessorClassName(string1);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.setUseBlockingImplementation(boolean0);
      MeteorServlet meteorServlet0 = new MeteorServlet();
      atmosphereFramework2.servletConfig = (ServletConfig) meteorServlet0;
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      atmosphereFramework2.isThrowExceptionOnClonedRequestSpecified = boolean0;
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.pathInfo(atmosphereFramework2.META_SERVICE);
      AtmosphereRequest atmosphereRequest2 = atmosphereRequest1.destroyable(boolean0);
      String string2 = null;
      AtmosphereRequest atmosphereRequest3 = atmosphereRequest2.contentType(string2);
      byte[] byteArray0 = new byte[0];
      AtmosphereRequest atmosphereRequest4 = atmosphereRequest3.body(byteArray0);
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance();
      int int0 = 0;
      AtmosphereResponse atmosphereResponse1 = atmosphereResponse0.write(byteArray0, int0, int0);
      atmosphereResponse1.flushBuffer();
      // Undeclared exception!
      try { 
        meteorServlet0.doTrace(atmosphereRequest4, atmosphereResponse1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcastFilterAdapter broadcastFilterAdapter0 = new BroadcastFilterAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterFilters((BroadcastFilter) broadcastFilterAdapter0);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.allowAllClassesScan(boolean0);
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      LinkedList<AtmosphereInterceptor> linkedList0 = new LinkedList<AtmosphereInterceptor>();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandlerAdapter0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketProcessor_WebSocketHandlerProxy0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addWebSocketHandler(atmosphereFramework1.META_SERVICE, (WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy1, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER, (List<AtmosphereInterceptor>) linkedList0);
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.destroyable(boolean0);
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      AtmosphereRequest atmosphereRequest2 = atmosphereRequest1.contentType(string0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      WebSocket webSocket0 = mock(WebSocket.class, new ViolatedAssumptionAnswer());
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance(atmosphereConfig0, atmosphereRequest1, webSocket0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.annotationScanned(boolean0);
      AtmosphereResponse atmosphereResponse1 = AtmosphereResponse.wrap(atmosphereResponse0);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.configureRequestResponse(atmosphereRequest2, atmosphereResponse1);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.startupHook(atmosphereConfig_StartupHook0);
      String string1 = "Using BroadcasterFactory: {}";
      long long0 = 298L;
      atmosphereResponse0.addDateHeader(string1, long0);
      AtmosphereResponse atmosphereResponse2 = AtmosphereResponse.wrap(atmosphereResponse1);
      // Undeclared exception!
      try { 
        atmosphereConfig1.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      LinkedList<AtmosphereInterceptor> linkedList0 = new LinkedList<AtmosphereInterceptor>();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandlerAdapter0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketProcessor_WebSocketHandlerProxy0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addWebSocketHandler(atmosphereFramework0.DEFAULT_HANDLER_PATH, (WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy1);
      AsyncSupportListenerAdapter asyncSupportListenerAdapter0 = new AsyncSupportListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.asyncSupportListener(asyncSupportListenerAdapter0);
      BroadcasterConfig.FilterManipulator broadcasterConfig_FilterManipulator0 = mock(BroadcasterConfig.FilterManipulator.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.filterManipulator(broadcasterConfig_FilterManipulator0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereFramework atmosphereFramework5 = atmosphereConfig0.framework();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "2%[:\"BtSrM,?OEu";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setAtmosphereDotXmlPath(string0);
      String string1 = "68j+~h`5LvS )?Cl";
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(string1, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, (Broadcaster) defaultBroadcaster0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setBroadcasterFactory(broadcasterFactory0);
      String string2 = "&m:@e~H_iG";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setLibPath(string2);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.newAtmosphereConfig();
      atmosphereConfig1.initComplete();
      int int0 = atmosphereConfig0.getInitParameter(atmosphereFramework1.DEFAULT_ATMOSPHERE_CONFIG_PATH, defaultBroadcaster0.POLLING_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      String string0 = "&js.^}9G}k55PlNP~";
      boolean boolean0 = false;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string0, boolean0);
      String string1 = "9\\";
      String string2 = atmosphereConfig0.getInitParameter(string1);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0, boolean1);
      String string0 = "";
      Collection<Filter> collection0 = null;
      MeteorServlet meteorServlet0 = new MeteorServlet(atmosphereServlet0, string0, collection0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.newAtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      atmosphereConfig0.destroy();
      boolean boolean2 = atmosphereConfig0.isThrowExceptionOnCloned();
      String string1 = "";
      int int0 = 115;
      int int1 = atmosphereConfig0.getInitParameter(string1, int0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = ")pJj2[G`Xp?;2C+&";
      BroadcasterFactory broadcasterFactory0 = null;
      atmosphereFramework0.broadcasterFactory = broadcasterFactory0;
      AtmosphereHandler atmosphereHandler0 = AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addAtmosphereHandler(string0, atmosphereHandler0);
      String string1 = "P&Yr;(O-#p";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setWebsocketProcessorClassName(string1);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setUseStreamForFlushingComments(boolean0);
      String string2 = "lY!}}L,eZUih:>8";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setDefaultSerializerClassName(string2);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.config;
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      boolean boolean1 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      List<AtmosphereConfig.ShutdownHook> list0 = atmosphereConfig0.shutdownHooks;
      atmosphereConfig0.shutdownHooks = list0;
      atmosphereConfig0.destroy();
      String string0 = "";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getBroadcasterFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = null;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setHandlersPath(string0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.newAtmosphereConfig();
      atmosphereConfig0.destroy();
      atmosphereConfig0.destroy();
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      atmosphereConfig0.destroy();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.frameworkListener(atmosphereFrameworkListenerAdapter0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.init();
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addWebSocketHandler(atmosphereFramework0.META_SERVICE, (WebSocketHandler) webSocketHandlerAdapter0, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      atmosphereConfig0.destroy();
      boolean boolean0 = true;
      atmosphereConfig0.setSupportSession(boolean0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      defaultBroadcasterFactory0.clazz = class0;
      AtmosphereConfig atmosphereConfig1 = defaultBroadcasterFactory0.config;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      String string0 = "Not a valid annotation element type tag: 0x";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setDefaultSerializerClassName(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.destroy();
      String string1 = "Action{timeout=";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, string1);
      atmosphereFramework0.handlersPath = atmosphereFramework1.DEFAULT_LIB_PATH;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      boolean boolean2 = atmosphereConfig0.isSupportSession();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.mappingRegex(atmosphereFramework0.DEFAULT_LIB_PATH);
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.frameworkListener(atmosphereFrameworkListenerAdapter0);
      String string0 = "]Fb5kj";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.addBroadcasterType(string0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework1.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      UUIDProvider uUIDProvider0 = atmosphereConfig1.uuidProvider();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcastFilterAdapter broadcastFilterAdapter0 = new BroadcastFilterAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterFilters((BroadcastFilter) broadcastFilterAdapter0);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.init();
      Class<DefaultBroadcaster> class0 = DefaultBroadcaster.class;
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      LinkedList<AtmosphereInterceptor> linkedList0 = new LinkedList<AtmosphereInterceptor>();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketHandlerAdapter0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketProcessor_WebSocketHandlerProxy0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addWebSocketHandler(atmosphereFramework1.META_SERVICE, (WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy1, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER, (List<AtmosphereInterceptor>) linkedList0);
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.destroyable(boolean0);
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      AtmosphereRequest atmosphereRequest2 = atmosphereRequest1.contentType(string0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      WebSocket webSocket0 = mock(WebSocket.class, new ViolatedAssumptionAnswer());
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance(atmosphereConfig0, atmosphereRequest1, webSocket0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.annotationScanned(boolean0);
      AtmosphereResponse atmosphereResponse1 = AtmosphereResponse.wrap(atmosphereResponse0);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.configureRequestResponse(atmosphereRequest2, atmosphereResponse1);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.startupHook(atmosphereConfig_StartupHook0);
      String string1 = "Using BroadcasterFactory:T{}";
      long long0 = 298L;
      atmosphereResponse0.addDateHeader(string1, long0);
      AtmosphereResponse atmosphereResponse2 = AtmosphereResponse.wrap(atmosphereResponse1);
      String string2 = atmosphereConfig1.getWebServerName();
      WebSocket webSocket1 = null;
      webSocketProcessor_WebSocketHandlerProxy1.onTextMessage(webSocket1, atmosphereFramework3.META_SERVICE);
      atmosphereResponse0.flushBuffer();
      boolean boolean1 = atmosphereConfig1.isSessionTimeoutRemovalAllowed();
      atmosphereConfig2.initComplete();
      AtmosphereFramework atmosphereFramework6 = atmosphereConfig0.framework();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      atmosphereConfig0.destroy();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtmosphereResourceImpl atmosphereResourceImpl0 = new AtmosphereResourceImpl();
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addAnnotationPackage(class0);
      String string0 = "";
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.allowAllClassesScan(boolean1);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.notifySuspended(string0);
      String string1 = "";
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = false;
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      Map<String, Object> map0 = atmosphereConfig0.properties();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "2%[:\"BtSrM,?OEu";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setAtmosphereDotXmlPath(string0);
      String string1 = "68j+~h`5LvS )?Cl";
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(string1, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, (Broadcaster) defaultBroadcaster0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setBroadcasterFactory(broadcasterFactory0);
      String string2 = "&m:@e~H_iG";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setLibPath(string2);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.newAtmosphereConfig();
      atmosphereConfig1.initComplete();
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig1.getAtmosphereHandlerConfig();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "AtmosphereInterceptor {} will always be executed first";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string0);
      long long0 = 0L;
      EvoSuiteFile evoSuiteFile2 = null;
      String string1 = "XO3=xa;=nsD\\~>^";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile2, string1);
      String string2 = "";
      boolean boolean4 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string2);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(long0);
      int int0 = 1;
      Random.setNextRandom(int0);
      System.setCurrentTimeMillis(int0);
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      atmosphereFramework0.patchContainer();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.getAtmosphereConfig();
      String string3 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, atmosphereFramework0.MAPPING_REGEX);
      Class<Delayed> class0 = Delayed.class;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addCustomAnnotationPackage(class0);
      boolean boolean5 = false;
      // Undeclared exception!
      try { 
        atmosphereFramework0.initEndpointMapper();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifySuspended(atmosphereFramework0.META_SERVICE);
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addBroadcasterListener(broadcasterListenerAdapter0);
      BroadcasterListenerAdapter broadcasterListenerAdapter1 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.addBroadcasterListener(broadcasterListenerAdapter1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Supplier<AtmosphereHandlerConfig> supplier0 = null;
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      LifecycleHandler lifecycleHandler0 = new LifecycleHandler();
      LifecycleHandler lifecycleHandler1 = lifecycleHandler0.offIfEmpty(defaultBroadcaster0);
      DefaultBroadcaster defaultBroadcaster1 = defaultBroadcaster0.lifecycleHandler(lifecycleHandler1);
      DefaultBroadcaster defaultBroadcaster2 = new DefaultBroadcaster();
      Supplier<DefaultBroadcaster> supplier1 = (Supplier<DefaultBroadcaster>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(supplier1).get();
      CompletableFuture<DefaultBroadcaster> completableFuture0 = CompletableFuture.supplyAsync(supplier1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      CompletableFuture<AtmosphereConfig.ShutdownHook> completableFuture1 = CompletableFuture.completedFuture(atmosphereConfig_ShutdownHook0);
      BiFunction<Object, Object, DefaultBroadcaster> biFunction0 = (BiFunction<Object, Object, DefaultBroadcaster>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(biFunction0).apply(any() , any());
      CompletableFuture<DefaultBroadcaster> completableFuture2 = completableFuture0.thenCombine((CompletionStage<? extends AtmosphereConfig.ShutdownHook>) completableFuture1, (BiFunction<? super DefaultBroadcaster, ? super AtmosphereConfig.ShutdownHook, ? extends DefaultBroadcaster>) biFunction0);
      BiFunction<DefaultBroadcaster, Object, DefaultBroadcaster> biFunction1 = null;
      Proxy proxy0 = (Proxy)atmosphereConfig0.getServletContext();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setUseStreamForFlushingComments(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.notifySuspended(atmosphereFramework0.META_SERVICE);
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.addBroadcasterListener(broadcasterListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework4);
      BroadcasterListenerAdapter broadcasterListenerAdapter1 = new BroadcasterListenerAdapter();
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework1.addBroadcasterListener(broadcasterListenerAdapter1);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      Supplier<AtmosphereHandlerConfig> supplier0 = null;
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      LifecycleHandler lifecycleHandler0 = new LifecycleHandler();
      LifecycleHandler lifecycleHandler1 = lifecycleHandler0.offIfEmpty(defaultBroadcaster0);
      DefaultBroadcaster defaultBroadcaster1 = defaultBroadcaster0.lifecycleHandler(lifecycleHandler1);
      DefaultBroadcaster defaultBroadcaster2 = new DefaultBroadcaster();
      Supplier<DefaultBroadcaster> supplier1 = (Supplier<DefaultBroadcaster>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(supplier1).get();
      CompletableFuture<DefaultBroadcaster> completableFuture0 = CompletableFuture.supplyAsync(supplier1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      CompletableFuture<AtmosphereConfig.ShutdownHook> completableFuture1 = CompletableFuture.completedFuture(atmosphereConfig_ShutdownHook0);
      BiFunction<Object, Object, DefaultBroadcaster> biFunction0 = (BiFunction<Object, Object, DefaultBroadcaster>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(defaultBroadcaster2).when(biFunction0).apply(any() , any());
      CompletableFuture<DefaultBroadcaster> completableFuture2 = completableFuture0.thenCombine((CompletionStage<? extends AtmosphereConfig.ShutdownHook>) completableFuture1, (BiFunction<? super DefaultBroadcaster, ? super AtmosphereConfig.ShutdownHook, ? extends DefaultBroadcaster>) biFunction0);
      BiFunction<DefaultBroadcaster, Object, DefaultBroadcaster> biFunction1 = null;
      ServletConfig servletConfig0 = atmosphereConfig1.getServletConfig();
      atmosphereConfig2.initComplete();
  }
}
