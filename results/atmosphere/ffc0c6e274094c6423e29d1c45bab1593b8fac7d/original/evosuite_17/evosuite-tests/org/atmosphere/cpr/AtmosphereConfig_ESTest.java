/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:58:52 GMT 2020
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Proxy;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.function.Supplier;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpSession;
import org.atmosphere.cache.BroadcasterCacheInspector;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.cpr.Action;
import org.atmosphere.cpr.AsyncSupportListener;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereFrameworkListenerAdapter;
import org.atmosphere.cpr.AtmosphereInterceptor;
import org.atmosphere.cpr.AtmosphereInterceptorWriter;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceFactory;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceListenerAdapter;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.AtmosphereResponse;
import org.atmosphere.cpr.AtmosphereServlet;
import org.atmosphere.cpr.BroadcastFilter;
import org.atmosphere.cpr.BroadcastFilterAdapter;
import org.atmosphere.cpr.Broadcaster;
import org.atmosphere.cpr.BroadcasterCacheListener;
import org.atmosphere.cpr.BroadcasterConfig;
import org.atmosphere.cpr.BroadcasterFactory;
import org.atmosphere.cpr.BroadcasterListener;
import org.atmosphere.cpr.BroadcasterListenerAdapter;
import org.atmosphere.cpr.DefaultBroadcaster;
import org.atmosphere.cpr.DefaultBroadcasterFactory;
import org.atmosphere.cpr.DefaultMetaBroadcaster;
import org.atmosphere.cpr.MetaBroadcaster;
import org.atmosphere.cpr.MeteorServlet;
import org.atmosphere.handler.AtmosphereHandlerAdapter;
import org.atmosphere.interceptor.CacheHeadersInterceptor;
import org.atmosphere.interceptor.OnDisconnectInterceptor;
import org.atmosphere.lifecycle.LifecycleHandler;
import org.atmosphere.util.DefaultUUIDProvider;
import org.atmosphere.util.UUIDProvider;
import org.atmosphere.websocket.WebSocket;
import org.atmosphere.websocket.WebSocketHandler;
import org.atmosphere.websocket.WebSocketHandlerAdapter;
import org.atmosphere.websocket.WebSocketProcessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      String string0 = "org.atmosphere.cpr.AtmosphereConfig";
      AtmosphereHandlerAdapter atmosphereHandlerAdapter0 = new AtmosphereHandlerAdapter();
      String string1 = ",iU";
      List<AtmosphereInterceptor> list0 = null;
      String string2 = "";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setBroadcasterCacheClassName(string2);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.shareExecutorServices(boolean1);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setAtmosphereDotXmlPath(atmosphereFramework0.META_SERVICE);
      AtmosphereResourceImpl atmosphereResourceImpl0 = new AtmosphereResourceImpl();
      AtmosphereResource.TRANSPORT atmosphereResource_TRANSPORT0 = AtmosphereResource.TRANSPORT.JSONP;
      AtmosphereResourceImpl atmosphereResourceImpl1 = atmosphereResourceImpl0.transport(atmosphereResource_TRANSPORT0);
      // Undeclared exception!
      try { 
        atmosphereResourceImpl0.cloneState(atmosphereResourceImpl1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereResourceImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.getAtmosphereConfig();
      // Undeclared exception!
      try { 
        atmosphereFramework0.doInitParams(atmosphereServlet0);
      } catch(IllegalStateException e) {
         //
         // ServletConfig has not been initialized
         //
         verifyException("javax.servlet.GenericServlet", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.config;
      atmosphereConfig0.destroy();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      atmosphereFramework0.allowAllClassesScan = boolean0;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      boolean boolean1 = atmosphereConfig1.isSessionTimeoutRemovalAllowed();
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig1.resourcesFactory();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0, boolean0);
      String string0 = null;
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        defaultBroadcaster0.addBroadcasterListener(broadcasterListenerAdapter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.DefaultBroadcaster", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      DefaultUUIDProvider defaultUUIDProvider0 = new DefaultUUIDProvider();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setWebsocketProcessorClassName(atmosphereFramework0.MAPPING_REGEX);
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setHandlersPath(string0);
      boolean boolean2 = true;
      atmosphereFramework1.configureBroadcasterFactory();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.shareExecutorServices(boolean2);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      boolean boolean3 = true;
      atmosphereConfig0.setSupportSession(boolean3);
      // Undeclared exception!
      try { 
        atmosphereFramework3.initEndpointMapper();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      boolean boolean2 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.allowAllClassesScan(boolean2);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.removeAllAtmosphereHandler();
      String string0 = "";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notifyDestroyed(string0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setBroadcasterFactory(defaultBroadcasterFactory0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework3.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      String string0 = "u8Ty;ugGT3w'I}`";
      atmosphereConfig0.destroy();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "NTztJyiRP4";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.excludeInterceptor(string0);
      String string1 = "{o";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setHandlersPath(string1);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.init();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      Proxy proxy0 = (Proxy)atmosphereConfig0.getServletContext();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = null;
      String string1 = "WfNp5hZ].N~X";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addInitParameter(string0, string1);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.excludeInterceptor(string1);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.removeAllInitParams();
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterCacheListener(broadcasterCacheListener0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.resetStates();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.externalizeDestroy(boolean0);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      boolean boolean2 = false;
      atmosphereFramework3.annotationFound = boolean2;
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      Action.TYPE action_TYPE0 = Action.TYPE.DESTROYED;
      AtmosphereRequest atmosphereRequest0 = null;
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      boolean boolean0 = false;
      AtmosphereResponse atmosphereResponse1 = atmosphereResponse0.write(byteArray0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notify(action_TYPE0, atmosphereRequest0, atmosphereResponse1);
      Action.TYPE action_TYPE1 = Action.TYPE.SUSPEND_MESSAGE;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notify(action_TYPE1, atmosphereRequest0, atmosphereResponse1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.getAtmosphereConfig();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationProcessorClassName(string0);
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterCacheListener(broadcasterCacheListener0);
      Class<Object> class0 = Object.class;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addCustomAnnotationPackage(class0);
      AsyncSupportListener asyncSupportListener0 = null;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.asyncSupportListener(asyncSupportListener0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setUseBlockingImplementation(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.init();
      BroadcastFilterAdapter broadcastFilterAdapter0 = new BroadcastFilterAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.broadcasterFilters((BroadcastFilter) broadcastFilterAdapter0);
      Class<Broadcaster> class0 = Broadcaster.class;
      boolean boolean2 = true;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.webSocketEnabled(boolean2);
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketHandlerAdapter0);
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      AtmosphereFramework.AtmosphereHandlerWrapper atmosphereFramework_AtmosphereHandlerWrapper0 = new AtmosphereFramework.AtmosphereHandlerWrapper(atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER, defaultBroadcaster0);
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework_AtmosphereHandlerWrapper0.interceptors;
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy1 = new WebSocketProcessor.WebSocketHandlerProxy(class0, webSocketProcessor_WebSocketHandlerProxy0, linkedList0);
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy2 = webSocketProcessor_WebSocketHandlerProxy1.path(atmosphereFramework0.DEFAULT_LIB_PATH);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.addWebSocketHandler((WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy2);
      WebSocket webSocket0 = mock(WebSocket.class, new ViolatedAssumptionAnswer());
      webSocketProcessor_WebSocketHandlerProxy1.onOpen(webSocket0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework5.getAtmosphereConfig();
      Proxy proxy0 = (Proxy)atmosphereConfig0.getServletContext();
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      Enumeration<String> enumeration0 = atmosphereConfig0.getInitParameterNames();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      OnDisconnectInterceptor onDisconnectInterceptor0 = new OnDisconnectInterceptor();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.interceptor(onDisconnectInterceptor0);
      String string0 = "F,$,5#^";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setHandlersPath(string0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.removeAllAtmosphereHandler();
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.annotationScanned(boolean1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      boolean boolean2 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.allowAllClassesScan(boolean2);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addInitParameter(atmosphereFramework0.DEFAULT_HANDLER_PATH, atmosphereFramework0.META_SERVICE);
      String string0 = "";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notifyDestroyed(string0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setBroadcasterFactory(defaultBroadcasterFactory0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework3.newAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      int int0 = (-2071);
      int int1 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, int0);
      boolean boolean1 = false;
      boolean boolean2 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_LIB_PATH, boolean1);
      String string0 = "org.atmosphere.interceptor.InvokationOrder";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationProcessorClassName(string0);
      boolean boolean3 = false;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean3);
      boolean boolean4 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      MeteorServlet meteorServlet0 = new MeteorServlet();
      meteorServlet0.destroy();
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.framework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      String string0 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      boolean boolean0 = true;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      Map<String, Object> map0 = atmosphereConfig0.properties();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "Removing {}";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setDefaultSerializerClassName(string0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereFramework1.sessionFactory();
      atmosphereConfig0.destroy();
      String string1 = "%-sUV.]W?:+zND";
      String string2 = atmosphereConfig0.getInitParameter(string1);
      AtmosphereFramework atmosphereFramework2 = atmosphereConfig0.framework();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.newAtmosphereFramework();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.resetStates();
      BroadcasterConfig.FilterManipulator broadcasterConfig_FilterManipulator0 = null;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.filterManipulator(broadcasterConfig_FilterManipulator0);
      DefaultUUIDProvider defaultUUIDProvider0 = new DefaultUUIDProvider();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.uuidProvider((UUIDProvider) defaultUUIDProvider0);
      String string0 = "R~ tiU'xaD`";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.excludeInterceptor(string0);
      String string1 = defaultUUIDProvider0.generateUuid();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      boolean boolean1 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      boolean boolean2 = atmosphereConfig0.isThrowExceptionOnCloned();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.frameworkListener(atmosphereFrameworkListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      BroadcasterFactory broadcasterFactory0 = defaultBroadcasterFactory0.removeBroadcasterListener(broadcasterListenerAdapter0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.setBroadcasterFactory(broadcasterFactory0);
      BroadcasterFactory broadcasterFactory1 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework3 = atmosphereConfig0.framework();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      boolean boolean1 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      CacheHeadersInterceptor cacheHeadersInterceptor0 = new CacheHeadersInterceptor();
      CacheHeadersInterceptor cacheHeadersInterceptor1 = cacheHeadersInterceptor0.writeHeaders(boolean1);
      CacheHeadersInterceptor cacheHeadersInterceptor2 = cacheHeadersInterceptor1.injectCacheHeaders(boolean1);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework0.interceptor(cacheHeadersInterceptor2);
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      Supplier<AtmosphereInterceptor> supplier0 = (Supplier<AtmosphereInterceptor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(defaultBroadcaster0.POLLING_DEFAULT, threadFactory0);
      CompletableFuture<AtmosphereInterceptor> completableFuture0 = CompletableFuture.supplyAsync(supplier0, (Executor) scheduledThreadPoolExecutor0);
      DefaultBroadcaster defaultBroadcaster1 = defaultBroadcaster0.currentLifecycleTask((Future<?>) completableFuture0);
      LifecycleHandler lifecycleHandler0 = new LifecycleHandler();
      LifecycleHandler lifecycleHandler1 = lifecycleHandler0.off(defaultBroadcaster0);
      DefaultBroadcaster defaultBroadcaster2 = defaultBroadcaster1.lifecycleHandler(lifecycleHandler1);
      AtmosphereConfig atmosphereConfig1 = defaultBroadcaster2.config;
      LifecycleHandler lifecycleHandler2 = lifecycleHandler0.offIfEmpty(defaultBroadcaster0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addBroadcasterType(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.broadcasterLifeCyclePolicy(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.mappingRegex(string0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.destroy();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      String string1 = null;
      String string2 = "org.atmosphere.cpr.AtmosphereConfig";
      String string3 = atmosphereConfig0.getInitParameter(string1, string2);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "I.T_u^T)Zn7)N";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.mappingRegex(string0);
      String string1 = "  m8_JNfP;.-D";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.broadcasterLifeCyclePolicy(string1);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.notifySuspended(string0);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setUseNativeImplementation(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.config;
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework1.setUseStreamForFlushingComments(boolean1);
      String string2 = atmosphereConfig0.getInitParameter(atmosphereFramework3.DEFAULT_ATMOSPHERE_CONFIG_PATH, atmosphereFramework4.DEFAULT_LIB_PATH);
      atmosphereConfig0.setSupportSession(boolean0);
      String string3 = "QIB(.";
      boolean boolean2 = atmosphereConfig0.getInitParameter(string3, boolean1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet();
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.config;
      atmosphereConfig0.initComplete();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "\n";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      Action.TYPE action_TYPE0 = Action.TYPE.CONTINUE;
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance();
      Map<String, String> map0 = atmosphereResponse0.headers();
      AtmosphereRequest atmosphereRequest1 = atmosphereRequest0.headers(map0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notify(action_TYPE0, atmosphereRequest1, atmosphereResponse0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.newAtmosphereConfig();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.addAnnotationPackage(class0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.config;
      String string0 = "x\"W)80cq";
      boolean boolean1 = false;
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig0.initComplete();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      boolean boolean2 = atmosphereConfig0.getInitParameter(string0, boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook1);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook1 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook1);
      // Undeclared exception!
      try { 
        atmosphereConfig2.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.wrap(atmosphereRequest0);
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.configureRequestResponse(atmosphereRequest1, atmosphereResponse0);
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      // Undeclared exception!
      try { 
        atmosphereFramework1.addBroadcasterListener(broadcasterListenerAdapter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      DefaultUUIDProvider defaultUUIDProvider0 = new DefaultUUIDProvider();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.uuidProvider((UUIDProvider) defaultUUIDProvider0);
      boolean boolean2 = false;
      String string0 = defaultUUIDProvider0.generateUuid();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.annotationScanned(boolean2);
      String string1 = defaultUUIDProvider0.generateUuid();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.broadcasterLifeCyclePolicy(atmosphereFramework1.DEFAULT_HANDLER_PATH);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      boolean boolean3 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      boolean boolean4 = true;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean4);
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean1);
      String string2 = "ONxzLd ";
      boolean boolean5 = true;
      boolean boolean6 = atmosphereConfig0.getInitParameter(string2, boolean5);
      boolean boolean7 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      boolean boolean8 = atmosphereConfig0.isThrowExceptionOnCloned();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      String string0 = "";
      // Undeclared exception!
      try { 
        atmosphereConfig1.getBroadcasterFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }
}
