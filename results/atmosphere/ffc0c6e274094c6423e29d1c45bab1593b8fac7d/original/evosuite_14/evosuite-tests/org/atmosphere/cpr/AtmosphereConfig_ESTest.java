/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:48:53 GMT 2020
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Delayed;
import javax.servlet.Filter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequestWrapper;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.cpr.Action;
import org.atmosphere.cpr.AnnotationProcessor;
import org.atmosphere.cpr.AsyncIOWriterAdapter;
import org.atmosphere.cpr.AsyncSupportListenerAdapter;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereFrameworkListenerAdapter;
import org.atmosphere.cpr.AtmosphereHandler;
import org.atmosphere.cpr.AtmosphereInterceptor;
import org.atmosphere.cpr.AtmosphereInterceptorWriter;
import org.atmosphere.cpr.AtmosphereObjectFactory;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.cpr.AtmosphereResourceFactory;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceListenerAdapter;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.AtmosphereResponse;
import org.atmosphere.cpr.AtmosphereServlet;
import org.atmosphere.cpr.BroadcastFilter;
import org.atmosphere.cpr.BroadcastFilterAdapter;
import org.atmosphere.cpr.Broadcaster;
import org.atmosphere.cpr.BroadcasterCacheListener;
import org.atmosphere.cpr.BroadcasterFactory;
import org.atmosphere.cpr.BroadcasterListenerAdapter;
import org.atmosphere.cpr.DefaultAtmosphereResourceSessionFactory;
import org.atmosphere.cpr.DefaultBroadcaster;
import org.atmosphere.cpr.DefaultBroadcasterFactory;
import org.atmosphere.cpr.MetaBroadcaster;
import org.atmosphere.cpr.MeteorServlet;
import org.atmosphere.handler.ReflectorServletProcessor;
import org.atmosphere.interceptor.AndroidAtmosphereInterceptor;
import org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor;
import org.atmosphere.interceptor.HeartbeatInterceptor;
import org.atmosphere.interceptor.InvokationOrder;
import org.atmosphere.lifecycle.BroadcasterLifecyclePolicyHandler;
import org.atmosphere.util.UUIDProvider;
import org.atmosphere.websocket.WebSocket;
import org.atmosphere.websocket.WebSocketHandler;
import org.atmosphere.websocket.WebSocketProcessor;
import org.atmosphere.websocket.WebSocketProtocol;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addBroadcasterCacheListener(broadcasterCacheListener0);
      AtmosphereObjectFactory<AtmosphereFramework.AtmosphereHandlerWrapper> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereFramework.AtmosphereHandlerWrapper>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(atmosphereObjectFactory0).newClassInstance(nullable(java.lang.Class.class) , nullable(java.lang.Class.class));
      atmosphereFramework1.objectFactory(atmosphereObjectFactory0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setDefaultSerializerClassName(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.setUseNativeImplementation(boolean0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      BroadcasterLifecyclePolicyHandler broadcasterLifecyclePolicyHandler0 = (BroadcasterLifecyclePolicyHandler)defaultBroadcasterFactory0.lifeCycleListener;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.annotationScanned(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.newAtmosphereConfig();
      boolean boolean1 = atmosphereConfig0.isThrowExceptionOnCloned();
      boolean boolean2 = false;
      atmosphereFramework4.reconfigureInitParams(boolean2);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework4);
      String string0 = "";
      String string1 = atmosphereConfig1.getInitParameter(string0);
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig1.metaBroadcaster();
      boolean boolean3 = atmosphereConfig1.isSupportSession();
      Broadcaster.POLICY broadcaster_POLICY0 = Broadcaster.POLICY.FIFO;
      defaultBroadcasterFactory0.defaultPolicy = broadcaster_POLICY0;
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig1.sessionFactory();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.startupHook(atmosphereConfig_StartupHook0);
      UUIDProvider uUIDProvider0 = atmosphereConfig2.uuidProvider();
      String string2 = "%a:@.Q;P}GmckzAzn";
      String string3 = atmosphereConfig2.getInitParameter(string2);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationScanned(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.sharedThreadPools(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setUseStreamForFlushingComments(boolean0);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework2.removeAllInitParams();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      BroadcasterFactory broadcasterFactory0 = null;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework4.setBroadcasterFactory(broadcasterFactory0);
      boolean boolean1 = atmosphereConfig1.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, boolean0);
      atmosphereConfig1.initComplete();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      String string0 = "naaFlmes|2J)xyFV{}=";
      atmosphereResourceListenerAdapter0.onSuspended(string0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.startupHook(atmosphereConfig_StartupHook0);
      atmosphereConfig3.initComplete();
      String string1 = null;
      String string2 = atmosphereConfig0.getInitParameter(string1);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereObjectFactory<AtmosphereResourceImpl> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereResourceImpl>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      atmosphereFramework2.objectFactory(atmosphereObjectFactory0);
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      String string3 = "";
      int int0 = (-1);
      int int1 = atmosphereConfig2.getInitParameter(string3, int0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      List<AtmosphereInterceptor> list0 = null;
      // Undeclared exception!
      try { 
        atmosphereFramework1.addAtmosphereHandler(atmosphereFramework0.DEFAULT_HANDLER_PATH, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, (Broadcaster) defaultBroadcaster0, list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      BroadcastFilterAdapter broadcastFilterAdapter0 = new BroadcastFilterAdapter();
      URL[] uRLArray0 = new URL[7];
      URL[] uRLArray1 = new URL[8];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URLStreamHandlerFactory uRLStreamHandlerFactory0 = mock(URLStreamHandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn(uRLStreamHandler0).when(uRLStreamHandlerFactory0).createURLStreamHandler(anyString());
      URLClassLoader uRLClassLoader1 = new URLClassLoader(uRLArray0, uRLClassLoader0, uRLStreamHandlerFactory0);
      String string0 = "";
      int int0 = 46;
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler1);
      uRLArray0[2] = uRL0;
      URI uRI0 = MockURI.create(string0);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.excludeInterceptor(string0);
      boolean boolean0 = false;
      AtmosphereResourceLifecycleInterceptor atmosphereResourceLifecycleInterceptor0 = new AtmosphereResourceLifecycleInterceptor(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.interceptor(atmosphereResourceLifecycleInterceptor0);
      AsyncSupportListenerAdapter asyncSupportListenerAdapter0 = new AsyncSupportListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.asyncSupportListener(asyncSupportListenerAdapter0);
      Action.TYPE action_TYPE0 = Action.TYPE.CREATED;
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(atmosphereRequest0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = true;
      atmosphereFramework3.executeFirstSet = boolean3;
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.cloneRequest(httpServletRequestWrapper0, boolean0, boolean1, boolean1, boolean2);
      InvokationOrder.PRIORITY invokationOrder_PRIORITY0 = InvokationOrder.PRIORITY.AFTER_DEFAULT;
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework1.interceptors;
      atmosphereFramework3.positionInterceptor(invokationOrder_PRIORITY0, atmosphereResourceLifecycleInterceptor0, linkedList0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      AtmosphereInterceptorWriter atmosphereInterceptorWriter0 = new AtmosphereInterceptorWriter();
      boolean boolean4 = true;
      AtmosphereResponse atmosphereResponse0 = new AtmosphereResponse(atmosphereInterceptorWriter0, atmosphereRequest0, boolean4);
      AtmosphereResponse atmosphereResponse1 = new AtmosphereResponse(atmosphereResponse0, atmosphereInterceptorWriter0, atmosphereRequest0, boolean4);
      byte[] byteArray0 = null;
      AtmosphereResponse atmosphereResponse2 = atmosphereResponse1.write(byteArray0, boolean2);
      AtmosphereResponse atmosphereResponse3 = AtmosphereResponse.wrap(atmosphereResponse2);
      AtmosphereResponse atmosphereResponse4 = atmosphereResponse3.request(atmosphereRequest1);
      asyncSupportListenerAdapter0.onSuspend(atmosphereRequest1, atmosphereResponse4);
      WebSocket webSocket0 = null;
      AtmosphereResponse atmosphereResponse5 = AtmosphereResponse.newInstance(atmosphereConfig0, atmosphereRequest0, webSocket0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.notify(action_TYPE0, atmosphereRequest1, atmosphereResponse5);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework4.notifyDestroyed(atmosphereFramework2.DEFAULT_HANDLER_PATH);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      int int0 = 0;
      atmosphereResponse5.setIntHeader(atmosphereFramework0.META_SERVICE, int0);
      asyncSupportListenerAdapter0.onTimeout(atmosphereRequest0, atmosphereResponse5);
      atmosphereConfig1.setThrowExceptionOnCloned(boolean1);
      Map<String, Object> map0 = atmosphereConfig1.properties();
      boolean boolean5 = true;
      atmosphereConfig1.setSupportSession(boolean5);
      int int1 = atmosphereConfig1.getInitParameter(atmosphereFramework4.DEFAULT_HANDLER_PATH, int0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      boolean boolean1 = false;
      atmosphereFramework0.isCometSupportSpecified = boolean1;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.removeAllAtmosphereHandler();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.broadcasterLifeCyclePolicy(atmosphereFramework0.MAPPING_REGEX);
      String string0 = "a7uEJYu-bFSmz7m";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addAtmosphereHandler(string0, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.getAtmosphereConfig();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.uuidProvider(uUIDProvider0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.config;
      atmosphereConfig1.setSupportSession(boolean0);
      boolean boolean2 = true;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework1.setUseNativeImplementation(boolean2);
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig1.getAtmosphereHandlerConfig();
      Class<AtmosphereInterceptor> class0 = AtmosphereInterceptor.class;
      AtmosphereInterceptor atmosphereInterceptor0 = atmosphereFramework4.newAInterceptor(class0);
      boolean boolean3 = atmosphereConfig0.getInitParameter(atmosphereFramework3.MAPPING_REGEX, boolean0);
      boolean boolean4 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean3);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean0 = true;
      atmosphereConfig0.setSupportSession(boolean0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.uuidProvider();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "9C5K,68B1N0f9-Y+";
      AtmosphereHandler atmosphereHandler0 = AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER;
      LinkedList<AtmosphereInterceptor> linkedList0 = new LinkedList<AtmosphereInterceptor>();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addAtmosphereHandler(string0, atmosphereHandler0, (List<AtmosphereInterceptor>) linkedList0);
      DefaultBroadcaster defaultBroadcaster0 = new DefaultBroadcaster();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(atmosphereFramework0.META_SERVICE, atmosphereHandler0, (Broadcaster) defaultBroadcaster0);
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addBroadcasterCacheListener(broadcasterCacheListener0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.newAtmosphereConfig();
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework4);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.newAtmosphereFramework();
      String string0 = "6_=Wqpo0cGh@d>(a";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setWebsocketProcessorClassName(string0);
      String string1 = "";
      atmosphereFramework1.handlersPath = atmosphereFramework0.MAPPING_REGEX;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.externalizeDestroy(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.removeAtmosphereHandler(string1);
      String string2 = "15j@";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.addBroadcasterType(string2);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      Class<String> class0 = String.class;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addAnnotationPackage(class0);
      AsyncSupportListenerAdapter asyncSupportListenerAdapter0 = new AsyncSupportListenerAdapter();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.asyncSupportListener(asyncSupportListenerAdapter0);
      String string0 = "JX,\"'yfa,{";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.excludeInterceptor(string0);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.annotationScanned(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      String string1 = "`25yd_1&qV";
      int int0 = 92;
      int int1 = atmosphereConfig0.getInitParameter(string1, int0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setBroadcasterCacheClassName(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      MeteorServlet meteorServlet0 = new MeteorServlet();
      Collection<Filter> collection0 = null;
      String string0 = "setMaxMessageSize";
      ReflectorServletProcessor reflectorServletProcessor0 = new ReflectorServletProcessor();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addAtmosphereHandler(string0, (AtmosphereHandler) reflectorServletProcessor0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework2);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      List<AtmosphereConfig.ShutdownHook> list0 = null;
      String string0 = null;
      String string1 = atmosphereConfig0.getInitParameter(string0, string0);
      atmosphereConfig0.shutdownHooks = list0;
      String string2 = "J";
      String string3 = atmosphereConfig0.getInitParameter(string2);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean0 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.handlers();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      atmosphereConfig0.initComplete();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterType(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      String string0 = "";
      String string1 = "nV!l9]";
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework0.interceptors();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.addAtmosphereHandler(string0, atmosphereFramework0.REFLECTOR_ATMOSPHEREHANDLER, string1, (List<AtmosphereInterceptor>) linkedList0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.annotationProcessorClassName(atmosphereFramework1.META_SERVICE);
      HeartbeatInterceptor heartbeatInterceptor0 = new HeartbeatInterceptor();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-32);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-62);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)102;
      byteArray0[4] = byte4;
      byte byte5 = (byte)93;
      byteArray0[5] = byte5;
      HeartbeatInterceptor heartbeatInterceptor1 = heartbeatInterceptor0.paddingText(byteArray0);
      HeartbeatInterceptor heartbeatInterceptor2 = heartbeatInterceptor1.clientHeartbeatFrequencyInSeconds((int) byte3);
      boolean boolean1 = linkedList0.add((AtmosphereInterceptor) heartbeatInterceptor2);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.newAtmosphereConfig();
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = null;
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean0 = false;
      String string0 = "WebSocket.write() for {}";
      String string1 = "\\_S4jJZzqQ>";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      atmosphereConfig0.destroy();
      String string3 = "";
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      LinkedList<AtmosphereConfig.StartupHook> linkedList0 = new LinkedList<AtmosphereConfig.StartupHook>();
      atmosphereConfig1.startUpHook = (List<AtmosphereConfig.StartupHook>) linkedList0;
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setAtmosphereDotXmlPath(string0);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setUseNativeImplementation(boolean0);
      String string1 = "\\[|$Gsv";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setHandlersPath(string1);
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.sharedThreadPools(boolean1);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.config;
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      String string2 = ".class";
      int int0 = 0;
      int int1 = atmosphereConfig0.getInitParameter(string2, int0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      AtmosphereFrameworkListenerAdapter atmosphereFrameworkListenerAdapter0 = new AtmosphereFrameworkListenerAdapter();
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.frameworkListener(atmosphereFrameworkListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework1.config;
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereFramework atmosphereFramework2 = atmosphereConfig0.framework();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet();
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      boolean boolean0 = false;
      boolean boolean1 = atmosphereConfig0.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, boolean0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework0.getAtmosphereConfig();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.excludeInterceptor(string0);
      boolean boolean0 = false;
      AtmosphereResourceLifecycleInterceptor atmosphereResourceLifecycleInterceptor0 = new AtmosphereResourceLifecycleInterceptor(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.interceptor(atmosphereResourceLifecycleInterceptor0);
      AsyncSupportListenerAdapter asyncSupportListenerAdapter0 = new AsyncSupportListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.asyncSupportListener(asyncSupportListenerAdapter0);
      Action.TYPE action_TYPE0 = Action.TYPE.CREATED;
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(atmosphereRequest0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = true;
      atmosphereFramework3.executeFirstSet = boolean3;
      AtmosphereRequest atmosphereRequest1 = AtmosphereRequest.cloneRequest(httpServletRequestWrapper0, boolean0, boolean1, boolean1, boolean2);
      InvokationOrder.PRIORITY invokationOrder_PRIORITY0 = InvokationOrder.PRIORITY.AFTER_DEFAULT;
      LinkedList<AtmosphereInterceptor> linkedList0 = atmosphereFramework1.interceptors;
      atmosphereFramework3.positionInterceptor(invokationOrder_PRIORITY0, atmosphereResourceLifecycleInterceptor0, linkedList0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      AtmosphereInterceptorWriter atmosphereInterceptorWriter0 = new AtmosphereInterceptorWriter();
      boolean boolean4 = true;
      AtmosphereResponse atmosphereResponse0 = new AtmosphereResponse(atmosphereInterceptorWriter0, atmosphereRequest0, boolean4);
      AtmosphereResponse atmosphereResponse1 = new AtmosphereResponse(atmosphereResponse0, atmosphereInterceptorWriter0, atmosphereRequest0, boolean4);
      byte[] byteArray0 = null;
      AtmosphereResponse atmosphereResponse2 = atmosphereResponse1.write(byteArray0, boolean2);
      AtmosphereResponse atmosphereResponse3 = AtmosphereResponse.wrap(atmosphereResponse2);
      AtmosphereResponse atmosphereResponse4 = atmosphereResponse3.request(atmosphereRequest1);
      asyncSupportListenerAdapter0.onSuspend(atmosphereRequest1, atmosphereResponse4);
      WebSocket webSocket0 = null;
      AtmosphereResponse atmosphereResponse5 = AtmosphereResponse.newInstance(atmosphereConfig0, atmosphereRequest0, webSocket0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.notify(action_TYPE0, atmosphereRequest1, atmosphereResponse5);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework4.notifyDestroyed(atmosphereFramework2.DEFAULT_HANDLER_PATH);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      int int0 = 0;
      atmosphereResponse5.setIntHeader(atmosphereFramework0.META_SERVICE, int0);
      String string1 = atmosphereConfig1.getInitParameter(atmosphereFramework5.DEFAULT_ATMOSPHERE_CONFIG_PATH, atmosphereFramework0.DEFAULT_LIB_PATH);
      asyncSupportListenerAdapter0.onTimeout(atmosphereRequest0, atmosphereResponse5);
      atmosphereConfig1.setThrowExceptionOnCloned(boolean1);
      Map<String, Object> map0 = atmosphereConfig1.properties();
      boolean boolean5 = true;
      atmosphereConfig1.setSupportSession(boolean5);
      int int1 = atmosphereConfig1.getInitParameter(atmosphereFramework4.DEFAULT_HANDLER_PATH, int0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifySuspended(atmosphereFramework0.META_SERVICE);
      String string0 = "Y8W_n| ";
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setWebSocketProtocolClassName(string0);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setDefaultSerializerClassName(atmosphereFramework1.MAPPING_REGEX);
      Class<AndroidAtmosphereInterceptor> class0 = AndroidAtmosphereInterceptor.class;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.addAnnotationPackage(class0);
      boolean boolean1 = false;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework1.annotationScanned(boolean1);
      AtmosphereInterceptor atmosphereInterceptor0 = atmosphereFramework3.newAInterceptor(class0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.config;
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      atmosphereConfig0.initComplete();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      boolean boolean2 = false;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean1, boolean2);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.framework();
      AtmosphereRequest atmosphereRequest0 = AtmosphereRequest.newInstance();
      AtmosphereResponse atmosphereResponse0 = AtmosphereResponse.newInstance(atmosphereRequest0);
      AsyncIOWriterAdapter asyncIOWriterAdapter0 = new AsyncIOWriterAdapter();
      boolean boolean3 = false;
      AtmosphereResponse atmosphereResponse1 = new AtmosphereResponse(atmosphereResponse0, asyncIOWriterAdapter0, atmosphereRequest0, boolean3);
      AtmosphereResponse atmosphereResponse2 = AtmosphereResponse.wrap(atmosphereResponse1);
      byte[] byteArray0 = null;
      boolean boolean4 = false;
      AtmosphereResponse atmosphereResponse3 = atmosphereResponse2.write(byteArray0, boolean4);
      // Undeclared exception!
      try { 
        atmosphereServlet0.doTrace(atmosphereRequest0, atmosphereResponse3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = null;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setDefaultBroadcasterClassName(string0);
      String string1 = "";
      WebSocketHandler webSocketHandler0 = null;
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketHandler0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setDefaultBroadcasterClassName(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.allowAllClassesScan(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      atmosphereConfig0.destroy();
      AtmosphereFramework atmosphereFramework4 = atmosphereConfig0.framework();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      atmosphereConfig0.setSupportSession(boolean0);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      String string2 = "";
      String string3 = atmosphereConfig0.getInitParameter(string2, atmosphereFramework3.DEFAULT_HANDLER_PATH);
      DefaultAtmosphereResourceSessionFactory defaultAtmosphereResourceSessionFactory0 = new DefaultAtmosphereResourceSessionFactory();
      atmosphereFramework1.sessionFactory = (AtmosphereResourceSessionFactory) defaultAtmosphereResourceSessionFactory0;
      boolean boolean2 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean2);
      AnnotationProcessor annotationProcessor0 = atmosphereFramework4.annotationProcessor();
      AtmosphereConfig atmosphereConfig2 = atmosphereFramework3.config;
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig2.getBroadcasterFactory();
      atmosphereFramework0.broadcasterFactory = broadcasterFactory0;
      atmosphereFramework1.annotationProcessor = annotationProcessor0;
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationScanned(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.sharedThreadPools(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setUseStreamForFlushingComments(boolean0);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      WebSocketProtocol webSocketProtocol0 = atmosphereFramework2.getWebSocketProtocol();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework2.removeAllInitParams();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      BroadcasterFactory broadcasterFactory0 = null;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework4.setBroadcasterFactory(broadcasterFactory0);
      boolean boolean1 = atmosphereConfig1.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, boolean0);
      atmosphereConfig1.initComplete();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      String string0 = "naaFlmes|2J)xyFV{}=";
      atmosphereResourceListenerAdapter0.onSuspended(string0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.startupHook(atmosphereConfig_StartupHook0);
      atmosphereConfig3.initComplete();
      String string1 = null;
      String string2 = atmosphereConfig0.getInitParameter(string1);
      BroadcasterFactory broadcasterFactory1 = atmosphereConfig0.getBroadcasterFactory();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereObjectFactory<AtmosphereResourceImpl> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereResourceImpl>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      atmosphereFramework2.objectFactory(atmosphereObjectFactory0);
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      String string3 = "";
      int int0 = 0;
      int int1 = atmosphereConfig2.getInitParameter(string3, int0);
      atmosphereConfig2.destroy();
      atmosphereConfig1.destroy();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addBroadcasterCacheListener(broadcasterCacheListener0);
      AtmosphereObjectFactory<AtmosphereFramework.AtmosphereHandlerWrapper> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereFramework.AtmosphereHandlerWrapper>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(atmosphereFramework1.DEFAULT_LIB_PATH).when(atmosphereObjectFactory0).newClassInstance(nullable(java.lang.Class.class) , nullable(java.lang.Class.class));
      atmosphereFramework1.objectFactory(atmosphereObjectFactory0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setDefaultSerializerClassName(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.setUseNativeImplementation(boolean0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      BroadcasterLifecyclePolicyHandler broadcasterLifecyclePolicyHandler0 = (BroadcasterLifecyclePolicyHandler)defaultBroadcasterFactory0.lifeCycleListener;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.annotationScanned(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.newAtmosphereConfig();
      boolean boolean1 = atmosphereConfig0.isThrowExceptionOnCloned();
      boolean boolean2 = false;
      atmosphereFramework4.reconfigureInitParams(boolean2);
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework4);
      String string0 = "";
      String string1 = atmosphereConfig1.getInitParameter(string0);
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig1.metaBroadcaster();
      boolean boolean3 = atmosphereConfig1.isSupportSession();
      Broadcaster.POLICY broadcaster_POLICY0 = Broadcaster.POLICY.FIFO;
      defaultBroadcasterFactory0.defaultPolicy = broadcaster_POLICY0;
      // Undeclared exception!
      try { 
        atmosphereConfig1.sessionFactory();
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.atmosphere.cpr.AtmosphereResourceSessionFactory
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = null;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setDefaultBroadcasterClassName(string0);
      String string1 = "";
      WebSocketHandler webSocketHandler0 = null;
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketHandler0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setDefaultBroadcasterClassName(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.allowAllClassesScan(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.newAtmosphereConfig();
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      atmosphereConfig0.destroy();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.init();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      atmosphereConfig0.setSupportSession(boolean0);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
      String string2 = "";
      String string3 = atmosphereConfig0.getInitParameter(string2, atmosphereFramework3.DEFAULT_HANDLER_PATH);
      DefaultAtmosphereResourceSessionFactory defaultAtmosphereResourceSessionFactory0 = new DefaultAtmosphereResourceSessionFactory();
      atmosphereFramework1.sessionFactory = (AtmosphereResourceSessionFactory) defaultAtmosphereResourceSessionFactory0;
      boolean boolean2 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean2);
      AnnotationProcessor annotationProcessor0 = atmosphereFramework4.annotationProcessor();
      AtmosphereConfig atmosphereConfig2 = atmosphereFramework3.config;
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig2.getBroadcasterFactory();
      atmosphereFramework0.broadcasterFactory = broadcasterFactory0;
      atmosphereFramework1.annotationProcessor = annotationProcessor0;
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      String string4 = atmosphereConfig0.getWebServerName();
      BroadcasterFactory broadcasterFactory1 = atmosphereConfig1.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework5 = atmosphereConfig0.framework();
      boolean boolean3 = atmosphereConfig1.isThrowExceptionOnCloned();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.sharedThreadPools(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setHandlersPath(atmosphereFramework2.DEFAULT_HANDLER_PATH);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework2.removeAllInitParams();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      BroadcasterFactory broadcasterFactory0 = null;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework4.setBroadcasterFactory(broadcasterFactory0);
      boolean boolean1 = atmosphereConfig1.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, boolean0);
      atmosphereConfig1.initComplete();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      String string0 = "naaFlmes|2J)xyFV{}=";
      atmosphereResourceListenerAdapter0.onSuspended(string0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.startupHook(atmosphereConfig_StartupHook0);
      atmosphereConfig3.initComplete();
      String string1 = null;
      String string2 = atmosphereConfig0.getInitParameter(string1);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereObjectFactory<AtmosphereResourceImpl> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereResourceImpl>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      atmosphereFramework2.objectFactory(atmosphereObjectFactory0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = null;
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig3.shutdownHook(atmosphereConfig_ShutdownHook1);
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      String string3 = "";
      int int0 = (-1);
      int int1 = atmosphereConfig2.getInitParameter(string3, int0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean0 = false;
      String string0 = "$ebSocket.write() for {}";
      String string1 = "\\_S4jJZzqQ>";
      String string2 = atmosphereConfig0.getInitParameter(string0, string1);
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      atmosphereConfig0.destroy();
      String string3 = "";
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.annotationScanned(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.sharedThreadPools(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setUseStreamForFlushingComments(boolean0);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.getAtmosphereConfig();
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework2.removeAllInitParams();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.newAtmosphereConfig();
      boolean boolean1 = atmosphereConfig1.getInitParameter(atmosphereFramework0.DEFAULT_ATMOSPHERE_CONFIG_PATH, boolean0);
      atmosphereConfig1.initComplete();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      String string0 = "naaFlmes|2J)xyFV{}=";
      atmosphereResourceListenerAdapter0.onSuspended(string0);
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig2.startupHook(atmosphereConfig_StartupHook0);
      atmosphereConfig3.initComplete();
      String string1 = null;
      String string2 = atmosphereConfig0.getInitParameter(string1);
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereObjectFactory<AtmosphereResourceImpl> atmosphereObjectFactory0 = (AtmosphereObjectFactory<AtmosphereResourceImpl>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig4 = null;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }
}
