/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:46:49 GMT 2020
 */

package org.atmosphere.cpr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Proxy;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import org.atmosphere.cache.BroadcasterCacheInspector;
import org.atmosphere.config.AtmosphereHandlerConfig;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereFramework;
import org.atmosphere.cpr.AtmosphereInterceptor;
import org.atmosphere.cpr.AtmosphereObjectFactory;
import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceFactory;
import org.atmosphere.cpr.AtmosphereResourceImpl;
import org.atmosphere.cpr.AtmosphereResourceListenerAdapter;
import org.atmosphere.cpr.AtmosphereResourceSessionFactory;
import org.atmosphere.cpr.AtmosphereServlet;
import org.atmosphere.cpr.BroadcasterCacheListener;
import org.atmosphere.cpr.BroadcasterConfig;
import org.atmosphere.cpr.BroadcasterFactory;
import org.atmosphere.cpr.BroadcasterListenerAdapter;
import org.atmosphere.cpr.DefaultAtmosphereResourceFactory;
import org.atmosphere.cpr.DefaultBroadcasterFactory;
import org.atmosphere.cpr.MetaBroadcaster;
import org.atmosphere.cpr.MeteorServlet;
import org.atmosphere.cpr.Serializer;
import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
import org.atmosphere.util.AtmosphereFilterChain;
import org.atmosphere.util.EndpointMapper;
import org.atmosphere.util.UUIDProvider;
import org.atmosphere.websocket.WebSocket;
import org.atmosphere.websocket.WebSocketHandler;
import org.atmosphere.websocket.WebSocketHandlerAdapter;
import org.atmosphere.websocket.WebSocketProcessor;
import org.atmosphere.websocket.WebSocketProtocol;
import org.atmosphere.websocket.protocol.EchoProtocol;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtmosphereConfig_ESTest extends AtmosphereConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet();
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      String string0 = atmosphereServlet0.getServletInfo();
      String string1 = ";wh(&Z'wa!X";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setBroadcasterCacheClassName(string1);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      String string2 = null;
      int int0 = 162;
      Random.setNextRandom(int0);
      String string3 = ".initiated";
      boolean boolean0 = true;
      boolean boolean1 = atmosphereConfig0.getInitParameter(string3, boolean0);
      String string4 = atmosphereConfig0.getInitParameter(string2);
      DefaultAtmosphereResourceFactory defaultAtmosphereResourceFactory0 = new DefaultAtmosphereResourceFactory();
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "'2j*:WPzzO\"Ux";
      boolean boolean0 = true;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      BroadcasterCacheListener broadcasterCacheListener0 = mock(BroadcasterCacheListener.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addBroadcasterCacheListener(broadcasterCacheListener0);
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setUseStreamForFlushingComments(boolean0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.removeAllInitParams();
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.broadcasterLifeCyclePolicy(atmosphereFramework0.DEFAULT_HANDLER_PATH);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework5);
      atmosphereConfig0.initComplete();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig1.getBroadcasterFactory();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      atmosphereConfig2.initComplete();
      int int0 = (-2385);
      int int1 = atmosphereConfig0.getInitParameter(atmosphereFramework5.MAPPING_REGEX, int0);
      boolean boolean1 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig1.populate(atmosphereConfig0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      atmosphereConfig0.destroy();
      AtmosphereConfig atmosphereConfig4 = atmosphereConfig3.shutdownHook(atmosphereConfig_ShutdownHook0);
      WebSocketHandlerAdapter webSocketHandlerAdapter0 = new WebSocketHandlerAdapter();
      WebSocketProcessor.WebSocketHandlerProxy webSocketProcessor_WebSocketHandlerProxy0 = new WebSocketProcessor.WebSocketHandlerProxy(webSocketHandlerAdapter0);
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework3.addWebSocketHandler((WebSocketHandler) webSocketProcessor_WebSocketHandlerProxy0);
      // Undeclared exception!
      try { 
        atmosphereConfig3.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.framework();
      String string0 = "";
      boolean boolean1 = true;
      atmosphereFramework0.annotationFound = boolean1;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifyDestroyed(string0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      BroadcasterFactory broadcasterFactory0 = defaultBroadcasterFactory0.addBroadcasterListener(broadcasterListenerAdapter0);
      boolean boolean2 = true;
      atmosphereFramework0.executeFirstSet = boolean2;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.setUseStreamForFlushingComments(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.config;
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      boolean boolean3 = true;
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework0.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      atmosphereConfig0.setThrowExceptionOnCloned(boolean3);
      String string1 = "BGu";
      atmosphereFramework2.mappingRegex = string1;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig1.setSupportSession(boolean3);
      boolean boolean4 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      boolean boolean5 = false;
      atmosphereConfig2.setThrowExceptionOnCloned(boolean5);
      Map<String, Object> map0 = atmosphereConfig0.properties();
      // Undeclared exception!
      try { 
        atmosphereConfig2.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.allowAllClassesScan(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      LinkedList<AtmosphereHandlerConfig> linkedList0 = new LinkedList<AtmosphereHandlerConfig>();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      atmosphereConfig0.setSupportSession(boolean0);
      boolean boolean1 = atmosphereConfig0.isThrowExceptionOnCloned();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.excludeInterceptor(atmosphereFramework0.META_SERVICE);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.init();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      EndpointMapper<AtmosphereFramework.AtmosphereHandlerWrapper> endpointMapper0 = atmosphereFramework2.endPointMapper();
      atmosphereFramework3.endpointMapper = endpointMapper0;
      atmosphereFramework2.allowAllClassesScan = boolean0;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework3.addCustomAnnotationPackage(class0);
      String string2 = atmosphereConfig1.getInitParameter(string1);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      atmosphereConfig2.setThrowExceptionOnCloned(boolean3);
      atmosphereConfig0.destroy();
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      atmosphereConfig1.destroy();
      boolean boolean4 = atmosphereConfig2.getInitParameter(atmosphereFramework1.DEFAULT_LIB_PATH, boolean2);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet();
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      String string0 = atmosphereServlet0.getServletInfo();
      String string1 = ";wh(&Z'wa!X";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setBroadcasterCacheClassName(string1);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletContext();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = ".bBM";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setLibPath(string0);
      String string1 = "}";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setWebsocketProcessorClassName(string1);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.externalizeDestroy(boolean0);
      atmosphereFramework2.configureBroadcasterFactory();
      atmosphereFramework3.onPreDestroy();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      String string2 = "|~k&@sD";
      String string3 = "oMy-&vD(^L8FtI/XX9";
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework0.notifySuspended(string3);
      EchoProtocol echoProtocol0 = new EchoProtocol();
      atmosphereFramework0.webSocketProtocol = (WebSocketProtocol) echoProtocol0;
      atmosphereFramework3.mappingRegex = string2;
      AtmosphereFilterChain atmosphereFilterChain0 = new AtmosphereFilterChain();
      ServletConfig servletConfig0 = atmosphereFilterChain0.getServletConfig();
      boolean boolean1 = atmosphereFramework1.detectSupportedFramework(servletConfig0);
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      AtmosphereResourceSessionFactory atmosphereResourceSessionFactory0 = atmosphereConfig0.sessionFactory();
      atmosphereConfig0.destroy();
      UUIDProvider uUIDProvider0 = atmosphereConfig0.uuidProvider();
      String string4 = "org.atmosphere.interceptor.WebSocketMessageSuspendInterceptor";
      boolean boolean3 = false;
      boolean boolean4 = atmosphereConfig0.getInitParameter(string4, boolean3);
      String string5 = atmosphereConfig0.getInitParameter(atmosphereFramework4.META_SERVICE, string0);
      boolean boolean5 = atmosphereConfig0.isThrowExceptionOnCloned();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      String string0 = "xQA";
      String string1 = atmosphereConfig0.getInitParameter(string0);
      String string2 = "Error trying to instantiate BroadcastFilter: {}";
      boolean boolean0 = true;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean0);
      int int0 = (-2261);
      String string3 = null;
      int int1 = 2190;
      int int2 = atmosphereConfig0.getInitParameter(string3, int1);
      int int3 = atmosphereConfig0.getInitParameter(string2, int0);
      Map<String, Object> map0 = atmosphereConfig0.properties();
      boolean boolean1 = true;
      String string4 = "";
      String string5 = "oLSkeLKWp^^~?8n";
      AtmosphereConfig atmosphereConfig1 = new AtmosphereConfig(atmosphereFramework0);
      List<AtmosphereConfig.StartupHook> list0 = atmosphereConfig1.startUpHook;
      atmosphereConfig0.startUpHook = list0;
      String string6 = atmosphereConfig0.getInitParameter(string4, string5);
      boolean boolean2 = atmosphereConfig0.getInitParameter(string3, boolean1);
      // Undeclared exception!
      try { 
        atmosphereConfig0.metaBroadcaster();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.excludeInterceptor(atmosphereFramework0.META_SERVICE);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      atmosphereFramework2.allowAllClassesScan = boolean0;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.getAtmosphereConfig();
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.addCustomAnnotationPackage(class0);
      String string2 = atmosphereConfig1.getInitParameter(string1);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      atmosphereConfig2.setThrowExceptionOnCloned(boolean3);
      atmosphereConfig0.destroy();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      MetaBroadcaster metaBroadcaster0 = atmosphereConfig0.metaBroadcaster();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean1);
      BroadcasterFactory broadcasterFactory0 = atmosphereFramework0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.allowAllClassesScan(boolean1);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework1);
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      AtmosphereResourceFactory atmosphereResourceFactory0 = atmosphereConfig0.resourcesFactory();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.setLibPath(atmosphereFramework0.MAPPING_REGEX);
      atmosphereConfig0.setSupportSession(boolean1);
      boolean boolean2 = atmosphereConfig0.isThrowExceptionOnCloned();
      atmosphereConfig0.initComplete();
      ServletConfig servletConfig0 = atmosphereConfig0.getServletConfig();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getWebServerName();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereServlet atmosphereServlet0 = new AtmosphereServlet(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework0 = atmosphereServlet0.newAtmosphereFramework();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      AtmosphereConfig.StartupHook atmosphereConfig_StartupHook0 = mock(AtmosphereConfig.StartupHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.startupHook(atmosphereConfig_StartupHook0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.setWebsocketProcessorClassName(string0);
      String string1 = "NPE after the message has been written for {}";
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.mappingRegex(string1);
      AtmosphereResourceListenerAdapter atmosphereResourceListenerAdapter0 = new AtmosphereResourceListenerAdapter();
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.atmosphereResourceListener(atmosphereResourceListenerAdapter0);
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework3);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "j,dXqX@}*\"";
      String string1 = null;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.addInitParameter(string0, string1);
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework2.newAtmosphereConfig();
      boolean boolean0 = true;
      atmosphereConfig0.setSupportSession(boolean0);
      atmosphereFramework2.onPreDestroy();
      String string2 = "Qk]!2PSzU uy8O";
      String string3 = atmosphereConfig0.getInitParameter(atmosphereFramework1.DEFAULT_ATMOSPHERE_CONFIG_PATH, string2);
      boolean boolean1 = false;
      atmosphereConfig0.setSessionTimeoutRemovalAllowed(boolean1);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getInitParameterNames();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean1);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.init();
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      AtmosphereFramework.AtmosphereHandlerWrapper atmosphereFramework_AtmosphereHandlerWrapper0 = null;
      try {
        atmosphereFramework_AtmosphereHandlerWrapper0 = new AtmosphereFramework.AtmosphereHandlerWrapper(defaultBroadcasterFactory0, atmosphereFramework1.REFLECTOR_ATMOSPHEREHANDLER, atmosphereFramework0.MAPPING_REGEX);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework$AtmosphereHandlerWrapper", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      AtmosphereConfig atmosphereConfig1 = null;
      // Undeclared exception!
      try { 
        atmosphereConfig0.populate(atmosphereConfig1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "p64yUOKG'$dok+)";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifySuspended(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifyDestroyed(atmosphereFramework0.MAPPING_REGEX);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.webSocketEnabled(boolean0);
      BroadcasterConfig.FilterManipulator broadcasterConfig_FilterManipulator0 = mock(BroadcasterConfig.FilterManipulator.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.filterManipulator(broadcasterConfig_FilterManipulator0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.sessionFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      // Undeclared exception!
      try { 
        atmosphereConfig0.getServletConfig();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = null;
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      String string0 = "skip attribute %s";
      String string1 = null;
      int int0 = 0;
      int int1 = atmosphereConfig0.getInitParameter(string1, int0);
      atmosphereConfig0.initComplete();
      // Undeclared exception!
      try { 
        atmosphereConfig0.getBroadcasterFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework();
      String string0 = "p64yUOKG'$dok+)";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifySuspended(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.notifyDestroyed(atmosphereFramework0.MAPPING_REGEX);
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.webSocketEnabled(boolean0);
      BroadcasterConfig.FilterManipulator broadcasterConfig_FilterManipulator0 = mock(BroadcasterConfig.FilterManipulator.class, new ViolatedAssumptionAnswer());
      String string1 = "oRJ";
      String string2 = atmosphereFramework1.lookupDefaultBroadcasterType(string1);
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework3.filterManipulator(broadcasterConfig_FilterManipulator0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework4.getAtmosphereConfig();
      Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> map0 = atmosphereConfig0.handlers();
      AtmosphereFramework atmosphereFramework5 = atmosphereConfig0.framework();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.excludeInterceptor(atmosphereFramework0.META_SERVICE);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.init();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      EndpointMapper<AtmosphereFramework.AtmosphereHandlerWrapper> endpointMapper0 = atmosphereFramework2.endPointMapper();
      atmosphereFramework3.endpointMapper = endpointMapper0;
      atmosphereFramework2.allowAllClassesScan = boolean0;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework3.addCustomAnnotationPackage(class0);
      String string2 = atmosphereConfig1.getInitParameter(string1);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      atmosphereConfig2.setThrowExceptionOnCloned(boolean3);
      atmosphereConfig0.destroy();
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      atmosphereConfig1.destroy();
      boolean boolean4 = atmosphereConfig2.getInitParameter(atmosphereFramework1.DEFAULT_LIB_PATH, boolean2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      MeteorServlet meteorServlet0 = new MeteorServlet(boolean0);
      AtmosphereFramework atmosphereFramework0 = meteorServlet0.framework();
      String string0 = "";
      boolean boolean1 = true;
      atmosphereFramework0.annotationFound = boolean1;
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.notifyDestroyed(string0);
      DefaultBroadcasterFactory defaultBroadcasterFactory0 = new DefaultBroadcasterFactory();
      BroadcasterListenerAdapter broadcasterListenerAdapter0 = new BroadcasterListenerAdapter();
      BroadcasterFactory broadcasterFactory0 = defaultBroadcasterFactory0.addBroadcasterListener(broadcasterListenerAdapter0);
      boolean boolean2 = true;
      atmosphereFramework0.executeFirstSet = boolean2;
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework0.init();
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework3.config;
      List<AtmosphereHandlerConfig> list0 = atmosphereConfig0.getAtmosphereHandlerConfig();
      boolean boolean3 = true;
      BroadcasterCacheInspector broadcasterCacheInspector0 = mock(BroadcasterCacheInspector.class, new ViolatedAssumptionAnswer());
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework0.addBroadcasterCacheInjector(broadcasterCacheInspector0);
      atmosphereConfig0.setThrowExceptionOnCloned(boolean3);
      String string1 = "BGu";
      atmosphereFramework2.mappingRegex = string1;
      atmosphereConfig0.setThrowExceptionOnCloned(boolean0);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig1 = atmosphereConfig0.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig1.setSupportSession(boolean3);
      boolean boolean4 = atmosphereConfig0.isSessionTimeoutRemovalAllowed();
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig0.populate(atmosphereConfig1);
      boolean boolean5 = false;
      atmosphereConfig2.setThrowExceptionOnCloned(boolean5);
      Map<String, Object> map0 = atmosphereConfig0.properties();
      Proxy proxy0 = (Proxy)atmosphereConfig2.getServletContext();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.shareExecutorServices(boolean0);
      AtmosphereObjectFactory<String> atmosphereObjectFactory0 = (AtmosphereObjectFactory<String>) mock(AtmosphereObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(atmosphereObjectFactory0).newClassInstance(nullable(java.lang.Class.class) , nullable(java.lang.Class.class));
      atmosphereFramework1.objectFactory(atmosphereObjectFactory0);
      BroadcasterFactory broadcasterFactory0 = atmosphereFramework0.getBroadcasterFactory();
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework0.allowAllClassesScan(boolean0);
      AtmosphereConfig atmosphereConfig0 = atmosphereFramework0.newAtmosphereConfig();
      LinkedList<AtmosphereHandlerConfig> linkedList0 = new LinkedList<AtmosphereHandlerConfig>();
      // Undeclared exception!
      try { 
        atmosphereConfig0.resourcesFactory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.atmosphere.cpr.AtmosphereFramework", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.excludeInterceptor(atmosphereFramework0.META_SERVICE);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework1.init();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      EndpointMapper<AtmosphereFramework.AtmosphereHandlerWrapper> endpointMapper0 = atmosphereFramework3.endPointMapper();
      atmosphereFramework2.allowAllClassesScan = boolean0;
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework2.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework4.getAtmosphereConfig();
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework2.addCustomAnnotationPackage(class0);
      String string2 = atmosphereConfig0.getWebServerName();
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      atmosphereConfig2.initComplete();
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      atmosphereConfig0.destroy();
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      atmosphereConfig1.destroy();
      boolean boolean4 = atmosphereConfig2.getInitParameter(atmosphereFramework1.DEFAULT_LIB_PATH, boolean2);
      String string3 = atmosphereConfig1.getWebServerName();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      boolean boolean0 = true;
      AtmosphereFramework atmosphereFramework0 = new AtmosphereFramework(boolean0, boolean0);
      String string0 = "";
      AtmosphereFramework atmosphereFramework1 = atmosphereFramework0.broadcasterLifeCyclePolicy(string0);
      AtmosphereFramework atmosphereFramework2 = atmosphereFramework1.excludeInterceptor(atmosphereFramework0.META_SERVICE);
      AtmosphereFramework atmosphereFramework3 = atmosphereFramework2.destroy();
      AtmosphereFramework atmosphereFramework4 = atmosphereFramework1.init();
      AtmosphereConfig atmosphereConfig0 = new AtmosphereConfig(atmosphereFramework0);
      BroadcasterFactory broadcasterFactory0 = atmosphereConfig0.getBroadcasterFactory();
      EndpointMapper<AtmosphereFramework.AtmosphereHandlerWrapper> endpointMapper0 = atmosphereFramework2.endPointMapper();
      atmosphereFramework3.endpointMapper = endpointMapper0;
      atmosphereFramework2.allowAllClassesScan = boolean0;
      AtmosphereFramework atmosphereFramework5 = atmosphereFramework3.setBroadcasterFactory(broadcasterFactory0);
      AtmosphereConfig atmosphereConfig1 = atmosphereFramework5.getAtmosphereConfig();
      String string1 = "+}Z0CX%1,Ao+aD";
      Class<AtmosphereConfig> class0 = AtmosphereConfig.class;
      AtmosphereFramework atmosphereFramework6 = atmosphereFramework3.addCustomAnnotationPackage(class0);
      String string2 = atmosphereConfig1.getInitParameter(string1);
      boolean boolean1 = atmosphereConfig0.isSupportSession();
      boolean boolean2 = atmosphereConfig0.isSupportSession();
      String string3 = null;
      AtmosphereFramework atmosphereFramework7 = atmosphereFramework3.setLibPath(string3);
      atmosphereConfig1.setSessionTimeoutRemovalAllowed(boolean1);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook0 = mock(AtmosphereConfig.ShutdownHook.class, new ViolatedAssumptionAnswer());
      AtmosphereConfig atmosphereConfig2 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook0);
      boolean boolean3 = atmosphereConfig0.isSupportSession();
      atmosphereConfig2.setThrowExceptionOnCloned(boolean3);
      AtmosphereConfig.ShutdownHook atmosphereConfig_ShutdownHook1 = null;
      AtmosphereConfig atmosphereConfig3 = atmosphereConfig1.shutdownHook(atmosphereConfig_ShutdownHook1);
      atmosphereConfig0.destroy();
      Enumeration<String> enumeration0 = atmosphereConfig1.getInitParameterNames();
      atmosphereConfig1.destroy();
      boolean boolean4 = atmosphereConfig2.getInitParameter(atmosphereFramework1.DEFAULT_LIB_PATH, boolean2);
      String string4 = "WJy%ajq7my^lw@5:tJ";
      boolean boolean5 = false;
      boolean boolean6 = atmosphereConfig1.getInitParameter(string4, boolean5);
  }
}
