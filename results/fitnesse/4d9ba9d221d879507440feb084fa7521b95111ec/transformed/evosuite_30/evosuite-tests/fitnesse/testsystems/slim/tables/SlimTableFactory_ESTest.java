/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 06:38:32 GMT 2020
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContext;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimErrorTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import org.eclipse.jgit.api.SubmoduleSyncCommand;
import org.eclipse.jgit.storage.dfs.DfsRepositoryDescription;
import org.eclipse.jgit.storage.dfs.InMemoryRepository;
import org.eclipse.jgit.storage.file.FileRepository;
import org.eclipse.jgit.treewalk.filter.IndexDiffFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.htmlparser.Node;
import org.htmlparser.tags.FormTag;
import org.htmlparser.tags.InputTag;
import org.htmlparser.tags.TableTag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      slimTableFactory0.tableTypeArrays = (Map<String, String>) hashtable0;
      String string0 = "";
      String string1 = "e";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory0.addTableType(string1, class0);
      String string2 = slimTableFactory0.getFullTableName(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string3 = hashtable0.put(string1, string2);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "as";
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = "'VN2Mamh'J.p6$c>";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string2);
      Class<QueryTable> class1 = QueryTable.class;
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = "#";
      String string3 = slimTableFactory0.makeTableType(string2);
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string1, class0);
      String string4 = "}>rSxuhak2_x]/6|j";
      String string5 = slimTableFactory0.makeTableType(string4);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = null;
      Map<String, String> map0 = slimTableFactory0.tableTypeArrays;
      slimTableFactory0.tableTypeArrays = map0;
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "yi-ij%/!keMr?>D";
      String string1 = "lF";
      DfsRepositoryDescription dfsRepositoryDescription0 = new DfsRepositoryDescription(string1);
      InMemoryRepository inMemoryRepository0 = new InMemoryRepository(dfsRepositoryDescription0);
      SubmoduleSyncCommand submoduleSyncCommand0 = new SubmoduleSyncCommand(inMemoryRepository0);
      SubmoduleSyncCommand submoduleSyncCommand1 = submoduleSyncCommand0.addPath(string0);
      // Undeclared exception!
      try { 
        submoduleSyncCommand1.call();
      } catch(IllegalStateException e) {
         //
         // Bare Repository has neither a working tree, nor an index
         //
         verifyException("org.eclipse.jgit.lib.Repository", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Class<DecisionTable> class0 = DecisionTable.class;
      Table table0 = null;
      String string0 = "";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      SlimTable slimTable0 = slimTableFactory1.newTableForType(class0, table0, string0, slimTestContextImpl0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "dynamic decision:";
      String string1 = slimTableFactory0.getFullTableName(string0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = "decision:";
      String string2 = slimTableFactory0.makeTableType(string1);
      String string3 = " BS4v[v&";
      FileRepository fileRepository0 = new FileRepository(string3);
      SubmoduleSyncCommand submoduleSyncCommand0 = new SubmoduleSyncCommand(fileRepository0);
      // Undeclared exception!
      try { 
        submoduleSyncCommand0.call();
      } catch(IllegalStateException e) {
         //
         // Bare Repository has neither a working tree, nor an index
         //
         verifyException("org.eclipse.jgit.lib.Repository", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "=R?";
      String string1 = slimTableFactory1.getFullTableName(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      String string0 = "scenario";
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named 'scenario' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<DecisionTable> class0 = DecisionTable.class;
      Class<DecisionTable> class1 = DecisionTable.class;
      slimTableFactory0.addTableType(string0, class1);
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named '' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      Table table0 = null;
      String string0 = "";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      String string1 = "";
      slimTestContextImpl0.clearTestSummary();
      // Undeclared exception!
      try { 
        slimTableFactory2.makeSlimTable(table0, string1, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "dt:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      Table table0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      slimTableFactory1.tableTypeArrays = slimTableFactory0.tableTypeArrays;
      String string0 = "']8";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = slimTableFactory1.makeTableType(string0);
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      Table table0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        slimTableFactory2.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      HashMap<String, Class<SlimErrorTable>> hashMap0 = new HashMap<String, Class<SlimErrorTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      String string0 = "";
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Class<LibraryTable> class0 = LibraryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      String string1 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "i \"'L\"tu58";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.hasColon(string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = null;
      Class<ScriptTable> class0 = ScriptTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string2, class0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "define table type";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = "[Tqr%&A>,ooEnv'";
      String string3 = slimTableFactory0.makeTableType(string2);
      String string4 = "";
      String string5 = slimTableFactory0.getFullTableName(string4);
      Class<OrderedQueryTable> class2 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string2, class2);
      String string6 = "' already exists";
      Map<String, String> map0 = null;
      slimTableFactory0.tableTypeArrays = map0;
      Class<OrderedQueryTable> class3 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string6, class3);
      // Undeclared exception!
      try { 
        slimTableFactory0.copy();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
