/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 05:48:16 GMT 2020
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.ExecutionResult;
import fitnesse.testsystems.TestResult;
import fitnesse.testsystems.TestSummary;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContext;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.results.SlimExceptionResult;
import fitnesse.testsystems.slim.results.SlimTestResult;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.eclipse.jgit.api.SubmoduleSyncCommand;
import org.eclipse.jgit.storage.dfs.DfsRepositoryDescription;
import org.eclipse.jgit.storage.dfs.InMemoryRepository;
import org.eclipse.jgit.storage.file.ReflogReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.htmlparser.Attribute;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "]FngE28%6A:-";
      String string1 = slimTableFactory0.makeTableType(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string0);
      String string2 = "sw0T<GixjtH\"2r_a";
      Class<QueryTable> class1 = QueryTable.class;
      slimTableFactory1.addTableType(string2, class1);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "go$<0~kfXfs}{";
      Class<QueryTable> class0 = QueryTable.class;
      DfsRepositoryDescription dfsRepositoryDescription0 = new DfsRepositoryDescription(string0);
      InMemoryRepository inMemoryRepository0 = new InMemoryRepository(dfsRepositoryDescription0);
      String string1 = dfsRepositoryDescription0.toString();
      SubmoduleSyncCommand submoduleSyncCommand0 = new SubmoduleSyncCommand(inMemoryRepository0);
      // Undeclared exception!
      try { 
        submoduleSyncCommand0.call();
      } catch(IllegalStateException e) {
         //
         // Bare Repository has neither a working tree, nor an index
         //
         verifyException("org.eclipse.jgit.lib.Repository", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "A table type named '";
      Class<LibraryTable> class0 = LibraryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      slimTableFactory0.addTableType(string0, class0);
      String string1 = "comment";
      String string2 = slimTableFactory0.makeTableType(string1);
      String string3 = "";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string3);
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string0);
      Table table0 = null;
      int int0 = 32;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = slimTableFactory0.makeTableType(string0);
      String string3 = slimTableFactory0.makeTableType(string2);
      Class<ImportTable> class0 = ImportTable.class;
      Table table0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      slimTestContextImpl0.incrementPassedTestsCount();
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContextImpl0);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "O";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = "Step[";
      boolean boolean0 = slimTableFactory0.hasColon(string2);
      String string3 = "comment";
      int int0 = 1168;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(int0);
      slimTableFactory0.tableTypeArrays = (Map<String, String>) hashMap0;
      String string4 = slimTableFactory0.makeTableType(string3);
      String string5 = "4Pcz";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string5);
      Class<ScenarioTable> class2 = ScenarioTable.class;
      TableTag tableTag0 = new TableTag();
      NodeList nodeList0 = tableTag0.searchFor(string5, boolean0);
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "k:RIDyc&Zi/kdCJ";
      String string1 = slimTableFactory0.getFullTableName(string0);
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      boolean boolean1 = slimTableFactory0.hasColon(string1);
      String string2 = "";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      slimTableFactory0.addTableType(string2, class0);
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      Class<SubsetQueryTable> class1 = SubsetQueryTable.class;
      slimTableFactory1.tableTypeArrays = slimTableFactory0.tableTypeArrays;
      slimTableFactory2.addTableType(string0, class1);
      String string3 = slimTableFactory2.getFullTableName(string0);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "query:";
      String string1 = slimTableFactory1.makeTableType(string0);
      int int0 = (-3414);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "a>|{";
      String string1 = slimTableFactory0.getFullTableName(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
      String string1 = "";
      boolean boolean1 = slimTableFactory0.hasColon(string1);
      String string2 = "decision:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      String string0 = "<8QGFpt";
      SlimTestContext slimTestContext0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContext0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "script";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory1.addTableType(string0, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named 'script' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = "";
      HashMap<String, Class<QueryTable>> hashMap0 = new HashMap<String, Class<QueryTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      Class<DecisionTable> class0 = DecisionTable.class;
      slimTableFactory0.addTableType(string1, class0);
      Class<TableTable> class1 = TableTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class1);
      } catch(IllegalStateException e) {
         //
         // A table type named '' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      int int0 = 16;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "g<XQ*AW>u,T,HqBOA";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      Class<ImportTable> class1 = ImportTable.class;
      slimTableFactory0.addTableType(string0, class1);
      slimTableFactory0.addTableType(string0, class0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string1 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeTableType(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.hasColon(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "N?z(^naZB!*_6fE";
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = null;
      Class<DecisionTable> class0 = DecisionTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string2, class0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }
}
