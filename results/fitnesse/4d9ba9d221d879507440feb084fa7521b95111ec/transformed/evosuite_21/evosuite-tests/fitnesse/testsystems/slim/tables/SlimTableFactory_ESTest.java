/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 05:09:43 GMT 2020
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.TestResult;
import fitnesse.testsystems.TestSummary;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.htmlparser.Node;
import org.htmlparser.tags.TableTag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "define table type";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
      HashMap<String, Class<QueryTable>> hashMap0 = new HashMap<String, Class<QueryTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      String string1 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string1);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = " reuseAsIs";
      String string1 = slimTableFactory0.getFullTableName(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string2 = ">lQEO9*";
      Class<DecisionTable> class0 = DecisionTable.class;
      slimTableFactory0.addTableType(string1, class0);
      String string3 = slimTableFactory0.makeTableType(string2);
      Class<ImportTable> class1 = ImportTable.class;
      slimTableFactory0.addTableType(string1, class1);
      String string4 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      TableTag tableTag0 = new TableTag();
      Vector<String> vector0 = new Vector<String>();
      tableTag0.setAttributesEx(vector0);
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<DecisionTable> class0 = DecisionTable.class;
      slimTableFactory0.addTableType(string0, class0);
      Class<OrderedQueryTable> class1 = OrderedQueryTable.class;
      Table table0 = null;
      String string1 = "7aBflxt{:1tQ:";
      String string2 = "";
      String string3 = slimTableFactory0.getFullTableName(string2);
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      TestSummary testSummary0 = new TestSummary();
      slimTestContextImpl0.increment(testSummary0);
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class1, table0, string1, slimTestContextImpl0);
      Map<String, Class<LibraryTable>> map0 = null;
      slimTableFactory0.tableTypes = map0;
      int int0 = 1358;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      TableTag tableTag0 = null;
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      Class<ScenarioTable> class0 = ScenarioTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.makeTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      String string0 = "";
      Class<DynamicDecisionTable> class0 = DynamicDecisionTable.class;
      slimTableFactory1.addTableType(string0, class0);
      String string1 = "dynamic decision:";
      Class<? extends SlimTable> class1 = slimTableFactory2.getTableType(string1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "FRAME TAG : Frame ";
      String string1 = slimTableFactory0.getFullTableName(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      String string0 = "library";
      Class<ImportTable> class0 = ImportTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named 'library' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      int int0 = (-1867);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      Class<QueryTable> class0 = QueryTable.class;
      Class<ScriptTable> class1 = ScriptTable.class;
      String string1 = "org.eclipse.jgit.storage.file.LocalCachedPack";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      String string2 = "!m{v1q91<whi|6&H]&,";
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.makeSlimTable(table0, string1, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "Y\\v\\~I[C&y+7(A4";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = "org.eclipse.jgit.api.errors.InvalidRemoteException";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      Table table0 = null;
      String string3 = "0fuGfaLL 2k/V45";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string3, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      TableTag tableTag0 = new TableTag();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      Table.CellContentSubstitution table_CellContentSubstitution0 = mock(Table.CellContentSubstitution.class, new ViolatedAssumptionAnswer());
      int int0 = 16;
      String string0 = " RT^$'L5[";
      String string1 = slimTableFactory2.getFullTableName(string0);
      String string2 = "table:";
      String string3 = slimTableFactory1.makeTableType(string2);
      String string4 = slimTableFactory1.getFullTableName(string2);
      Table table0 = null;
      int int1 = (-325);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }
}
