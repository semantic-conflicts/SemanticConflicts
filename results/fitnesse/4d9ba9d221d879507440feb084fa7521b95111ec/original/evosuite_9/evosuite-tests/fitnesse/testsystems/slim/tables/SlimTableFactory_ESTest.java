/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 28 23:33:12 GMT 2020
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.slim.instructions.Instruction;
import fitnesse.testsystems.ExecutionResult;
import fitnesse.testsystems.TestSummary;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.results.SlimExceptionResult;
import fitnesse.testsystems.slim.results.SlimTestResult;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.htmlparser.tags.TableTag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Table table0 = null;
      String string0 = "";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "subset query:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = null;
      Table.CellContentSubstitution table_CellContentSubstitution0 = mock(Table.CellContentSubstitution.class, new ViolatedAssumptionAnswer());
      String string2 = "Rn68/";
      String string3 = slimTableFactory0.makeTableType(string2);
      String string4 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      HashMap<String, Class<ScenarioTable>> hashMap0 = new HashMap<String, Class<ScenarioTable>>();
      Class<ScenarioTable> class0 = ScenarioTable.class;
      Class<ScenarioTable> class1 = hashMap0.getOrDefault(slimTableFactory0, class0);
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      String string0 = "RfHGh?`a^Z#H`eNG#j9";
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string0);
      String string1 = "org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry";
      Class<ScenarioTable> class3 = hashMap0.put(string0, class1);
      String string2 = slimTableFactory0.makeTableType(string1);
      Class<SubsetQueryTable> class4 = SubsetQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class4);
      } catch(IllegalStateException e) {
         //
         // A table type named 'RfHGh?`a^Z#H`eNG#j9' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      String string0 = "8i";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      slimTestContextImpl0.incrementErroredTestsCount();
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContextImpl0);
      int int0 = (-1615);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Table.CellContentSubstitution table_CellContentSubstitution0 = mock(Table.CellContentSubstitution.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Hashtable<String, Class<TableTable>> hashtable0 = new Hashtable<String, Class<TableTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashtable0;
      String string0 = "?^1[d";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      slimTableFactory0.addTableType(string0, class0);
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = "~+M";
      String string3 = slimTableFactory0.getFullTableName(string2);
      String string4 = "`;kia2#p~#^\\],Ll";
      Class<SubsetQueryTable> class1 = SubsetQueryTable.class;
      slimTableFactory0.addTableType(string4, class1);
      String string5 = "Y3enB|U=t2U";
      String string6 = slimTableFactory0.makeTableType(string5);
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string4);
      boolean boolean0 = slimTableFactory0.hasColon(string6);
      String string7 = "0<4F<n8g 416/Pzk}Q8";
      String string8 = slimTableFactory0.getFullTableName(string7);
      TableTag tableTag0 = new TableTag();
      Table.CellContentSubstitution table_CellContentSubstitution0 = mock(Table.CellContentSubstitution.class, new ViolatedAssumptionAnswer());
      String string9 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      TestSummary testSummary0 = slimTestContextImpl0.getTestSummary();
      testSummary0.add(testSummary0);
      ExecutionResult executionResult0 = ExecutionResult.ERROR;
      slimTestContextImpl0.increment(executionResult0);
      slimTestContextImpl0.increment(testSummary0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "METHOD";
      String string1 = slimTableFactory1.makeTableType(string0);
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "comment";
      String string1 = "`u1Jm:4";
      String string2 = slimTableFactory0.getFullTableName(string1);
      String string3 = slimTableFactory1.makeTableType(string2);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      long long0 = 571L;
      System.setCurrentTimeMillis(long0);
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "}X5 AZF$>68B:MFx(";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = slimTableFactory1.makeTableType(string0);
      String string2 = "asY3enm|U=t2U";
      String string3 = slimTableFactory0.makeTableType(string2);
      int int0 = 1429;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      int int1 = 2;
      SlimExceptionResult slimExceptionResult0 = null;
      String string4 = "h5uh&A<ZL-7";
      String string5 = slimTableFactory0.getFullTableName(string4);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = ";qM!-Q9b:E]wvVC u3";
      String string1 = slimTableFactory0.getFullTableName(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      slimTableFactory0.tableTypes = slimTableFactory1.tableTypes;
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.getFullTableName(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "";
      String string1 = slimTableFactory1.makeTableType(string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "Ww).~";
      String string1 = slimTableFactory0.getFullTableName(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      slimTableFactory0.tableTypeArrays = (Map<String, String>) hashtable0;
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = "yTrw^";
      String string2 = slimTableFactory0.getFullTableName(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "(WNDdQ";
      boolean boolean0 = slimTableFactory1.hasColon(string0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.makeTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "$\"^Vmt,g%F[e\"/";
      String string1 = slimTableFactory0.makeTableType(string0);
      Table table0 = null;
      int int0 = 2;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string1 = "comment";
      Class<DecisionTable> class1 = DecisionTable.class;
      slimTableFactory1.addTableType(string1, class1);
      String string2 = "`u1Jm:4";
      String string3 = slimTableFactory0.getFullTableName(string2);
      String string4 = slimTableFactory1.makeTableType(string3);
      Class<ScriptTable> class2 = ScriptTable.class;
      slimTableFactory1.addTableType(string4, class2);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "subset query:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = "org.eclipse.jgit.api.CherryPickResult";
      String string2 = slimTableFactory0.makeTableType(string1);
      String string3 = "";
      String string4 = "v\"Rs+eAo6";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string4);
      String string5 = slimTableFactory0.makeTableType(string3);
      boolean boolean0 = slimTableFactory0.hasColon(string3);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = ".[eJ1[A(&)j";
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = null;
      Class<LibraryTable> class0 = LibraryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory1.addTableType(string0, class0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "asSuiteSetUp";
      String string1 = "K_;+Xvd'yfWbbZ7Z9R";
      String string2 = slimTableFactory0.makeTableType(string0);
      String string3 = "";
      boolean boolean0 = slimTableFactory0.hasColon(string3);
      String string4 = "git-upload-pack";
      boolean boolean1 = slimTableFactory0.hasColon(string4);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string1 = "comment";
      Class<DecisionTable> class1 = DecisionTable.class;
      slimTableFactory1.addTableType(string1, class1);
      String string2 = slimTableFactory0.getFullTableName(string1);
      String string3 = slimTableFactory1.makeTableType(string2);
      Class<ScriptTable> class2 = ScriptTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory1.addTableType(string3, class2);
      } catch(IllegalStateException e) {
         //
         // A table type named 'comment' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      String string0 = "";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      Class<ScenarioTable> class0 = ScenarioTable.class;
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContextImpl0);
      String string1 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Map<String, String> map0 = null;
      slimTableFactory0.tableTypeArrays = map0;
      // Undeclared exception!
      try { 
        slimTableFactory0.copy();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
