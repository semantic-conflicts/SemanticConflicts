/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 28 23:15:11 GMT 2020
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.ExecutionResult;
import fitnesse.testsystems.TestSummary;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContext;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimErrorTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.htmlparser.Tag;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "d}:";
      String string1 = slimTableFactory0.getFullTableName(string0);
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "";
      String string1 = slimTableFactory0.makeTableType(string0);
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      String string2 = "subset query:";
      // Undeclared exception!
      try { 
        slimTableFactory1.addTableType(string2, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named 'subset query:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "";
      String string1 = slimTableFactory1.getFullTableName(string0);
      String string2 = "OGi9Qa}@q*'9E8";
      String string3 = "ms9|Q";
      String string4 = slimTableFactory0.getFullTableName(string3);
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Class<TableTable> class0 = TableTable.class;
      Table table0 = null;
      String string0 = "XsO@U";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      slimTestContextImpl0.incrementErroredTestsCount();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestSummary testSummary0 = slimTestContextImpl0.getTestSummary();
      slimTestContextImpl0.increment(testSummary0);
      slimTestContextImpl0.incrementFailedTestsCount();
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContextImpl0);
      String string1 = slimTableFactory0.makeTableType(string0);
      boolean boolean1 = slimTableFactory0.hasColon(string0);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, testSummary0.exceptions);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = new SlimTableFactory();
      Table table0 = null;
      String string0 = "ddt:";
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "*<MJU&d1(";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = "_WPv1wM";
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string1);
      Table table0 = null;
      String string2 = "qu";
      SlimTestContext slimTestContext0 = null;
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string2, slimTestContext0);
      String string3 = slimTableFactory0.makeTableType(string0);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "asOGi9Qa}@q*'9E8";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = "iK6k%9$$<C";
      String string3 = slimTableFactory0.makeTableType(string0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      TableTag tableTag0 = new TableTag();
      String string0 = "comment:";
      String string1 = slimTableFactory0.makeTableType(string0);
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "cuFdI";
      String string1 = slimTableFactory0.makeTableType(string0);
      long long0 = (-2546L);
      System.setCurrentTimeMillis(long0);
      String string2 = slimTableFactory0.makeTableType(string1);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.makeTableType(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "XQN$u>k[";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "as";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "Can not create new table instance for class ";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
      String string1 = slimTableFactory0.getFullTableName(string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "(lp[>uPJ0 >E_";
      Class<DynamicDecisionTable> class0 = DynamicDecisionTable.class;
      slimTableFactory0.addTableType(string0, class0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<DecisionTable> class0 = DecisionTable.class;
      slimTableFactory0.addTableType(string0, class0);
      String string1 = "bash";
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string2, class0);
      } catch(IllegalStateException e) {
         //
         // A table type named '' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "~TKg)2u:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = "subset query:";
      Class<QueryTable> class1 = QueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string1, class1);
      } catch(IllegalStateException e) {
         //
         // A table type named 'subset query:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      Table table0 = null;
      String string0 = "1qj<wD";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      String string1 = "XC";
      Table table1 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      String string0 = "p$gPhsxXd";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory1.addTableType(string0, class0);
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Table table0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      slimTableFactory0.tableTypeArrays = (Map<String, String>) hashMap0;
      String string0 = "XbFc`sk}e~pv+93";
      String string1 = slimTableFactory0.makeTableType(string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      boolean boolean0 = slimTableFactory0.hasColon(string0);
      Class<LibraryTable> class1 = LibraryTable.class;
      Table table0 = null;
      String string1 = "[u9l9L%!'H_WVJNx{tZ";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      slimTestContextImpl0.incrementErroredTestsCount();
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class1, table0, string1, slimTestContextImpl0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      int int0 = 0;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      HashMap<String, Class<DynamicDecisionTable>> hashMap0 = new HashMap<String, Class<DynamicDecisionTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      String string0 = "c-^=<_1^fua7*Zu::W";
      String string1 = slimTableFactory0.makeTableType(string0);
      String string2 = "V0cnO`txdNh\\o4Xn#";
      String string3 = slimTableFactory0.makeTableType(string2);
      String string4 = "dynamic decision:";
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      String string5 = slimTableFactory0.getFullTableName(string4);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Map<String, String> map0 = null;
      slimTableFactory0.tableTypeArrays = map0;
      String string0 = "";
      String string1 = slimTableFactory0.makeTableType(string0);
      // Undeclared exception!
      try { 
        slimTableFactory0.copy();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      Hashtable<String, Class<OrderedQueryTable>> hashtable0 = new Hashtable<String, Class<OrderedQueryTable>>();
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      ExecutionResult executionResult0 = ExecutionResult.PASS;
      slimTestContextImpl0.increment(executionResult0);
      String string0 = "";
      Enumeration<String> enumeration0 = hashtable0.keys();
      String string1 = slimTableFactory0.getFullTableName(string0);
      slimTestContextImpl0.incrementPassedTestsCount();
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      Class<OrderedQueryTable> class1 = hashtable0.getOrDefault(slimTestContextImpl0, class0);
      ExecutionResult executionResult1 = ExecutionResult.FAIL;
      slimTestContextImpl0.increment(executionResult1);
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashtable0;
      String string2 = "decision:";
      Hashtable<String, Class<QueryTable>> hashtable1 = new Hashtable<String, Class<QueryTable>>();
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashtable1;
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string2);
      String string3 = "Y%,f7_W&or\"7%[&_i";
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string3, class2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "*<MJU&d1(";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      String string1 = "_WPv1wM";
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string1);
      Table table0 = null;
      String string2 = "qu";
      SlimTestContext slimTestContext0 = null;
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string2, slimTestContext0);
      String string3 = "\\\"";
      String string4 = slimTableFactory0.makeTableType(string3);
      TableTag tableTag0 = new TableTag();
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      String string0 = "subset query:";
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string0);
      String string1 = "";
      String string2 = "dynamic decision:";
      String string3 = slimTableFactory1.makeTableType(string2);
      String string4 = slimTableFactory1.getFullTableName(string1);
      String string5 = "OGi9Qa}@q*'9E8";
      String string6 = slimTableFactory1.makeTableType(string5);
      String string7 = "ms9|Q";
      String string8 = slimTableFactory0.getFullTableName(string7);
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      ScenarioTable scenarioTable0 = slimTestContextImpl0.getScenario(string5);
      Table table0 = null;
      String string9 = "Fast-foward from ";
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string9, slimTestContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "";
      String string1 = slimTableFactory0.getFullTableName(string0);
      String string2 = "";
      boolean boolean0 = slimTableFactory0.hasColon(string2);
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string2, class0);
      String string3 = "iK6k%9$$<yC";
      Class<ImportTable> class1 = ImportTable.class;
      slimTableFactory0.addTableType(string3, class1);
      String string4 = "asg@)K8N-,x";
      String string5 = slimTableFactory0.makeTableType(string4);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      String string0 = "asOGi9Qa}@:*'9bA";
      String string1 = slimTableFactory0.getFullTableName(string0);
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string1);
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "define table type";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      String string3 = "iK6k%9$$<C";
      String string4 = slimTableFactory0.makeTableType(string0);
  }
}
