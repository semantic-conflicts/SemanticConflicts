/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 21:36:02 GMT 2020
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.input.MapBasedInputRow;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.NoneShardSpec;
import com.metamx.druid.shard.ShardSpec;
import java.io.File;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.apache.commons.httpclient.params.DefaultHttpParams;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.annotate.JsonAutoDetect;
import org.codehaus.jackson.annotate.JsonMethod;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;
import org.codehaus.jackson.map.deser.BeanDeserializerFactory;
import org.codehaus.jackson.map.deser.StdDeserializerProvider;
import org.codehaus.jackson.map.ser.StdSerializerProvider;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.ObjectNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jets3t.service.Jets3tProperties;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.MultipartUpload;
import org.jets3t.service.security.AWSDevPayCredentials;
import org.joda.time.Interval;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "";
      String string1 = "SETTER";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string0, string1, string1);
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string1);
      HttpClientParams httpClientParams0 = new HttpClientParams();
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(httpClientParams0.DATE_PATTERNS, httpClientParams0.WARN_EXTRA_INPUT).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      File file0 = null;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      String string0 = "";
      String string1 = "I61;l*19qJ^+/[Ue";
      String string2 = null;
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string1, string1, string1, string2);
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, stdSerializerProvider0, stdDeserializerProvider0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.SORT_PROPERTIES_ALPHABETICALLY;
      SerializationConfig.Feature serializationConfig_Feature2 = SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationConfig.Feature serializationConfig_Feature3 = SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS;
      SerializationConfig.Feature serializationConfig_Feature4 = SerializationConfig.Feature.USE_STATIC_TYPING;
      SerializationConfig.Feature serializationConfig_Feature5 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      MockFile mockFile0 = new MockFile(string0);
      String string3 = "org.joda.time.chrono.AssembledChronology";
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) restS3Service0.BUCKET_STATUS__MY_BUCKET);
      Interval interval0 = new Interval(period0, mutableDateTime0);
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(mutableDateTime0.ROUND_HALF_EVEN, stack0, hashMap0);
      Map<String, Object> map0 = mapBasedInputRow0.getEvent();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<String> list0 = arrayNode0.findValuesAsText(string0, (List<String>) stack0);
      ShardSpec shardSpec0 = null;
      DataSegment dataSegment0 = new DataSegment(string3, interval0, jsonFactory0.FORMAT_NAME_JSON, map0, stack0, list0, shardSpec0, (Integer) restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, mutableDateTime0.ROUND_FLOOR);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000118\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      String string0 = "";
      String string1 = "I61;l*19qJ^+/[Ue";
      String string2 = null;
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string1, string0, string0, string1);
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, stdSerializerProvider0, stdDeserializerProvider0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializationConfig.Feature[] serializationConfig_FeatureArray0 = new SerializationConfig.Feature[9];
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.WRITE_NULL_MAP_VALUES;
      serializationConfig_FeatureArray0[0] = serializationConfig_Feature0;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE;
      serializationConfig_FeatureArray0[1] = serializationConfig_Feature1;
      SerializationConfig.Feature serializationConfig_Feature2 = SerializationConfig.Feature.SORT_PROPERTIES_ALPHABETICALLY;
      serializationConfig_FeatureArray0[2] = serializationConfig_Feature2;
      serializationConfig_FeatureArray0[3] = serializationConfig_FeatureArray0[2];
      serializationConfig_FeatureArray0[4] = serializationConfig_FeatureArray0[2];
      SerializationConfig.Feature serializationConfig_Feature3 = SerializationConfig.Feature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      serializationConfig_FeatureArray0[5] = serializationConfig_Feature3;
      SerializationConfig.Feature serializationConfig_Feature4 = SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS;
      serializationConfig_FeatureArray0[6] = serializationConfig_Feature4;
      SerializationConfig.Feature serializationConfig_Feature5 = SerializationConfig.Feature.USE_STATIC_TYPING;
      serializationConfig_FeatureArray0[7] = serializationConfig_Feature5;
      serializationConfig_FeatureArray0[8] = serializationConfig_Feature0;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper1);
      MockFile mockFile0 = new MockFile(string0);
      String string3 = "";
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) restS3Service0.BUCKET_STATUS__MY_BUCKET);
      Interval interval0 = new Interval(period0, mutableDateTime0);
      long long0 = (-1L);
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long0, stack0, hashMap0);
      Map<String, Object> map0 = mapBasedInputRow0.getEvent();
      ShardSpec shardSpec0 = null;
      DataSegment dataSegment0 = new DataSegment(string3, interval0, jsonFactory0.FORMAT_NAME_JSON, map0, stack0, stack0, shardSpec0, (Integer) restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, mutableDateTime0.ROUND_FLOOR);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000122\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "iIZTVOADb";
      MockFile mockFile0 = new MockFile(string0);
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      String string0 = "{1+nn_Ueop\"SH'TOXPy";
      String string1 = "";
      String string2 = "6AFjW]sWnbX:7I`jl";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string1, string0, string2, string1);
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      String string0 = "55Kut%J;g_[0()DDz";
      Interval interval0 = null;
      String string1 = "";
      String string2 = "Content-Language";
      String string3 = "Error while running command to get file permissions : ";
      String string4 = "!Hvl9;(";
      MultipartUpload multipartUpload0 = new MultipartUpload(string2, string3, string4);
      Map<String, Object> map0 = multipartUpload0.getMetadata();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      String string0 = "";
      String string1 = "SETTER";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string0, string1, string1);
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string1);
      DefaultHttpParams defaultHttpParams0 = new DefaultHttpParams();
      HttpClientParams httpClientParams0 = new HttpClientParams(defaultHttpParams0);
      HttpClient httpClient0 = new HttpClient(httpClientParams0);
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(httpClientParams0.DATE_PATTERNS, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonMethod jsonMethod0 = JsonMethod.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper1);
      File file0 = null;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      String string0 = "";
      String string1 = "I61;l*19qJ^+/[Ue";
      String string2 = null;
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string1, string1, string1, string2);
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, stdSerializerProvider0, stdDeserializerProvider0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializationConfig.Feature[] serializationConfig_FeatureArray0 = new SerializationConfig.Feature[9];
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      serializationConfig_FeatureArray0[0] = serializationConfig_Feature0;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE;
      serializationConfig_FeatureArray0[1] = serializationConfig_Feature1;
      SerializationConfig.Feature serializationConfig_Feature2 = SerializationConfig.Feature.SORT_PROPERTIES_ALPHABETICALLY;
      serializationConfig_FeatureArray0[2] = serializationConfig_Feature2;
      SerializationConfig.Feature serializationConfig_Feature3 = SerializationConfig.Feature.INDENT_OUTPUT;
      serializationConfig_FeatureArray0[3] = serializationConfig_Feature3;
      SerializationConfig.Feature serializationConfig_Feature4 = SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS;
      serializationConfig_FeatureArray0[4] = serializationConfig_Feature4;
      SerializationConfig.Feature serializationConfig_Feature5 = SerializationConfig.Feature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      serializationConfig_FeatureArray0[5] = serializationConfig_Feature5;
      SerializationConfig.Feature serializationConfig_Feature6 = SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS;
      serializationConfig_FeatureArray0[6] = serializationConfig_Feature6;
      SerializationConfig.Feature serializationConfig_Feature7 = SerializationConfig.Feature.USE_STATIC_TYPING;
      serializationConfig_FeatureArray0[7] = serializationConfig_Feature7;
      SerializationConfig.Feature serializationConfig_Feature8 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      serializationConfig_FeatureArray0[8] = serializationConfig_Feature8;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationConfig_FeatureArray0);
      boolean boolean0 = true;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationConfig_Feature6, boolean0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      String string3 = "key";
      MockFile mockFile0 = new MockFile(string3);
      String string4 = "";
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) restS3Service0.BUCKET_STATUS__MY_BUCKET);
      Interval interval0 = new Interval(period0, mutableDateTime0);
      long long0 = (-1L);
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long0, stack0, hashMap0);
      Map<String, Object> map0 = mapBasedInputRow0.getEvent();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<String> list0 = arrayNode0.findValuesAsText(string0, (List<String>) stack0);
      ShardSpec shardSpec0 = null;
      DataSegment dataSegment0 = new DataSegment(string4, interval0, jsonFactory0.FORMAT_NAME_JSON, map0, stack0, list0, shardSpec0, (Integer) restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, mutableDateTime0.ROUND_FLOOR);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      String string0 = "";
      String string1 = "I61;l*19qJ^+/[Ue";
      String string2 = null;
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string1, string1, string1, string2);
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, stdSerializerProvider0, stdDeserializerProvider0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializationConfig.Feature[] serializationConfig_FeatureArray0 = new SerializationConfig.Feature[9];
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      serializationConfig_FeatureArray0[0] = serializationConfig_Feature0;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE;
      serializationConfig_FeatureArray0[1] = serializationConfig_Feature1;
      SerializationConfig.Feature serializationConfig_Feature2 = SerializationConfig.Feature.SORT_PROPERTIES_ALPHABETICALLY;
      serializationConfig_FeatureArray0[2] = serializationConfig_Feature2;
      serializationConfig_FeatureArray0[3] = serializationConfig_FeatureArray0[2];
      SerializationConfig.Feature serializationConfig_Feature3 = SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS;
      serializationConfig_FeatureArray0[4] = serializationConfig_Feature3;
      SerializationConfig.Feature serializationConfig_Feature4 = SerializationConfig.Feature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      serializationConfig_FeatureArray0[5] = serializationConfig_Feature4;
      SerializationConfig.Feature serializationConfig_Feature5 = SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS;
      serializationConfig_FeatureArray0[6] = serializationConfig_Feature5;
      SerializationConfig.Feature serializationConfig_Feature6 = SerializationConfig.Feature.USE_STATIC_TYPING;
      serializationConfig_FeatureArray0[7] = serializationConfig_Feature6;
      SerializationConfig.Feature serializationConfig_Feature7 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      serializationConfig_FeatureArray0[8] = serializationConfig_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationConfig_FeatureArray0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper1);
      MockFile mockFile0 = new MockFile(string0);
      String string3 = "";
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) restS3Service0.BUCKET_STATUS__MY_BUCKET);
      Interval interval0 = new Interval(period0, mutableDateTime0);
      long long0 = (-1L);
      Stack<String> stack0 = new Stack<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long0, stack0, hashMap0);
      Map<String, Object> map0 = mapBasedInputRow0.getEvent();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<String> list0 = arrayNode0.findValuesAsText(string0, (List<String>) stack0);
      ShardSpec shardSpec0 = null;
      DataSegment dataSegment0 = new DataSegment(string3, interval0, jsonFactory0.FORMAT_NAME_JSON, map0, stack0, list0, shardSpec0, (Integer) restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, mutableDateTime0.ROUND_FLOOR);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000124\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
