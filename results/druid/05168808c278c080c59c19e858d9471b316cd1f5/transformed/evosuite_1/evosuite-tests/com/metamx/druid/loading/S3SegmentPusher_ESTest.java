/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 20:59:36 GMT 2020
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.input.MapBasedInputRow;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.annotate.JsonAutoDetect;
import org.codehaus.jackson.annotate.JsonMethod;
import org.codehaus.jackson.map.AnnotationIntrospector;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.DeserializerProvider;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.ser.StdSerializerProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.hyperic.sigar.Sigar;
import org.hyperic.sigar.cmd.Shell;
import org.jets3t.service.Jets3tProperties;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.security.GSCredentials;
import org.jets3t.service.security.ProviderCredentials;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      InputStream inputStream0 = null;
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      Map<String, Object> map0 = null;
      Comparator<DataSegment> comparator0 = DataSegment.bucketMonthComparator();
      long long0 = (-1522L);
      System.setCurrentTimeMillis(long0);
      String string0 = "%s_%s";
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      String string0 = "\"loT J6/dQD_Ky";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      String string1 = "=fr";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonMethod jsonMethod0 = JsonMethod.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.UNWRAP_ROOT_VALUE;
      boolean boolean0 = false;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationConfig_Feature0, boolean0);
      jets3tProperties0.clearAllProperties();
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      MockFile mockFile0 = new MockFile(string0);
      MockFile mockFile1 = new MockFile(string0, string0);
      s3SegmentPusher0.jsonMapper = objectMapper3;
      boolean boolean1 = mockFile0.setExecutable(boolean0, boolean0);
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      String string0 = "Uploading [%s] to S3";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      JsonMethod jsonMethod0 = JsonMethod.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.UNWRAP_ROOT_VALUE;
      boolean boolean0 = false;
      String string1 = "n`qZT-xz6&R1XZ|Z";
      MockFile mockFile0 = new MockFile(string1);
      MockFile mockFile1 = new MockFile(string1, string1);
      DataSegment dataSegment0 = null;
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      String string0 = "#loT J6/{QD_Ky";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationConfig deserializationConfig0 = objectMapper0.copyDeserializationConfig();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonMethod jsonMethod0 = JsonMethod.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.UNWRAP_ROOT_VALUE;
      boolean boolean0 = false;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationConfig_Feature0, boolean0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      String string2 = "8.";
      MockFile mockFile0 = new MockFile(string2);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      s3SegmentPusher0.jsonMapper = objectMapper3;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      Shell shell0 = new Shell();
      Sigar sigar0 = shell0.getSigar();
      File file0 = sigar0.getNativeLibrary();
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      LocalDate localDate0 = new LocalDate();
      Interval interval0 = localDate0.toInterval();
      Instant instant0 = new Instant();
      Interval interval1 = interval0.withEnd(instant0);
      String string1 = "nHF*K)Ok/ORY==GJ_*";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      long long0 = (-4134L);
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long0, arrayList0, hashMap0);
      List<String> list0 = mapBasedInputRow0.getDimensions();
      int int0 = (-5067);
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(string0, string0, string1, int0);
      Integer integer0 = new Integer(int0);
      DataSegment dataSegment0 = new DataSegment(string0, interval1, string1, hashMap0, arrayList0, list0, singleDimensionShardSpec0, integer0, int0);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string1);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      DeserializerProvider deserializerProvider0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, stdSerializerProvider0, deserializerProvider0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper1);
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      String string0 = "#loT J6/{QD_Ky";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationConfig deserializationConfig0 = objectMapper0.copyDeserializationConfig();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonMethod jsonMethod0 = JsonMethod.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.UNWRAP_ROOT_VALUE;
      boolean boolean0 = false;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationConfig_Feature0, boolean0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      String string2 = "";
      MockFile mockFile0 = new MockFile(string2);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      mockFile1.deleteOnExit();
      File file0 = mockFile0.getAbsoluteFile();
      s3SegmentPusher0.jsonMapper = objectMapper3;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      String string0 = "#loT J6/{QD_Ky";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      HostConfiguration hostConfiguration0 = HostConfiguration.ANY_HOST_CONFIGURATION;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0, string0, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      String string1 = "Uploading [%s] to S3";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationConfig deserializationConfig0 = objectMapper0.copyDeserializationConfig();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonMethod jsonMethod0 = JsonMethod.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(jsonMethod0, jsonAutoDetect_Visibility0);
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.UNWRAP_ROOT_VALUE;
      boolean boolean0 = false;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationConfig_Feature0, boolean0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      String string2 = "";
      MockFile mockFile0 = new MockFile(string2);
      mockFile0.deleteOnExit();
      File file0 = mockFile0.getAbsoluteFile();
      s3SegmentPusher0.jsonMapper = objectMapper3;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }
}
