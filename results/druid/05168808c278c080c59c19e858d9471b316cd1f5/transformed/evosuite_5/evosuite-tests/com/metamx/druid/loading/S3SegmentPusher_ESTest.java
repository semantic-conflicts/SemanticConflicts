/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 21:18:48 GMT 2020
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.ShardSpec;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.security.GSCredentials;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.joda.time.MutableDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "Uu5&Z";
      String string1 = "";
      GSCredentials gSCredentials0 = new GSCredentials(string1, string0);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.USE_STATIC_TYPING;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.AUTO_DETECT_GETTERS;
      SerializationConfig.Feature serializationConfig_Feature2 = SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE;
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.AUTO_DETECT_CREATORS;
      DeserializationConfig.Feature deserializationConfig_Feature1 = DeserializationConfig.Feature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationConfig.Feature deserializationConfig_Feature2 = DeserializationConfig.Feature.FAIL_ON_NULL_FOR_PRIMITIVES;
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "'4f[d)i~{LG`ue8";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = "78G@XXfMMpy`k%";
      long long0 = 0L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long0, dateTimeZone0);
      String string2 = "Pj";
      Map<String, Object> map0 = null;
      Vector<String> vector0 = new Vector<String>();
      ShardSpec shardSpec0 = null;
      int int0 = 24;
      Integer integer0 = new Integer(int0);
      long long1 = 10L;
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string2, map0, vector0, vector0, shardSpec0, integer0, long1);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      String string0 = "Uj4+3/i|m'+]jobd";
      Path path0 = new Path(string0);
      File file0 = rawLocalFileSystem0.pathToFile(path0);
      S3SegmentPusher s3SegmentPusher1 = new S3SegmentPusher(s3SegmentPusher0.s3Client, s3SegmentPusher0.config, s3SegmentPusher0.jsonMapper);
      String string1 = "sRTu|:G}:py,z@@<";
      long long0 = 2147483647L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      Interval interval0 = new Interval(mutableDateTime0, mutableDateTime0);
      float float0 = (-1.0F);
      HashMap<String, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Object>(mutableDateTime0.ROUND_FLOOR, float0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "'4f[d)i~{LG`ue8";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = "78G@XXfMMpy`k%";
      long long0 = 0L;
      long long1 = 3826L;
      DateTimeZone dateTimeZone0 = null;
      Interval interval0 = new Interval(long0, long1, dateTimeZone0);
      String string2 = "";
      Map<String, Object> map0 = null;
      Vector<String> vector0 = new Vector<String>();
      ShardSpec shardSpec0 = null;
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      long long2 = 0L;
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string2, map0, vector0, vector0, shardSpec0, integer0, long2);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }
}
