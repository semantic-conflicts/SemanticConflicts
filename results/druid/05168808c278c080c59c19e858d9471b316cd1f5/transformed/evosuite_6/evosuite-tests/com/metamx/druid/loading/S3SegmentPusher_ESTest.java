/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 21:21:43 GMT 2020
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.NoneShardSpec;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.ObjectNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hyperic.sigar.FileSystemMap;
import org.hyperic.sigar.Sigar;
import org.jets3t.service.Jets3tProperties;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.security.GSCredentials;
import org.joda.time.DateMidnight;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "lApP3Y";
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string2).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string3 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string3, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string0, map0, list1, list1, noneShardSpec0, integer0, long2);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string0);
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = null;
      MockFile mockFile0 = new MockFile(string0);
      DataSegment dataSegment0 = null;
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      String string1 = "type";
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string1, credentialsProvider0, jets3tProperties0);
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      ObjectMapper objectMapper0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = "{";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      Interval interval0 = new Interval(long0, long0);
      String string2 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string3 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string3, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long1 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string2, map0, list1, list1, noneShardSpec0, integer0, long1);
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string3 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string3, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string3, map0, list1, list1, noneShardSpec0, integer0, int0);
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      S3SegmentPusher s3SegmentPusher1 = new S3SegmentPusher(s3SegmentPusher0.s3Client, s3SegmentPusher0.config, s3SegmentPusher0.jsonMapper);
      String string1 = "tMMCPu6lrOSwQfN";
      long long0 = (-2296L);
      Duration duration0 = new Duration(long0);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, dateMidnight0);
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "p]C{5Sf";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string3 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string4 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string4, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string3, map0, list1, list1, noneShardSpec0, integer0, long2);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      String string3 = "The dead lock checker in ";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string4 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string5 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string5, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string4, map0, list1, list1, noneShardSpec0, integer0, long2);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string3 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string4 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string4, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string3, map0, list1, list1, noneShardSpec0, integer0, long2);
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string3 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string4 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string4, list0);
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string3, map0, list1, list1, noneShardSpec0, integer0, long2);
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      File file0 = null;
      ObjectMapper objectMapper0 = null;
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      String string1 = "lApP3Y";
      s3SegmentPusher0.jsonMapper = objectMapper0;
      String string2 = "org.codehaus.jackson.map.deser.std.StdDeserializer$CharacterDeserializer";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string2).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string2).when(s3SegmentPusherConfig0).getBucket();
      s3SegmentPusher0.config = s3SegmentPusherConfig0;
      long long0 = 21600000L;
      long long1 = 1000000000000000000L;
      Interval interval0 = new Interval(long0, long1);
      String string3 = null;
      Map<String, Object> map0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string4 = "9+uDWf:";
      List<String> list0 = null;
      List<String> list1 = objectNode0.findValuesAsText(string4, list0);
      String string5 = "[]";
      GSCredentials gSCredentials0 = new GSCredentials(string2, string5);
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = Jets3tProperties.getInstance(string5);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string1, credentialsProvider0, jets3tProperties0);
      s3SegmentPusher0.s3Client = restS3Service0;
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      int int0 = (-265);
      Integer integer0 = Integer.valueOf(int0);
      long long2 = (-622L);
      DataSegment dataSegment0 = new DataSegment(string1, interval0, string3, map0, list1, list1, noneShardSpec0, integer0, long2);
      String string6 = dataSegment0.toString();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000095\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
