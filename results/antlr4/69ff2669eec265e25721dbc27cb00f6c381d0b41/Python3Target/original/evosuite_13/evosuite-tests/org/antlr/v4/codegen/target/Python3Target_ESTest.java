/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:29:56 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.CodeBlockForOuterMostAlt;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.AltLabelStructDecl;
import org.antlr.v4.codegen.model.decl.TokenListDecl;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.runtime.atn.ATNState;
import org.antlr.v4.runtime.atn.RuleStartState;
import org.antlr.v4.runtime.atn.RuleTransition;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.ANTLRToolListener;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      RuleStartState ruleStartState0 = new RuleStartState();
      assertNotNull(ruleStartState0);
      assertEquals(2, ruleStartState0.getStateType());
      assertEquals("-1", ruleStartState0.toString());
      assertFalse(ruleStartState0.isNonGreedyExitState());
      assertFalse(ruleStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, ruleStartState0.getNumberOfTransitions());
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(0, ruleStartState0.ruleIndex);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertFalse(ruleStartState0.isLeftRecursiveRule);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertFalse(ruleStartState0.epsilonOnlyTransitions);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ruleStartState0.stateNumber);
      
      RuleTransition ruleTransition0 = new RuleTransition(ruleStartState0, ruleStartState0.ruleIndex, ruleStartState0.PLUS_LOOP_BACK, ruleStartState0);
      assertNotNull(ruleTransition0);
      assertEquals(2, ruleStartState0.getStateType());
      assertEquals("-1", ruleStartState0.toString());
      assertFalse(ruleStartState0.isNonGreedyExitState());
      assertFalse(ruleStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, ruleStartState0.getNumberOfTransitions());
      assertTrue(ruleTransition0.isEpsilon());
      assertEquals(3, ruleTransition0.getSerializationType());
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(0, ruleStartState0.ruleIndex);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertFalse(ruleStartState0.isLeftRecursiveRule);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertFalse(ruleStartState0.epsilonOnlyTransitions);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ruleStartState0.stateNumber);
      assertEquals(10, Transition.PRECEDENCE);
      assertEquals(2, Transition.RANGE);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(5, Transition.ATOM);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(9, Transition.WILDCARD);
      assertEquals(3, Transition.RULE);
      assertEquals(1, Transition.EPSILON);
      assertEquals(6, Transition.ACTION);
      assertEquals(7, Transition.SET);
      assertEquals(11, ruleTransition0.precedence);
      assertEquals(0, ruleTransition0.ruleIndex);
      
      String string0 = "DLdc^\\OZO*UVA#";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) ruleTransition0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.runtime.atn.RuleTransition cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ErrorType errorType0 = ErrorType.RETVAL_CONFLICTS_WITH_RULE;
      ANTLRMessage aNTLRMessage0 = new ANTLRMessage(errorType0);
      assertNotNull(aNTLRMessage0);
      assertEquals(ErrorType.RETVAL_CONFLICTS_WITH_RULE, aNTLRMessage0.getErrorType());
      assertEquals((-1), aNTLRMessage0.charPosition);
      assertEquals((-1), aNTLRMessage0.line);
      
      PredAST predAST0 = new PredAST(aNTLRMessage0.line, aNTLRMessage0.offendingToken);
      assertNotNull(predAST0);
      assertEquals(ErrorType.RETVAL_CONFLICTS_WITH_RULE, aNTLRMessage0.getErrorType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals((-1), aNTLRMessage0.charPosition);
      assertEquals((-1), aNTLRMessage0.line);
      assertEquals((-1), predAST0.childIndex);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertFalse(boolean0);
      assertEquals(ErrorType.RETVAL_CONFLICTS_WITH_RULE, aNTLRMessage0.getErrorType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals((-1), aNTLRMessage0.charPosition);
      assertEquals((-1), aNTLRMessage0.line);
      assertEquals((-1), predAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python3Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      
      int int0 = 27;
      BlockAST blockAST0 = new BlockAST(int0);
      assertNotNull(blockAST0);
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(27, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(boolean2);
      assertFalse(int0 == int1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(27, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      int int0 = (-2271);
      int int1 = 27;
      CommonToken commonToken0 = new CommonToken(int1);
      assertFalse(int1 == int0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(27, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      
      String string0 = "!7k";
      BlockAST blockAST0 = new BlockAST(int0, commonToken0, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(blockAST0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(27, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-2271), blockAST0.getType());
      assertEquals((-1), blockAST0.childIndex);
      
      Stack<Tree> stack0 = new Stack<Tree>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      blockAST0.addChildren(stack0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(27, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-2271), blockAST0.getType());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals((-1), blockAST0.childIndex);
      
      String string1 = python3Target0.getLoopCounter(blockAST0);
      assertEquals("cnt-1", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(27, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-2271), blockAST0.getType());
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean2 = python3Target0.wantsBaseListener();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean3 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      String string2 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string2));
      assertEquals(84, set1.size());
      assertFalse(set1.isEmpty());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      int int2 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      ParserFactory parserFactory0 = null;
      try {
        parserFactory0 = new ParserFactory(codeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String[] stringArray0 = null;
      ANTLRToolListener aNTLRToolListener0 = null;
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "";
      String string1 = StringRenderer.escapeHTML(string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) python3Target_PythonStringRenderer0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python3Target$PythonStringRenderer cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "";
      String string1 = StringRenderer.escapeHTML(string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = null;
      String string2 = "";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      String string3 = python3Target_PythonStringRenderer0.toString(object0, string2, locale0);
      assertEquals("", string3);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object1, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      Grammar grammar0 = null;
      int int0 = 1699;
      String string0 = "<EOF>";
      // Undeclared exception!
      try { 
        python3Target0.getElementListName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        python3Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      CodeGenerator codeGenerator1 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator1);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      
      int int0 = (-1789569705);
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      
      CommonToken commonToken1 = new CommonToken(commonToken0);
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(commonToken1);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      
      AltAST altAST0 = new AltAST(int0, commonToken1);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(altAST0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1789569705), altAST0.getType());
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(boolean0);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1789569705), altAST0.getType());
      assertEquals((-1), altAST0.childIndex);
      
      int int1 = 1055;
      RuleAST ruleAST0 = null;
      try {
        ruleAST0 = new RuleAST(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1055
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      int int0 = 0;
      String string0 = python3Target0.encodeIntAsCharEscape(int0);
      assertEquals("\\0", string0);
      assertNotNull(string0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string1, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      
      ParserFactory parserFactory0 = null;
      try {
        parserFactory0 = new ParserFactory(codeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = "";
      boolean boolean0 = false;
      String string1 = python3Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string2 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string3 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CommonToken commonToken0 = new CommonToken(int0);
      assertNotNull(commonToken0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      
      AltAST altAST0 = new AltAST(int0, commonToken0);
      assertNotNull(altAST0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(29, altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.childIndex);
      
      AltAST altAST1 = new AltAST(altAST0);
      assertFalse(altAST1.equals((Object)altAST0));
      assertNotNull(altAST1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(29, altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST1.getChildCount());
      assertFalse(altAST1.isNil());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals(29, altAST1.getType());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) altAST1, altAST0.textOverride, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.tool.ast.AltAST cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      python3Target0.addBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      ParserFactory parserFactory0 = null;
      try {
        parserFactory0 = new ParserFactory(codeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "org.antlr.v4.runtime.atn.ATNConfigSet$ConfigEqualityComparator";
      AltAST altAST0 = null;
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean0 = python3Target0.templatesExist();
      assertTrue(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      int int1 = 1887;
      String string0 = "input";
      int int2 = (-1879048190);
      ClassicToken classicToken0 = new ClassicToken(int1, string0, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(classicToken0);
      assertEquals(1887, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals("input", classicToken0.getText());
      assertEquals((-1879048190), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      
      TerminalAST terminalAST0 = new TerminalAST(int0, classicToken0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(terminalAST0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(1887, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals("input", classicToken0.getText());
      assertEquals((-1879048190), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.childIndex);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(1887, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals("input", classicToken0.getText());
      assertEquals((-1879048190), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.childIndex);
  }
}
