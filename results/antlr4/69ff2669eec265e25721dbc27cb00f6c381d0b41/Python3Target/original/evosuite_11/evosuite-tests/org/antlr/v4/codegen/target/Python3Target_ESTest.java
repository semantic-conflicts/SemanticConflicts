/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:25:15 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.Decl;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.atn.PrecedencePredicateTransition;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "(";
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean0);
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertNotNull(grammarAST0);
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(boolean1);
      assertEquals((-1), grammarAST0.childIndex);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(boolean2);
      assertEquals((-1), grammarAST0.childIndex);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(29, int0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      String string0 = "EXPLIT";
      // Undeclared exception!
      try { 
        python3Target0.getImplicitTokenLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertNotNull(aNTLRStringStream0);
      
      int int0 = (-2320);
      int int1 = (-181);
      CommonToken commonToken0 = new CommonToken(aNTLRStringStream0, int0, int1, int1, int0);
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals((-181), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-181), commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2320), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-2320), commonToken0.getType());
      assertNotNull(commonToken0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      BlockAST blockAST0 = new BlockAST(commonToken0);
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals((-181), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-181), commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2320), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-2320), commonToken0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-2320), blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      BlockAST blockAST1 = new BlockAST(blockAST0);
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals((-181), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-181), commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2320), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-2320), commonToken0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-2320), blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST1.getChildIndex());
      assertEquals(0, blockAST1.getChildCount());
      assertEquals(0, blockAST1.getLine());
      assertEquals(0, blockAST1.getCharPositionInLine());
      assertEquals(0, blockAST1.getNumberOfOptions());
      assertEquals((-2320), blockAST1.getType());
      assertEquals((-1), blockAST1.getTokenStartIndex());
      assertEquals((-1), blockAST1.getTokenStopIndex());
      assertFalse(blockAST1.isNil());
      assertNotNull(blockAST1);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), blockAST1.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(blockAST1.equals((Object)blockAST0));
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      int int0 = 59;
      String string0 = "id";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertEquals(59, classicToken0.getType());
      assertEquals("id", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertNotNull(classicToken0);
      
      AltAST altAST0 = new AltAST(int0, classicToken0);
      assertEquals(59, classicToken0.getType());
      assertEquals("id", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(59, altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(59, classicToken0.getType());
      assertEquals("id", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(59, altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertTrue(boolean0);
      assertEquals((-1), altAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "Y[R0xID+g]v";
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Y[R0xID+g]v", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        python3Target0.getElementListName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      String string0 = "org.stringtemplate.v4.STGroupDir";
      String string1 = python3Target0.getTargetStringLiteralFromString(string0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("\"org.stringtemplate.v4.STGroupDir\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      String string0 = "CL.:gvAQ}`";
      String string1 = StringRenderer.escapeHTML(string0);
      assertEquals("CL.:gvAQ}`", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertFalse(set1.contains(string1));
      assertSame(set1, set0);
      assertNotNull(set1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = "hex";
      String string3 = "";
      Set<String> set2 = python3Target0.getBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(84, set2.size());
      assertFalse(set2.isEmpty());
      assertTrue(set2.contains(string2));
      assertFalse(set2.contains(string1));
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertNotNull(set2);
      
      Locale locale0 = new Locale(string2, string3);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hex", locale0.toString());
      assertEquals("hex", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hex", locale0.getISO3Language());
      assertNotNull(locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string2, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(codeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      String string0 = "";
      String string1 = null;
      int int0 = 2147483645;
      int int1 = 4197;
      ClassicToken classicToken0 = new ClassicToken(int0, string0, int1);
      assertEquals("", classicToken0.getText());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(4197, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      CommonToken commonToken0 = new CommonToken(classicToken0);
      assertEquals("", classicToken0.getText());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(4197, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(2147483645, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(4197, commonToken0.getChannel());
      assertEquals(0, commonToken0.getTokenIndex());
      assertNotNull(commonToken0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ActionAST actionAST0 = new ActionAST(commonToken0);
      assertEquals("", classicToken0.getText());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(4197, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(2147483645, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(4197, commonToken0.getChannel());
      assertEquals(0, commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(2147483645, actionAST0.getType());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertNotNull(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("", classicToken0.getText());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(4197, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(2147483645, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(4197, commonToken0.getChannel());
      assertEquals(0, commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(2147483645, actionAST0.getType());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertFalse(boolean0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        python3Target0.getImplicitSetLabel(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      
      int int0 = (-666);
      String string0 = "VuZ1N7X";
      // Undeclared exception!
      try { 
        python3Target0.getImplicitTokenLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CodeGenerator codeGenerator0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }
}
