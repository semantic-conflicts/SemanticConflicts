/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:27:40 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.InvokeRule;
import org.antlr.v4.codegen.model.SrcOp;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.parse.ActionSplitter;
import org.antlr.v4.tool.AttributeResolver;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      String string0 = "8";
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Locale locale0 = null;
      String string1 = python3Target_PythonStringRenderer0.toString((Object) codeGenerator0, string0, locale0);
      assertEquals("8", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = 2;
      AltAST altAST0 = new AltAST(int0);
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(2, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertFalse(altAST0.isNil());
      
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string1));
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(boolean0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(2, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertFalse(altAST0.isNil());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      
      RuleAST ruleAST0 = new RuleAST(commonToken0);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(ruleAST0);
      assertFalse(boolean0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange(sTGroup0.encoding);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(locale_LanguageRange0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertNotNull(sTGroup1);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      String string0 = "Fx{m";
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "org.antlr.v4.tool.ast.GrammarRootAST";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) codeGenerator0, string0, locale0);
      assertEquals("org.antlr.v4.tool.ast.GrammarRootAST", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "error writing output caused by";
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string3 = python3Target_PythonStringRenderer0.toString((Object) codeGenerator0, string2, locale1);
      assertEquals("error writing output caused by", string3);
      assertNotNull(string3);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(locale1, locale0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      String string0 = "";
      String string1 = python3Target0.getTargetStringLiteralFromString(string0);
      assertEquals("\"\"", string1);
      assertNotNull(string1);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertTrue(boolean1 == boolean0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      String string2 = python3Target0.getTargetStringLiteralFromString(string1, boolean1);
      assertEquals("\\\"\\\"", string2);
      assertNotNull(string2);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = "";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string4 = " 2q^taLJ4fMNcK";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object1, string4, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = null;
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      String string2 = "Na)weDWZ_Egk";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      int int0 = (-85);
      Random.setNextRandom(int0);
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      String string0 = "{K''wB`e=Q8_xkH2+%";
      // Undeclared exception!
      try { 
        python3Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      
      RuleAST ruleAST0 = new RuleAST(commonToken0);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(ruleAST0);
      assertFalse(boolean1);
      assertEquals((-1), ruleAST0.childIndex);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertTrue(boolean1 == boolean0);
      
      String string0 = null;
      int int0 = 0;
      ruleAST0.setChildIndex(int0);
      assertEquals(0, ruleAST0.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      ruleAST0.setUnknownTokenBoundaries();
      assertEquals(0, ruleAST0.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      boolean boolean2 = python3Target0.wantsBaseListener();
      assertFalse(boolean2);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      String string3 = locale0.toLanguageTag();
      assertEquals("fr-CA", string3);
      assertNotNull(string3);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      char char0 = 'Q';
      String string4 = locale0.getExtension(char0);
      assertNull(string4);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) ruleAST0, string2, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.tool.ast.RuleAST cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string0 = ")F*";
      String string1 = python3Target0.getTargetStringLiteralFromString(string0);
      assertEquals("\")F*\"", string1);
      assertNotNull(string1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean1 == boolean0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string2 = "tokenSource cannot be null";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string3 = "";
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        python3Target0.getListLabel(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string0 = "open";
      boolean boolean0 = true;
      String string1 = python3Target0.getTargetStringLiteralFromString(string0, boolean0);
      assertEquals("\"open\"", string1);
      assertNotNull(string1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = python3Target0.templatesExist();
      assertTrue(boolean1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean1 == boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertTrue(set0.contains(string0));
      assertFalse(set0.contains(string1));
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      boolean boolean2 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean2);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertNotNull(string2);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 685;
      int int1 = (-3491);
      String string3 = "\\(";
      CommonToken commonToken0 = new CommonToken(int1, string3);
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-3491), commonToken0.getType());
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      ActionSplitter actionSplitter0 = new ActionSplitter();
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(actionSplitter0);
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      
      CommonTokenStream commonTokenStream0 = new CommonTokenStream(actionSplitter0);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(commonTokenStream0);
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, commonTokenStream0.size());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(int0, commonToken0, commonTokenStream0);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(grammarRootAST0);
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertFalse(grammarRootAST0.isNil());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals(685, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-3491), commonToken0.getType());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, commonTokenStream0.size());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      GrammarRootAST grammarRootAST1 = new GrammarRootAST(grammarRootAST0);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(grammarRootAST1);
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertFalse(grammarRootAST0.isNil());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals(685, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals(685, grammarRootAST1.getType());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-3491), commonToken0.getType());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, commonTokenStream0.size());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = grammarRootAST1.toString();
      assertEquals("\\(", string4);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(string4);
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertFalse(grammarRootAST0.isNil());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals(685, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals(685, grammarRootAST1.getType());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-3491), commonToken0.getType());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, commonTokenStream0.size());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertNotSame(grammarRootAST0, grammarRootAST1);
      assertNotSame(grammarRootAST1, grammarRootAST0);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(grammarRootAST0.equals((Object)grammarRootAST1));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = 71;
      // Undeclared exception!
      try { 
        python3Target0.getImplicitRuleLabel(sTGroup0.encoding);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      String string0 = null;
      int int0 = 0;
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean1 == boolean0);
      
      String string2 = null;
      char char0 = 'Q';
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int1 == int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string3 = "bNf+#R@e0L9!G*b_";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean3 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean3);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      python3Target0.addBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean4 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean4);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      boolean boolean5 = python3Target0.wantsBaseListener();
      assertFalse(boolean5);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string3));
      
      Set<String> set1 = python3Target0.getBadWords();
      assertNotNull(set1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      assertFalse(set1.contains(string3));
      
      String string4 = "Fx{m";
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Grammar grammar0 = null;
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      String string0 = null;
      int int0 = 0;
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean1 == boolean0);
      
      String string2 = null;
      char char0 = 'Q';
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(int1 == int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string3 = "bNf+#R@e0L9!G*b_";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean4 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean4);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertNotNull(sTGroup1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      python3Target0.addBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean5 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean5);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      
      boolean boolean6 = python3Target0.wantsBaseListener();
      assertFalse(boolean6);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string3));
      
      Set<String> set1 = python3Target0.getBadWords();
      assertNotNull(set1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(84, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      assertFalse(set1.contains(string3));
      
      String string4 = "Fx{m";
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream(string2, sTGroup0.DEFAULT_KEY);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(aNTLRFileStream0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRFileStream0, recognizerSharedState0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(aNTLRLexer0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.emit();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(commonToken0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertNotSame(sTGroup0, sTGroup1);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      
      RuleAST ruleAST0 = new RuleAST(commonToken0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(ruleAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertNotNull(python3Target0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      
      RuleAST ruleAST0 = new RuleAST(commonToken0);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(ruleAST0);
      assertFalse(boolean0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      String string0 = null;
      int int0 = 0;
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      
      ruleAST0.setUnknownTokenBoundaries();
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int1 == int0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string2 = "bNf#R@e0L9!G*b_";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean3 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean3);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertNotNull(sTGroup1);
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string2));
      
      Set<String> set1 = Grammar.tokenOptions;
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string2));
      assertFalse(set1.equals((Object)set0));
      
      String string3 = "Fx{m";
  }
}
