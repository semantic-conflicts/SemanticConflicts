/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:32:16 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ToolANTLRLexer;
import org.antlr.v4.runtime.atn.ATNState;
import org.antlr.v4.runtime.atn.RuleStartState;
import org.antlr.v4.runtime.atn.RuleTransition;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      PredAST predAST0 = new PredAST(int0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(29, predAST0.getType());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertFalse(predAST0.isNil());
      assertNotNull(predAST0);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertFalse(boolean1);
      assertEquals((-1), predAST0.childIndex);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(29, predAST0.getType());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertFalse(predAST0.isNil());
      
      boolean boolean2 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        python3Target0.getElementListName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      RuleStartState ruleStartState0 = new RuleStartState();
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(0, ruleStartState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertFalse(ruleStartState0.epsilonOnlyTransitions);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals((-1), ruleStartState0.stateNumber);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertFalse(ruleStartState0.isLeftRecursiveRule);
      assertFalse(ruleStartState0.isNonGreedyExitState());
      assertFalse(ruleStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, ruleStartState0.getNumberOfTransitions());
      assertEquals("-1", ruleStartState0.toString());
      assertEquals(2, ruleStartState0.getStateType());
      assertNotNull(ruleStartState0);
      
      RuleTransition ruleTransition0 = new RuleTransition(ruleStartState0, ruleStartState0.TOKEN_START, ruleStartState0.INVALID_TYPE, ruleStartState0);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(0, ruleStartState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertFalse(ruleStartState0.epsilonOnlyTransitions);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals((-1), ruleStartState0.stateNumber);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertFalse(ruleStartState0.isLeftRecursiveRule);
      assertEquals(2, Transition.RANGE);
      assertEquals(10, Transition.PRECEDENCE);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(1, Transition.EPSILON);
      assertEquals(6, Transition.ACTION);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(5, Transition.ATOM);
      assertEquals(7, Transition.SET);
      assertEquals(9, Transition.WILDCARD);
      assertEquals(3, Transition.RULE);
      assertEquals(6, ruleTransition0.ruleIndex);
      assertEquals(0, ruleTransition0.precedence);
      assertFalse(ruleStartState0.isNonGreedyExitState());
      assertFalse(ruleStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, ruleStartState0.getNumberOfTransitions());
      assertEquals("-1", ruleStartState0.toString());
      assertEquals(2, ruleStartState0.getStateType());
      assertEquals(3, ruleTransition0.getSerializationType());
      assertTrue(ruleTransition0.isEpsilon());
      assertNotNull(ruleTransition0);
      
      String string0 = "";
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) ruleTransition0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.runtime.atn.RuleTransition cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-737);
      String string0 = "dir";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-737), classicToken0.getType());
      assertEquals("dir", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      
      GrammarAST grammarAST0 = new GrammarAST(int0, classicToken0, string0);
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-737), classicToken0.getType());
      assertEquals("dir", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-737), grammarAST0.getType());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-737), classicToken0.getType());
      assertEquals("dir", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-737), grammarAST0.getType());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      
      String string1 = "";
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(string0));
      assertFalse(set0.contains(string1));
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Set<String> set1 = Grammar.ruleOptions;
      assertNotSame(set1, set0);
      assertFalse(set1.equals((Object)set0));
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(string0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "";
      stringArray0[2] = string1;
      String string2 = "4Klr#c)];wihg.[7";
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      boolean boolean1 = true;
      String string3 = python3Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, stringArray0[0], boolean1);
      assertEquals("\".5.2.\"", string3);
      assertEquals(5, stringArray0.length);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(string3);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "";
      String string1 = "zwgz/m7j9fGtr'~r3P";
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = python3Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("zwgz/m7j9fGtr'~r3P", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "yUg=)!`";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = (-737);
      int int1 = 1;
      String string1 = "dir";
      ClassicToken classicToken0 = new ClassicToken(int1, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("dir", classicToken0.getText());
      assertEquals(1, classicToken0.getType());
      assertNotNull(classicToken0);
      
      GrammarAST grammarAST0 = new GrammarAST(int0, classicToken0, string1);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("dir", classicToken0.getText());
      assertEquals(1, classicToken0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals((-737), grammarAST0.getType());
      assertNotNull(grammarAST0);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean1);
      assertEquals((-1), grammarAST0.childIndex);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("dir", classicToken0.getText());
      assertEquals(1, classicToken0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals((-737), grammarAST0.getType());
      
      String string2 = "3MsK@";
      int int2 = 1176;
      RuleAST ruleAST0 = null;
      try {
        ruleAST0 = new RuleAST(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1176
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      String string0 = ");-\"4y-@H>Y";
      int int0 = 3411;
      RuleAST ruleAST0 = null;
      try {
        ruleAST0 = new RuleAST(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3411
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      String string0 = null;
      String[] stringArray0 = null;
      Tool tool0 = null;
      try {
        tool0 = new Tool(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      
      int int0 = 1473;
      String string0 = "";
      ANTLRFileStream aNTLRFileStream0 = null;
      try {
        aNTLRFileStream0 = new ANTLRFileStream(string0, string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      String string0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(boolean0);
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(boolean1);
      assertEquals((-1), grammarAST0.childIndex);
      assertTrue(boolean1 == boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(string0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      int int0 = (-2598);
      PredAST predAST0 = null;
      try {
        predAST0 = new PredAST(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2598
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }
}
