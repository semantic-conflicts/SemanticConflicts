/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:36:54 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.SequenceInputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.UnbufferedTokenStream;
import org.antlr.runtime.tree.TreeWizard;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.parse.ActionSplitterListener;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STErrorListener;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;
import org.stringtemplate.v4.misc.ErrorManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      
      STGroup sTGroup1 = python3Target0.getTemplates();
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup1);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, int0);
      
      CommonToken commonToken0 = new CommonToken(sTGroup0.delimiterStopChar, sTGroup1.GROUP_FILE_EXTENSION);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(commonToken0);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      String string0 = "divmod";
      commonToken0.setText(string0);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      TerminalAST terminalAST0 = new TerminalAST(commonToken0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(terminalAST0);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      String string1 = "KK(k";
      String string2 = terminalAST0.getOptionString(string1);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup1, sTGroup0);
      assertNotSame(string1, string0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), terminalAST0.childIndex);
      assertNull(string2);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(boolean2);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "org.antlr.v4.runtime.atn.ParseInfo";
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("org.antlr.v4.runtime.atn.ParseInfo", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.contains(string1));
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      
      String string2 = "repr";
      String string3 = python3Target_PythonStringRenderer0.toString((Object) string1, string2, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("repr", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = 3;
      ActionSplitterListener actionSplitterListener0 = null;
      String string4 = "j`<$i)";
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertNotNull(commonToken0);
      
      GrammarAST grammarAST0 = new GrammarAST(commonToken0);
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getType());
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getType());
      assertFalse(boolean0);
      assertEquals((-1), grammarAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(sequenceInputStream0);
      
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) sequenceInputStream0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.SequenceInputStream cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        python3Target0.getImplicitTokenLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer1 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer1);
      assertFalse(python3Target_PythonStringRenderer1.equals((Object)python3Target_PythonStringRenderer0));
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(29, int0);
      
      TreeWizard.TreePatternTreeAdaptor treeWizard_TreePatternTreeAdaptor0 = new TreeWizard.TreePatternTreeAdaptor();
      assertNotNull(treeWizard_TreePatternTreeAdaptor0);
      
      String string0 = "}8ZQh";
      CommonToken commonToken0 = (CommonToken)treeWizard_TreePatternTreeAdaptor0.createToken(int0, string0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      TerminalAST terminalAST0 = new TerminalAST(commonToken0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(terminalAST0);
      
      Object object0 = terminalAST0.deleteChild(int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.childIndex);
      assertNull(object0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(29, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertFalse(boolean0);
      assertEquals((-1), terminalAST0.childIndex);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      String string0 = python3Target0.getVersion();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      int int0 = 3138;
      String string1 = python3Target0.encodeIntAsCharEscape(int0);
      assertNotSame(string1, string0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("\\u0c42", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "i6";
      STErrorListener sTErrorListener0 = ErrorManager.DEFAULT_ERROR_LISTENER;
      assertNotNull(sTErrorListener0);
      
      ErrorManager errorManager0 = new ErrorManager(sTErrorListener0);
      assertNotNull(errorManager0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = "Rk<8x";
      String string2 = locale0.getScript();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = new int[2];
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string3 = "vars";
      String string4 = StringRenderer.escapeHTML(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("vars", string4);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "";
      String string6 = python3Target_PythonStringRenderer0.toString((Object) string1, string5, locale0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      int int0 = 0;
      ActionAST actionAST0 = new ActionAST(int0);
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      
      CommonToken commonToken0 = new CommonToken(actionAST0.token);
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(commonToken0);
      
      actionAST0.token = (Token) commonToken0;
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), actionAST0.token.getTokenIndex());
      assertEquals(0, actionAST0.token.getType());
      assertEquals(0, actionAST0.token.getChannel());
      assertEquals((-1), actionAST0.token.getCharPositionInLine());
      assertEquals(0, actionAST0.token.getLine());
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(boolean0);
      assertEquals((-1), actionAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      
      String string0 = "execfile";
      String string1 = "YuP-Kg<T_3<X9}E26";
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      
      // Undeclared exception!
      try { 
        python3Target0.getImplicitTokenLabel(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      String string0 = null;
      String string1 = python3Target0.getTargetStringLiteralFromString(string0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(string1);
      
      python3Target0.addBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertNotNull(set1);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 181;
      PredAST predAST0 = null;
      try {
        predAST0 = new PredAST(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 181
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Rule rule0 = null;
      int int0 = 0;
      Alternative alternative0 = new Alternative(rule0, int0);
      assertEquals(0, alternative0.altNum);
      assertNotNull(alternative0);
      
      Stack<ActionAST> stack0 = new Stack<ActionAST>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      alternative0.actions = (List<ActionAST>) stack0;
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(alternative0.actions.isEmpty());
      assertEquals(0, alternative0.actions.size());
      
      AltAST altAST0 = alternative0.ast;
      assertNull(altAST0);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      int int0 = (-2046);
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      int int1 = 0;
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      
      STGroup sTGroup1 = python3Target0.getTemplates();
      assertNotSame(sTGroup1, sTGroup0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertNotNull(sTGroup1);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      STGroup sTGroup2 = python3Target0.loadTemplates();
      assertNotSame(sTGroup2, sTGroup0);
      assertNotSame(sTGroup2, sTGroup1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup2);
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(set1);
      
      boolean boolean2 = python3Target0.wantsBaseListener();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      CommonToken commonToken0 = new CommonToken(sTGroup0.delimiterStopChar, sTGroup2.GROUP_FILE_EXTENSION);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(commonToken0);
      assertFalse(sTGroup0.equals((Object)sTGroup2));
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      
      String string0 = "divmod";
      commonToken0.setText(string0);
      assertNotSame(sTGroup0, sTGroup2);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup2, sTGroup0);
      assertNotSame(sTGroup2, sTGroup1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.equals((Object)sTGroup2));
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      
      TerminalAST terminalAST0 = new TerminalAST(commonToken0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(terminalAST0);
      assertFalse(sTGroup0.equals((Object)sTGroup2));
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      
      String string1 = "KK(k";
      String string2 = terminalAST0.getOptionString(string1);
      assertNotSame(string1, string0);
      assertNotSame(sTGroup0, sTGroup2);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup2, sTGroup0);
      assertNotSame(sTGroup2, sTGroup1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(sTGroup0.equals((Object)sTGroup2));
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      
      boolean boolean3 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertNotSame(sTGroup0, sTGroup2);
      assertNotSame(sTGroup0, sTGroup1);
      assertNotSame(sTGroup2, sTGroup0);
      assertNotSame(sTGroup2, sTGroup1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(62, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup2.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertTrue(boolean3);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(sTGroup0.equals((Object)sTGroup2));
      assertFalse(sTGroup0.equals((Object)sTGroup1));
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "org.antlr.v4.runtime.atn.ParseInfo";
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("org.antlr.v4.runtime.atn.ParseInfo", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string2 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.antlr.v4.runtime.atn.ParseInfo", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      String string3 = null;
      Set<String> set1 = python3Target0.getBadWords();
      assertFalse(set1.contains(string2));
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertNotNull(set1);
      assertFalse(set1.equals((Object)set0));
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      String string4 = "repr";
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = python3Target_PythonStringRenderer0.toString((Object) string2, string4, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(locale0, locale1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("repr", string5);
      assertNotNull(string5);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = (-1499);
      int int1 = 3;
      ActionSplitterListener actionSplitterListener0 = null;
      String string6 = "j`<$i)";
      String string7 = python3Target0.getVersion();
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = sTGroup0.delimiterStartChar;
      charArray0[1] = sTGroup0.delimiterStopChar;
      int int2 = 2099;
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, int2);
      assertArrayEquals(new char[] {'<', '>'}, charArray0);
      assertEquals(2099, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(2, charArray0.length);
      assertNotNull(aNTLRStringStream0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRStringStream0);
      assertArrayEquals(new char[] {'<', '>'}, charArray0);
      assertEquals(2099, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(2, charArray0.length);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(43, ANTLRLexer.OR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertNotNull(aNTLRLexer0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.emit();
      assertArrayEquals(new char[] {'<', '>'}, charArray0);
      assertEquals(2099, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(2, charArray0.length);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(43, ANTLRLexer.OR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertNotNull(commonToken0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      AltAST altAST0 = new AltAST(commonToken0);
      assertArrayEquals(new char[] {'<', '>'}, charArray0);
      assertEquals(2099, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(2, charArray0.length);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(43, ANTLRLexer.OR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
