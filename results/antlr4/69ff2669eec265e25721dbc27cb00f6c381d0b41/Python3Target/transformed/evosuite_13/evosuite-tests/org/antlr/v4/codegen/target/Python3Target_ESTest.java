/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 07:48:10 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.IdentityHashMap;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.OutputModelFactory;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.LexerInterpreter;
import org.antlr.v4.runtime.UnbufferedCharStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNState;
import org.antlr.v4.runtime.atn.ATNType;
import org.antlr.v4.runtime.atn.ArrayPredictionContext;
import org.antlr.v4.runtime.atn.AtomTransition;
import org.antlr.v4.runtime.atn.BlockEndState;
import org.antlr.v4.runtime.atn.EmptyPredictionContext;
import org.antlr.v4.runtime.atn.PredictionContext;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean1 == boolean0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Token token0 = null;
      int int0 = (-72);
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup1);
      
      int int1 = (-3338);
      RuleAST ruleAST0 = null;
      try {
        ruleAST0 = new RuleAST(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3338
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Tool tool0 = null;
      String string0 = "";
      String string1 = ".8 x";
      String string2 = "False";
      LexerGrammar lexerGrammar0 = null;
      Grammar grammar0 = null;
      try {
        grammar0 = new Grammar(string2, lexerGrammar0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      int int0 = 30;
      AltAST altAST0 = new AltAST(int0);
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(30, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(30, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = null;
      String string1 = StringRenderer.escapeHTML(string0);
      assertNull(string1);
      
      Object object0 = null;
      String string2 = null;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = python3Target_PythonStringRenderer0.toString(object0, string2, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNull(string3);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      recognizerSharedState1.tokenStartLine = recognizerSharedState0.backtracking;
      TerminalAST terminalAST0 = new TerminalAST(token0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(terminalAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      
      String string4 = python3Target_PythonStringRenderer0.toString((Object) string3, python3Target0.language, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(string4);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean1);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertTrue(boolean1 == boolean0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(set0);
      
      int[] intArray0 = new int[0];
      String[] stringArray0 = python3Target0.getTokenTypesAsTargetLabels(terminalAST0.g, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(stringArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertFalse(set1.isEmpty());
      assertEquals(3, set1.size());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(set1);
      
      terminalAST0.childIndex = recognizerSharedState0.type;
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean2);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      
      boolean boolean3 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean3);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      
      boolean boolean4 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean4);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertTrue(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, terminalAST0.childIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      
      // Undeclared exception!
      try { 
        python3Target0.getTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      GrammarAST grammarAST0 = null;
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      BlockEndState blockEndState0 = new BlockEndState();
      assertEquals(8, blockEndState0.getStateType());
      assertFalse(blockEndState0.isNonGreedyExitState());
      assertFalse(blockEndState0.onlyHasEpsilonTransitions());
      assertEquals(0, blockEndState0.getNumberOfTransitions());
      assertEquals("-1", blockEndState0.toString());
      assertEquals(8, ATNState.BLOCK_END);
      assertFalse(blockEndState0.epsilonOnlyTransitions);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(0, blockEndState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals((-1), blockEndState0.stateNumber);
      assertNotNull(blockEndState0);
      
      AtomTransition atomTransition0 = new AtomTransition(blockEndState0, blockEndState0.BASIC);
      assertEquals(8, blockEndState0.getStateType());
      assertFalse(blockEndState0.isNonGreedyExitState());
      assertFalse(blockEndState0.onlyHasEpsilonTransitions());
      assertEquals(0, blockEndState0.getNumberOfTransitions());
      assertEquals("-1", blockEndState0.toString());
      assertEquals(5, atomTransition0.getSerializationType());
      assertFalse(atomTransition0.isEpsilon());
      assertEquals("1", atomTransition0.toString());
      assertEquals(8, ATNState.BLOCK_END);
      assertFalse(blockEndState0.epsilonOnlyTransitions);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(0, blockEndState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals((-1), blockEndState0.stateNumber);
      assertEquals(1, Transition.EPSILON);
      assertEquals(5, Transition.ATOM);
      assertEquals(2, Transition.RANGE);
      assertEquals(10, Transition.PRECEDENCE);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(1, atomTransition0.label);
      assertEquals(7, Transition.SET);
      assertEquals(6, Transition.ACTION);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(9, Transition.WILDCARD);
      assertEquals(3, Transition.RULE);
      assertNotNull(atomTransition0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PredictionContext[] predictionContextArray0 = new PredictionContext[7];
      EmptyPredictionContext emptyPredictionContext0 = PredictionContext.EMPTY;
      assertEquals("$", emptyPredictionContext0.toString());
      assertEquals(1, emptyPredictionContext0.size());
      assertTrue(emptyPredictionContext0.isEmpty());
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(0, PredictionContext.globalNodeCount);
      assertEquals(0, emptyPredictionContext0.id);
      assertEquals(1364076727, emptyPredictionContext0.cachedHashCode);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext0.returnState);
      assertNotNull(emptyPredictionContext0);
      
      PredictionContext predictionContext0 = emptyPredictionContext0.getParent(blockEndState0.RULE_STOP);
      assertEquals(8, blockEndState0.getStateType());
      assertFalse(blockEndState0.isNonGreedyExitState());
      assertFalse(blockEndState0.onlyHasEpsilonTransitions());
      assertEquals(0, blockEndState0.getNumberOfTransitions());
      assertEquals("-1", blockEndState0.toString());
      assertEquals("$", emptyPredictionContext0.toString());
      assertEquals(1, emptyPredictionContext0.size());
      assertTrue(emptyPredictionContext0.isEmpty());
      assertEquals(8, ATNState.BLOCK_END);
      assertFalse(blockEndState0.epsilonOnlyTransitions);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(0, blockEndState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals((-1), blockEndState0.stateNumber);
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(0, PredictionContext.globalNodeCount);
      assertEquals(0, emptyPredictionContext0.id);
      assertEquals(1364076727, emptyPredictionContext0.cachedHashCode);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext0.returnState);
      assertNull(predictionContext0);
      
      predictionContextArray0[0] = predictionContext0;
      EmptyPredictionContext emptyPredictionContext1 = (EmptyPredictionContext)PredictionContext.mergeRoot(predictionContext0.EMPTY, emptyPredictionContext0, blockEndState0.epsilonOnlyTransitions);
      assertSame(emptyPredictionContext0, emptyPredictionContext1);
      assertSame(emptyPredictionContext1, emptyPredictionContext0);
      assertEquals(8, blockEndState0.getStateType());
      assertFalse(blockEndState0.isNonGreedyExitState());
      assertFalse(blockEndState0.onlyHasEpsilonTransitions());
      assertEquals(0, blockEndState0.getNumberOfTransitions());
      assertEquals("-1", blockEndState0.toString());
      assertEquals("$", emptyPredictionContext0.toString());
      assertEquals(1, emptyPredictionContext0.size());
      assertTrue(emptyPredictionContext0.isEmpty());
      assertTrue(emptyPredictionContext1.isEmpty());
      assertEquals("$", emptyPredictionContext1.toString());
      assertEquals(1, emptyPredictionContext1.size());
      assertEquals(8, ATNState.BLOCK_END);
      assertFalse(blockEndState0.epsilonOnlyTransitions);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(1, ATNState.BASIC);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(0, blockEndState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals((-1), blockEndState0.stateNumber);
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(0, PredictionContext.globalNodeCount);
      assertEquals(0, emptyPredictionContext0.id);
      assertEquals(1364076727, emptyPredictionContext0.cachedHashCode);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext0.returnState);
      assertEquals(0, PredictionContext.globalNodeCount);
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(0, emptyPredictionContext1.id);
      assertEquals(1364076727, emptyPredictionContext1.cachedHashCode);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext1.returnState);
      assertNotNull(emptyPredictionContext1);
      
      predictionContextArray0[1] = (PredictionContext) emptyPredictionContext1;
      ArrayPredictionContext arrayPredictionContext0 = new ArrayPredictionContext(emptyPredictionContext0);
      assertEquals("$", emptyPredictionContext0.toString());
      assertEquals(1, emptyPredictionContext0.size());
      assertTrue(emptyPredictionContext0.isEmpty());
      assertEquals(1, arrayPredictionContext0.size());
      assertTrue(arrayPredictionContext0.isEmpty());
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(1, PredictionContext.globalNodeCount);
      assertEquals(0, emptyPredictionContext0.id);
      assertEquals(1364076727, emptyPredictionContext0.cachedHashCode);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext0.returnState);
      assertEquals(786443632, arrayPredictionContext0.cachedHashCode);
      assertEquals(1, PredictionContext.globalNodeCount);
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(0, arrayPredictionContext0.id);
      assertNotNull(arrayPredictionContext0);
      
      predictionContextArray0[2] = (PredictionContext) arrayPredictionContext0;
      PredictionContextCache predictionContextCache0 = new PredictionContextCache();
      assertEquals(0, predictionContextCache0.size());
      assertNotNull(predictionContextCache0);
      
      IdentityHashMap<PredictionContext, PredictionContext> identityHashMap0 = new IdentityHashMap<PredictionContext, PredictionContext>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      EmptyPredictionContext emptyPredictionContext2 = (EmptyPredictionContext)PredictionContext.getCachedContext(predictionContextArray0[1], predictionContextCache0, identityHashMap0);
      assertEquals(7, predictionContextArray0.length);
      assertSame(emptyPredictionContext2, emptyPredictionContext1);
      assertSame(emptyPredictionContext2, emptyPredictionContext0);
      assertEquals(0, predictionContextCache0.size());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals("$", emptyPredictionContext2.toString());
      assertTrue(emptyPredictionContext2.isEmpty());
      assertEquals(1, emptyPredictionContext2.size());
      assertEquals(0, emptyPredictionContext2.id);
      assertEquals(Integer.MAX_VALUE, emptyPredictionContext2.returnState);
      assertEquals(Integer.MAX_VALUE, PredictionContext.EMPTY_RETURN_STATE);
      assertEquals(1364076727, emptyPredictionContext2.cachedHashCode);
      assertEquals(1, PredictionContext.globalNodeCount);
      assertNotNull(emptyPredictionContext2);
      
      predictionContextArray0[3] = (PredictionContext) emptyPredictionContext2;
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OutputModelFactory outputModelFactory0 = null;
      OutputModelController outputModelController0 = new OutputModelController(outputModelFactory0);
      assertEquals((-1), outputModelController0.getCodeBlockLevel());
      assertEquals((-1), outputModelController0.treeLevel);
      assertEquals((-1), outputModelController0.codeBlockLevel);
      assertNotNull(outputModelController0);
      
      // Undeclared exception!
      try { 
        outputModelController0.getGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.OutputModelController", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "2h\"H1SR'LK";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("2h\"H1SR'LK", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = new STGroup();
      assertNull(sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      
      python3Target0.templates = sTGroup0;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(sTGroup0.getFileName());
      assertNull(python3Target0.templates.getFileName());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(string0);
      
      String string1 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string1);
      assertSame(string1, string0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.templatesExist();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertTrue(boolean1 == boolean0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) python3Target0, python3Target0.language, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python3Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = null;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      recognizerSharedState1.tokenStartLine = recognizerSharedState0.backtracking;
      TerminalAST terminalAST0 = new TerminalAST(token0);
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(terminalAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), terminalAST0.childIndex);
      
      String string2 = python3Target_PythonStringRenderer0.toString((Object) string1, python3Target0.language, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(string2);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean1);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertTrue(boolean1 == boolean0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), terminalAST0.childIndex);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(set0);
      
      int[] intArray0 = new int[0];
      String[] stringArray0 = python3Target0.getTokenTypesAsTargetLabels(terminalAST0.g, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(stringArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertEquals(3, set1.size());
      assertFalse(set1.isEmpty());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(set1);
      
      terminalAST0.childIndex = recognizerSharedState0.type;
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean2);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, terminalAST0.childIndex);
      
      boolean boolean3 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(boolean3);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertTrue(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, terminalAST0.childIndex);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org/antlr/v4/tool/templates/codegen/null/null.stg");
      String string0 = "True";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      STGroup sTGroup0 = new STGroup();
      assertNull(sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("org/antlr/v4/tool/templates/codegen/null/null.stg");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertTrue(boolean1);
      assertNotSame(evoSuiteFile1, evoSuiteFile0);
      assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
      assertTrue(boolean1 == boolean0);
      
      python3Target0.templates = sTGroup0;
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(sTGroup0.getFileName());
      assertNull(python3Target0.templates.getFileName());
      
      String string1 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string1);
      assertNotSame(string1, string0);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringRenderer.escapeHTML(python3Target0.templates.DICT_KEY);
      assertEquals("key", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/null/null.stg", sTGroup1.getFileName());
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup1);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertTrue(int1 == int0);
      
      STGroup sTGroup2 = python3Target0.loadTemplates();
      assertNotSame(sTGroup2, sTGroup1);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/null/null.stg", sTGroup2.getFileName());
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup2);
  }
}
