/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 08:08:57 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.antlr.runtime.tree.TreeAdaptor;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.OutputModelFactory;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.Choice;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.CodeBlockForOuterMostAlt;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.Decl;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ActionSplitter;
import org.antlr.v4.parse.ToolANTLRLexer;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python3Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "0O:k[`xwAk";
      String string1 = "buffer";
      String string2 = "";
      Locale locale0 = null;
      try {
        locale0 = new Locale(string2, string2, python3Target0.language);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python3Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      OutputModelFactory outputModelFactory0 = null;
      OutputModelController outputModelController0 = new OutputModelController(outputModelFactory0);
      assertEquals((-1), outputModelController0.getCodeBlockLevel());
      assertNotNull(outputModelController0);
      assertEquals((-1), outputModelController0.codeBlockLevel);
      assertEquals((-1), outputModelController0.treeLevel);
      
      // Undeclared exception!
      try { 
        outputModelController0.getGrammar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.OutputModelController", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      int int0 = (-233);
      ClassicToken classicToken0 = new ClassicToken(int0, python3Target0.language);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-233), classicToken0.getType());
      assertNotNull(classicToken0);
      
      RuleAST ruleAST0 = new RuleAST(classicToken0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-233), classicToken0.getType());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-233), ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertNotNull(ruleAST0);
      assertEquals((-1), ruleAST0.childIndex);
      
      GrammarAST grammarAST0 = new GrammarAST(ruleAST0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-233), classicToken0.getType());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-233), ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-233), grammarAST0.getType());
      assertNotNull(grammarAST0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-233), classicToken0.getType());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-233), ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-233), grammarAST0.getType());
      assertFalse(boolean0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), grammarAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.templatesExist();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean0);
      
      String string0 = "<";
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      python3Target0.addBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      // Undeclared exception!
      try { 
        python3Target0.getElementListName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      int int0 = 67;
      RuleAST ruleAST0 = new RuleAST(int0);
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(67, ruleAST0.getType());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertNotNull(ruleAST0);
      assertEquals((-1), ruleAST0.childIndex);
      
      RuleAST ruleAST1 = new RuleAST(ruleAST0);
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(67, ruleAST0.getType());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals((-1), ruleAST1.getTokenStopIndex());
      assertEquals((-1), ruleAST1.getChildIndex());
      assertEquals(0, ruleAST1.getNumberOfOptions());
      assertEquals((-1), ruleAST1.getTokenStartIndex());
      assertEquals(0, ruleAST1.getLine());
      assertEquals(0, ruleAST1.getChildCount());
      assertEquals(0, ruleAST1.getCharPositionInLine());
      assertEquals(67, ruleAST1.getType());
      assertFalse(ruleAST1.isNil());
      assertNotNull(ruleAST1);
      assertFalse(ruleAST1.equals((Object)ruleAST0));
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), ruleAST1.childIndex);
      
      // Undeclared exception!
      try { 
        python3Target0.grammarSymbolCausesIssueInGeneratedCode(ruleAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python3Target0.getImplicitRuleLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string1 = "Unexpected default value token type.";
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = python3Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Unexpected default value token type.", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "`H";
      String string1 = "p";
      String string2 = "";
      Locale locale0 = new Locale(string0, string1, string2);
      assertEquals("`h_P", locale0.toString());
      assertEquals("P", locale0.getCountry());
      assertEquals("`h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("`h", locale0.getISO3Language());
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("`h_P", locale0.toString());
      assertEquals("P", locale0.getCountry());
      assertEquals("`h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("`h", locale0.getISO3Language());
      assertEquals("`H", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Object object0 = null;
      String string4 = "";
      Locale locale1 = Locale.GERMAN;
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = python3Target_PythonStringRenderer0.toString(object0, string4, locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(locale1, locale0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      ErrorType errorType0 = ErrorType.TOKEN_NAME_REASSIGNMENT;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader(python3Target0.language);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "49a;zYxW\\LVBGI";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("49a;zYxW\\LVBGI", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "zPL.fxz ?Za8Fq1KHr";
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = python3Target_PythonStringRenderer0.toString((Object) string0, string2, locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("zPL.fxz ?Za8Fq1KHr", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(locale1, locale0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer1 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer1);
      assertFalse(python3Target_PythonStringRenderer1.equals((Object)python3Target_PythonStringRenderer0));
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer2 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer2);
      assertFalse(python3Target_PythonStringRenderer2.equals((Object)python3Target_PythonStringRenderer1));
      assertFalse(python3Target_PythonStringRenderer2.equals((Object)python3Target_PythonStringRenderer0));
      
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.templatesExist();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, int0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = "";
      boolean boolean0 = true;
      String string1 = python3Target0.getTargetStringLiteralFromString(string0, boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("\"\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set1 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertSame(set1, set0);
      assertFalse(set1.contains(string1));
      assertNotNull(set1);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, int0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = python3Target0.language;
      stringArray0[1] = sTGroup0.GROUP_FILE_EXTENSION;
      stringArray0[2] = sTGroup0.DEFAULT_KEY;
      stringArray0[3] = sTGroup0.DICT_KEY;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      stringArray0[4] = sTGroup0.DICT_KEY;
      stringArray0[5] = sTGroup0.DICT_KEY;
      Tool tool0 = null;
      try {
        tool0 = new Tool(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }
}
