/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 07:53:47 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.ExceptionClause;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.AltLabelStructDecl;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.atn.RuleStartState;
import org.antlr.v4.runtime.atn.RuleTransition;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.Attribute;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "w^s.5j";
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, int0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer();
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertNotNull(aNTLRLexer0);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      
      // Undeclared exception!
      try { 
        aNTLRLexer0.synpred2_ANTLRLexer_fragment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(python3Target0.python3Keywords);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org/antlr/v4/tool/templates/codegen/null/null.stg");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      String string0 = "S (Q~f[t+Nf";
      Grammar grammar0 = null;
      Tool tool0 = null;
      DefaultToolListener defaultToolListener0 = new DefaultToolListener(tool0);
      assertNotNull(defaultToolListener0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        python3Target0.getListLabel(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = 1520;
      CommonToken commonToken0 = new CommonToken(int0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(1520, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      ClassicToken classicToken0 = new ClassicToken(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(1520, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(1520, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      
      STGroup sTGroup0 = python3Target0.templates;
      assertNull(sTGroup0);
      
      classicToken0.setChannel(int0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(1520, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(1520, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(1520, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      
      python3Target0.templates = sTGroup0;
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      
      AltAST altAST0 = new AltAST(int0, classicToken0, python3Target0.language);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(1520, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(1520, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(1520, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(1520, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(1520, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(1520, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(1520, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(1520, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(boolean0);
      assertEquals((-1), altAST0.childIndex);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = ":\"";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("Taiwan", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      String string2 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(":\"", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "K=G={G#d48,.^:,";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      String string2 = locale0.toLanguageTag();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      String string3 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("K=G={G#d48,.^:,", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.templatesExist();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Python3Target.python3Keywords = python3Target0.python3Keywords;
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = python3Target0.wantsBaseVisitor();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        python3Target0.getAltLabelContextStructName(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      String string0 = "N>8r$D;";
      Set<String> set0 = Grammar.LexerBlockOptions;
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, python3Target0.badWords.size());
      assertTrue(python3Target0.badWords.isEmpty());
      
      // Undeclared exception!
      try { 
        python3Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean0);
      
      String string0 = python3Target0.getVersion();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      int int0 = (-749);
      ClassicToken classicToken0 = new ClassicToken(int0, string0, int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("4.5.2.1", classicToken0.getText());
      assertEquals((-749), classicToken0.getChannel());
      assertEquals((-749), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNotNull(classicToken0);
      
      BlockAST blockAST0 = new BlockAST(int0, classicToken0, python3Target0.language);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("4.5.2.1", classicToken0.getText());
      assertEquals((-749), classicToken0.getChannel());
      assertEquals((-749), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-749), blockAST0.getType());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      
      BlockAST blockAST1 = new BlockAST(blockAST0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("4.5.2.1", classicToken0.getText());
      assertEquals((-749), classicToken0.getChannel());
      assertEquals((-749), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-749), blockAST0.getType());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertFalse(blockAST1.isNil());
      assertEquals(0, blockAST1.getChildCount());
      assertEquals(0, blockAST1.getCharPositionInLine());
      assertEquals((-1), blockAST1.getChildIndex());
      assertEquals(0, blockAST1.getTokenStartIndex());
      assertEquals(0, blockAST1.getLine());
      assertEquals(0, blockAST1.getNumberOfOptions());
      assertEquals(0, blockAST1.getTokenStopIndex());
      assertEquals((-749), blockAST1.getType());
      assertFalse(blockAST1.equals((Object)blockAST0));
      assertNotNull(blockAST1);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), blockAST1.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("4.5.2.1", classicToken0.getText());
      assertEquals((-749), classicToken0.getChannel());
      assertEquals((-749), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-749), blockAST0.getType());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertFalse(blockAST1.isNil());
      assertEquals(0, blockAST1.getChildCount());
      assertEquals(0, blockAST1.getCharPositionInLine());
      assertEquals((-1), blockAST1.getChildIndex());
      assertEquals(0, blockAST1.getTokenStartIndex());
      assertEquals(0, blockAST1.getLine());
      assertEquals(0, blockAST1.getNumberOfOptions());
      assertEquals(0, blockAST1.getTokenStopIndex());
      assertEquals((-749), blockAST1.getType());
      assertFalse(boolean0);
      assertFalse(blockAST0.equals((Object)blockAST1));
      assertFalse(blockAST1.equals((Object)blockAST0));
      assertNotSame(blockAST0, blockAST1);
      assertNotSame(blockAST1, blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), blockAST1.childIndex);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.templatesExist();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean0);
      
      int int0 = 2330;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python3Target0.badWords.isEmpty());
      assertEquals(0, python3Target0.badWords.size());
      
      String string0 = python3Target0.encodeIntAsCharEscape(int0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("\\u091a", string0);
      assertNotNull(string0);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        python3Target0.addBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      STGroup sTGroup0 = null;
      python3Target0.templates = sTGroup0;
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(29, int0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      String[] stringArray0 = new String[0];
      python3Target0.targetCharValueEscape = stringArray0;
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      
      STGroup sTGroup1 = python3Target0.loadTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup1.getFileName());
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertNotNull(sTGroup1);
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertEquals('>', sTGroup1.delimiterStopChar);
      
      ParserFactory parserFactory0 = null;
      try {
        parserFactory0 = new ParserFactory(python3Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }
}
