/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 08:13:40 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.runtime.atn.ATNState;
import org.antlr.v4.runtime.atn.StarBlockStartState;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertTrue(boolean1 == boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      STGroup sTGroup0 = STGroup.defaultGroup;
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNull(sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      python3Target0.templates = sTGroup0;
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(sTGroup0.getFileName());
      assertNull(python3Target0.templates.getFileName());
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python3Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "c";
      LexerGrammar lexerGrammar0 = null;
      Grammar grammar0 = null;
      try {
        grammar0 = new Grammar(string0, lexerGrammar0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertTrue(boolean1 == boolean0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      LinkedList<Rule> linkedList0 = new LinkedList<Rule>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = 107;
      int int1 = 0;
      ClassicToken classicToken0 = new ClassicToken(int1);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertFalse(int1 == int0);
      assertNotNull(classicToken0);
      
      ActionAST actionAST0 = new ActionAST(int0, classicToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(actionAST0);
      
      StarBlockStartState starBlockStartState0 = new StarBlockStartState();
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals((-1), starBlockStartState0.decision);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals((-1), starBlockStartState0.stateNumber);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(8, ATNState.BLOCK_END);
      assertFalse(starBlockStartState0.epsilonOnlyTransitions);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(0, starBlockStartState0.ruleIndex);
      assertFalse(starBlockStartState0.nonGreedy);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertFalse(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals("-1", starBlockStartState0.toString());
      assertNotNull(starBlockStartState0);
      
      actionAST0.atnState = (ATNState) starBlockStartState0;
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertFalse(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals("-1", starBlockStartState0.toString());
      assertEquals("-1", actionAST0.atnState.toString());
      assertFalse(actionAST0.atnState.onlyHasEpsilonTransitions());
      assertFalse(actionAST0.atnState.isNonGreedyExitState());
      assertEquals(0, actionAST0.atnState.getNumberOfTransitions());
      
      actionAST0.sanityCheckParentAndChildIndexes();
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      classicToken0.setTokenIndex(actionAST0.childIndex);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Map<String, GrammarAST> map0 = actionAST0.getOptions();
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(map0);
      
      boolean boolean0 = true;
      starBlockStartState0.epsilonOnlyTransitions = boolean0;
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertTrue(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals("-1", starBlockStartState0.toString());
      
      actionAST0.setText(python3Target0.language);
      assertEquals((-1), actionAST0.childIndex);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean1);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(string0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean2);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("4.5.2.1", string1);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "$DFPt-NE";
      String string3 = StringRenderer.escapeHTML(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("$DFPt-N&#127;E", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = null;
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string5 = python3Target_PythonStringRenderer0.toString((Object) string1, string4, locale0);
      assertNotSame(string1, string2);
      assertSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertEquals("4.5.2.1", string5);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = "^[}*=)Id>u$E3";
      Locale locale1 = Locale.JAPAN;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string7 = python3Target_PythonStringRenderer0.toString(object0, string6, locale1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(locale1, locale0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertEquals("^[}*=)Id>u$E3", string7);
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = python3Target0.getVersion();
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string7);
      assertSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertEquals("4.5.2.1", string8);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      int int2 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int2);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string9 = "";
      String string10 = python3Target_PythonStringRenderer0.toString((Object) string2, string9, locale1);
      assertNotSame(string2, string10);
      assertNotSame(string2, string9);
      assertNotSame(string2, string8);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string7);
      assertNotSame(locale1, locale0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertNotSame(string9, string3);
      assertNotSame(string9, string10);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string5);
      assertNotSame(string10, string3);
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string2);
      assertNotSame(string10, string9);
      assertNotSame(string10, string5);
      assertNotSame(string10, string6);
      assertNotSame(string10, string1);
      assertNotSame(string10, string7);
      assertEquals("", string10);
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string7));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      
      int int3 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int3);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      python3Target0.addBadWords();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean3 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean3);
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(107, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      Token token0 = null;
      RuleAST ruleAST0 = new RuleAST(token0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertTrue(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertNotNull(ruleAST0);
      
      // Undeclared exception!
      try { 
        ruleAST0.getLexerAction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.tool.ast.RuleAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = (-1470);
      ClassicToken classicToken0 = new ClassicToken(int0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals((-1470), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNotNull(classicToken0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = python3Target0.language;
      stringArray0[1] = python3Target0.language;
      String string0 = "bool";
      String string1 = classicToken0.toString();
      assertNotSame(string1, string0);
      assertEquals("[@0,'<no text>',<-1470>,0:0]", string1);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals((-1470), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      stringArray0[2] = string0;
      stringArray0[3] = python3Target0.language;
      stringArray0[4] = python3Target0.language;
      stringArray0[5] = python3Target0.language;
      stringArray0[6] = python3Target0.language;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[7] = python3Target0.language;
      classicToken0.setChannel(int0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      
      python3Target0.targetCharValueEscape = stringArray0;
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      
      int int1 = (-84);
      String string2 = "open";
      classicToken0.setText(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      classicToken0.setTokenIndex(int1);
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ActionAST actionAST0 = new ActionAST(int0, classicToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals((-1470), actionAST0.getType());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-84), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-84), actionAST0.getTokenStartIndex());
      assertFalse(int0 == int1);
      assertNotNull(actionAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertTrue(boolean0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals((-1470), actionAST0.getType());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-84), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-84), actionAST0.getTokenStartIndex());
      assertFalse(int0 == int1);
      
      ActionAST actionAST1 = (ActionAST)actionAST0.dupTree();
      assertNotSame(actionAST0, actionAST1);
      assertNotSame(actionAST1, actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals((-1), actionAST1.childIndex);
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals((-1470), actionAST0.getType());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-84), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-84), actionAST0.getTokenStartIndex());
      assertEquals((-84), actionAST1.getTokenStopIndex());
      assertEquals((-1), actionAST1.getChildIndex());
      assertFalse(actionAST1.isNil());
      assertEquals((-84), actionAST1.getTokenStartIndex());
      assertEquals(0, actionAST1.getNumberOfOptions());
      assertEquals(0, actionAST1.getLine());
      assertEquals((-1470), actionAST1.getType());
      assertEquals(0, actionAST1.getChildCount());
      assertEquals(0, actionAST1.getCharPositionInLine());
      assertFalse(int0 == int1);
      assertFalse(actionAST1.equals((Object)actionAST0));
      assertNotNull(actionAST1);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertTrue(set0.contains(string0));
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertTrue(set1.contains(string0));
      assertFalse(set1.contains(string1));
      assertNotNull(set1);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertNotSame(actionAST0, actionAST1);
      assertEquals((-1), actionAST0.childIndex);
      assertTrue(boolean1);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals((-1470), actionAST0.getType());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-84), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-84), actionAST0.getTokenStartIndex());
      assertFalse(int0 == int1);
      assertFalse(actionAST0.equals((Object)actionAST1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertNotSame(actionAST0, actionAST1);
      assertEquals((-1), actionAST0.childIndex);
      assertTrue(boolean2);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("open", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-84), classicToken0.getTokenIndex());
      assertEquals((-1470), classicToken0.getType());
      assertEquals((-1470), classicToken0.getChannel());
      assertEquals((-1470), actionAST0.getType());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-84), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-84), actionAST0.getTokenStartIndex());
      assertFalse(int0 == int1);
      assertFalse(actionAST0.equals((Object)actionAST1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.getTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "STGroupDir(";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "XZ`x.*>tbc";
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("XZ`x.*&gt;tbc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringRenderer.escapeHTML(string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("XZ`x.*&gt;tbc", string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Transition.serializationNames;
      assertFalse(list0.isEmpty());
      assertEquals(11, list0.size());
      assertFalse(list0.contains(string2));
      assertNotNull(list0);
      
      String string3 = Locale.lookupTag(linkedList0, list0);
      assertEquals(0, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(11, list0.size());
      assertFalse(list0.contains(string2));
      assertNull(string3);
      
      String string4 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals("XZ`x.*>tbc", string4);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertEquals(84, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(set1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(string0);
      
      int int0 = 947;
      ClassicToken classicToken0 = new ClassicToken(int0, python3Target0.language);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("Python3", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(947, classicToken0.getType());
      assertNotNull(classicToken0);
      
      RuleAST ruleAST0 = new RuleAST(classicToken0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("Python3", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(947, classicToken0.getType());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(947, ruleAST0.getType());
      assertFalse(ruleAST0.isNil());
      assertNotNull(ruleAST0);
      
      RuleAST ruleAST1 = new RuleAST(ruleAST0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), ruleAST1.childIndex);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("Python3", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(947, classicToken0.getType());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(947, ruleAST0.getType());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST1.getTokenStopIndex());
      assertEquals(0, ruleAST1.getTokenStartIndex());
      assertEquals(0, ruleAST1.getLine());
      assertEquals(0, ruleAST1.getNumberOfOptions());
      assertEquals(947, ruleAST1.getType());
      assertEquals(0, ruleAST1.getCharPositionInLine());
      assertEquals(0, ruleAST1.getChildCount());
      assertFalse(ruleAST1.isNil());
      assertEquals((-1), ruleAST1.getChildIndex());
      assertFalse(ruleAST1.equals((Object)ruleAST0));
      assertNotNull(ruleAST1);
      
      // Undeclared exception!
      try { 
        ruleAST1.getLexerAction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.tool.ast.RuleAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      int int0 = 549;
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotNull(commonToken0);
      
      CommonToken commonToken1 = new CommonToken(commonToken0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(commonToken1);
      
      ClassicToken classicToken0 = new ClassicToken(commonToken1);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(classicToken0);
      
      AltAST altAST0 = new AltAST(int0, classicToken0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(549, altAST0.getType());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(altAST0);
      
      AltAST altAST1 = new AltAST(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(549, altAST0.getType());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getChildCount());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals(0, altAST1.getTokenStartIndex());
      assertFalse(altAST1.isNil());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(549, altAST1.getType());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(altAST1.equals((Object)altAST0));
      assertNotNull(altAST1);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST1);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertNotSame(altAST0, altAST1);
      assertNotSame(altAST1, altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertNull(classicToken0.getText());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(549, altAST0.getType());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getChildCount());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals(0, altAST1.getTokenStartIndex());
      assertFalse(altAST1.isNil());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(549, altAST1.getType());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(altAST0.equals((Object)altAST1));
      assertFalse(altAST1.equals((Object)altAST0));
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = null;
      python3Target0.badWords = set0;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      // Undeclared exception!
      try { 
        python3Target0.addBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = 107;
      StarBlockStartState starBlockStartState0 = new StarBlockStartState();
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(0, starBlockStartState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertFalse(starBlockStartState0.epsilonOnlyTransitions);
      assertFalse(starBlockStartState0.nonGreedy);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals((-1), starBlockStartState0.stateNumber);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals((-1), starBlockStartState0.decision);
      assertFalse(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starBlockStartState0.toString());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertNotNull(starBlockStartState0);
      
      boolean boolean0 = true;
      starBlockStartState0.epsilonOnlyTransitions = boolean0;
      assertTrue(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starBlockStartState0.toString());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(string0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("4.5.2.1", string1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "$DFPt-NE";
      String string3 = StringRenderer.escapeHTML(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("$DFPt-N&#127;E", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = "^[}*=)Id>u$E3";
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string5 = python3Target_PythonStringRenderer0.toString(object0, string4, locale0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertEquals("^[}*=)Id>u$E3", string5);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = python3Target0.getVersion();
      assertSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertEquals("4.5.2.1", string6);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int1 == int0);
      
      String string7 = "";
      String string8 = python3Target_PythonStringRenderer0.toString((Object) string2, string7, locale0);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string2, string4);
      assertNotSame(string2, string8);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string3);
      assertEquals("", string8);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(string8);
      
      int int2 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int2);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      
      String string9 = "rU_Z)@BQU4-%Y";
      CommonToken commonToken0 = new CommonToken(starBlockStartState0.INITIAL_NUM_TRANSITIONS, string9);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertTrue(starBlockStartState0.epsilonOnlyTransitions);
      assertEquals(0, starBlockStartState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertFalse(starBlockStartState0.nonGreedy);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals((-1), starBlockStartState0.stateNumber);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals((-1), starBlockStartState0.decision);
      assertTrue(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starBlockStartState0.toString());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(4, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(commonToken0);
      
      AltAST altAST0 = new AltAST(int1, commonToken0);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertTrue(starBlockStartState0.epsilonOnlyTransitions);
      assertEquals(0, starBlockStartState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertFalse(starBlockStartState0.nonGreedy);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals((-1), starBlockStartState0.stateNumber);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals((-1), starBlockStartState0.decision);
      assertEquals((-1), altAST0.childIndex);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starBlockStartState0.toString());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(4, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(29, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(altAST0);
      
      AltAST altAST1 = new AltAST(altAST0);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertTrue(starBlockStartState0.epsilonOnlyTransitions);
      assertEquals(0, starBlockStartState0.ruleIndex);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertFalse(starBlockStartState0.nonGreedy);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals((-1), starBlockStartState0.stateNumber);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals((-1), starBlockStartState0.decision);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(starBlockStartState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starBlockStartState0.toString());
      assertFalse(starBlockStartState0.isNonGreedyExitState());
      assertEquals(0, starBlockStartState0.getNumberOfTransitions());
      assertEquals(5, starBlockStartState0.getStateType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(4, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(29, altAST0.getType());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(29, altAST1.getType());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertFalse(altAST1.isNil());
      assertEquals(0, altAST1.getChildCount());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(altAST1.equals((Object)altAST0));
      assertNotNull(altAST1);
      
      GrammarAST grammarAST0 = altAST1.altLabel;
      assertNull(grammarAST0);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }
}
