/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:11:33 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.misc.IntervalSet;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LeftRecursiveRule;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int0 = 3262;
      String string0 = "u";
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int1 = 2719;
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertNotNull(set1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      
      STGroup sTGroup1 = python2Target0.loadTemplates();
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertNotNull(sTGroup1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      
      String string1 = python2Target0.getVersion();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("4.5.2.1", string1);
      assertNotNull(string1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string2 = "w?";
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      ParserRuleContext parserRuleContext0 = RuleContext.EMPTY;
      assertEquals((-1), parserRuleContext0.invokingState);
      assertNotNull(parserRuleContext0);
      assertEquals(0, parserRuleContext0.getAltNumber());
      assertEquals(0, parserRuleContext0.getChildCount());
      assertTrue(parserRuleContext0.isEmpty());
      assertEquals((-1), parserRuleContext0.getRuleIndex());
      assertEquals(1, parserRuleContext0.depth());
      
      String string0 = "dict";
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) parserRuleContext0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.runtime.ParserRuleContext cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean1);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      int int0 = 2147483645;
      String string0 = "hex";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertNotNull(classicToken0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals("hex", classicToken0.getText());
      
      ActionAST actionAST0 = new ActionAST(classicToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals("hex", classicToken0.getText());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(2147483645, actionAST0.getType());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertTrue(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(2147483645, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals("hex", classicToken0.getText());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(0, actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getTokenStartIndex());
      assertEquals(2147483645, actionAST0.getType());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "oct";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string0 = "NoViableAltException(";
      boolean boolean0 = true;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"oViableAltException\"", string1);
      assertNotNull(string1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      String string2 = python2Target0.getVersion();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("4.5.2.1", string2);
      assertNotNull(string2);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.getLoopLabel(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "tokenVocab";
      String string1 = "[3q,Yy";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("[3q,Yy", string2);
      assertNotNull(string2);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      String string3 = "\u0001\\";
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = char0;
      int int1 = (-882);
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(aNTLRStringStream0);
      assertEquals(1, charArray0.length);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals((-882), aNTLRStringStream0.size());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRStringStream0, recognizerSharedState0);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(aNTLRLexer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals((-882), aNTLRStringStream0.size());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      
      String string0 = "";
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = char0;
      int int1 = (-882);
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(aNTLRStringStream0);
      assertEquals(1, charArray0.length);
      assertEquals((-882), aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRStringStream0, recognizerSharedState1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(aNTLRLexer0);
      assertEquals(1, charArray0.length);
      assertEquals((-882), aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.getEOFToken();
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(commonToken0);
      assertEquals(1, charArray0.length);
      assertEquals((-882), aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      
      String string0 = "";
      GrammarAST grammarAST0 = new GrammarAST(int0, commonToken0, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals((-1), grammarAST0.childIndex);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(grammarAST0);
      assertEquals(1, charArray0.length);
      assertEquals((-882), aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, grammarAST0.getType());
      assertEquals(1, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals((-1), grammarAST0.childIndex);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals((-882), aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, grammarAST0.getType());
      assertEquals(1, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      
      int int0 = 1653;
      python2Target0.addBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      
      ActionAST actionAST0 = new ActionAST(int0, commonToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(1653, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      String string0 = "complex";
      actionAST0.setText(string0);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(1653, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertTrue(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(1653, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      Set<String> set2 = python2Target0.getBadWords();
      assertSame(set2, set1);
      assertSame(set2, set0);
      assertTrue(set2.contains(string0));
      assertNotNull(set2);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set2.size());
      assertFalse(set2.isEmpty());
      
      actionAST0.token = (Token) commonToken0;
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.token.getCharPositionInLine());
      assertEquals(0, actionAST0.token.getChannel());
      assertEquals(0, actionAST0.token.getLine());
      assertEquals(0, actionAST0.token.getType());
      assertEquals((-1), actionAST0.token.getTokenIndex());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean1);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      Set<String> set3 = python2Target0.getBadWords();
      assertSame(set3, set0);
      assertSame(set3, set2);
      assertSame(set3, set1);
      assertTrue(set3.contains(string0));
      assertNotNull(set3);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set3.isEmpty());
      assertEquals(85, set3.size());
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean2);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean3 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean3);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean4 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean4);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean5 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean5);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean6 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean6);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "nt>@#RaHt;ykqVBZ+,H";
      ErrorType errorType0 = ErrorType.EPSILON_LR_FOLLOW;
      Token token0 = null;
      Object[] objectArray0 = null;
      ANTLRMessage aNTLRMessage0 = new ANTLRMessage(errorType0, token0, objectArray0);
      assertEquals((-1), aNTLRMessage0.charPosition);
      assertEquals((-1), aNTLRMessage0.line);
      assertNotNull(aNTLRMessage0);
      assertEquals(ErrorType.EPSILON_LR_FOLLOW, aNTLRMessage0.getErrorType());
      
      String string1 = "";
      int int0 = 1876;
      boolean boolean0 = false;
      IntervalSet intervalSet0 = IntervalSet.EMPTY_SET;
      assertNotNull(intervalSet0);
      assertTrue(intervalSet0.isNil());
      assertEquals(0, intervalSet0.getMinElement());
      assertEquals(0, intervalSet0.getSingleElement());
      assertTrue(intervalSet0.isReadonly());
      assertEquals(0, intervalSet0.getMaxElement());
      assertEquals(0, intervalSet0.size());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertNotNull(set1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Tool tool0 = null;
      Grammar grammar0 = null;
      String string0 = "[P*/Q1^`9)y4Mq9";
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, string0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(codeGenerator0);
      
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals(72, codeGenerator0.lineWidth);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertNotNull(sTGroup0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      RuleAST ruleAST0 = new RuleAST(codeGenerator0.lineWidth);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(72, ruleAST0.getType());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      LeftRecursiveRule leftRecursiveRule0 = new LeftRecursiveRule(codeGenerator0.g, codeGenerator0.DEFAULT_LANGUAGE, ruleAST0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals(1, leftRecursiveRule0.numberOfAlts);
      assertTrue(leftRecursiveRule0.isStartRule);
      assertEquals(0, leftRecursiveRule0.index);
      assertEquals((-1), leftRecursiveRule0.actionIndex);
      assertNotNull(leftRecursiveRule0);
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals(72, ruleAST0.getType());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      ActionAST actionAST0 = leftRecursiveRule0.finallyAction;
      assertNull(actionAST0);
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      
      int int0 = 1653;
      python2Target0.addBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      
      ActionAST actionAST0 = new ActionAST(int0, commonToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(1653, actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(1653, actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      Set<String> set2 = python2Target0.getBadWords();
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertNotNull(set2);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set2.isEmpty());
      assertEquals(85, set2.size());
      
      commonToken0.setStartIndex(actionAST0.childIndex);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(1653, actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      actionAST0.token = (Token) commonToken0;
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-1), actionAST0.token.getCharPositionInLine());
      assertEquals(0, actionAST0.token.getLine());
      assertEquals((-1), actionAST0.token.getTokenIndex());
      assertEquals(0, actionAST0.token.getType());
      assertEquals(0, actionAST0.token.getChannel());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      Set<String> set3 = python2Target0.getBadWords();
      assertSame(set3, set2);
      assertSame(set3, set1);
      assertSame(set3, set0);
      assertNotNull(set3);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set3.isEmpty());
      assertEquals(85, set3.size());
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean2);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      boolean boolean3 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean4 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean4);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      boolean boolean5 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean5);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      
      boolean boolean6 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean6);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
  }
}
