/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:16:23 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.TreeWizard;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.atn.ATNState;
import org.antlr.v4.runtime.atn.ActionTransition;
import org.antlr.v4.runtime.atn.StarLoopbackState;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Tool tool0 = null;
      Grammar grammar0 = null;
      String string0 = "puC";
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, string0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(codeGenerator0);
      
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(72, codeGenerator0.lineWidth);
      assertFalse(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      // Undeclared exception!
      try { 
        python2Target0.getListLabel(codeGenerator0.VOCAB_FILE_EXTENSION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Token token0 = null;
      PredAST predAST0 = new PredAST(token0);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertTrue(predAST0.isNil());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertTrue(predAST0.isNil());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getLine());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      
      boolean boolean3 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertTrue(predAST0.isNil());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getLine());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) locale0, predAST0.textOverride, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string0 = "K)36.)+.NUyfx";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) locale0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      // Undeclared exception!
      try { 
        python2Target0.getListLabel(sTGroup0.DEFAULT_KEY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      int int0 = 146;
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertNotNull(aNTLRInputStream0);
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.size());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(0, aNTLRInputStream0.index());
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRInputStream0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(aNTLRLexer0);
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.size());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.getEOFToken();
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(commonToken0);
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.size());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      
      TerminalAST terminalAST0 = new TerminalAST(int0, commonToken0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(terminalAST0);
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.size());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(1, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(146, terminalAST0.getType());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.size());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(1, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(146, terminalAST0.getType());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "abs";
      String string1 = "_wfsolCS";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("_wfsolCS", string2);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = null;
      Locale locale1 = Locale.KOREAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string3, locale1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string1 = null;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.lookup(stack0, linkedList0);
      assertNull(locale0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, linkedList0.size());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("4.5.2.1", string2);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Token token0 = null;
      PredAST predAST0 = new PredAST(token0);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      StarLoopbackState starLoopbackState0 = new StarLoopbackState();
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals((-1), starLoopbackState0.stateNumber);
      assertFalse(starLoopbackState0.epsilonOnlyTransitions);
      assertEquals(0, starLoopbackState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertNotNull(starLoopbackState0);
      assertFalse(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starLoopbackState0.toString());
      assertEquals(9, starLoopbackState0.getStateType());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(0, starLoopbackState0.getNumberOfTransitions());
      
      LinkedList<CommonTree> linkedList0 = new LinkedList<CommonTree>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      predAST0.addChildren(linkedList0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, linkedList0.size());
      
      predAST0.sanityCheckParentAndChildIndexes();
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      int int0 = 0;
      ActionTransition actionTransition0 = new ActionTransition(starLoopbackState0, starLoopbackState0.BLOCK_START, starLoopbackState0.BASIC, starLoopbackState0.epsilonOnlyTransitions);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals((-1), starLoopbackState0.stateNumber);
      assertFalse(starLoopbackState0.epsilonOnlyTransitions);
      assertEquals(0, starLoopbackState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(3, Transition.RULE);
      assertEquals(9, Transition.WILDCARD);
      assertFalse(actionTransition0.isCtxDependent);
      assertEquals(2, Transition.RANGE);
      assertEquals(1, Transition.EPSILON);
      assertEquals(1, actionTransition0.actionIndex);
      assertEquals(7, Transition.SET);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(6, Transition.ACTION);
      assertEquals(3, actionTransition0.ruleIndex);
      assertEquals(5, Transition.ATOM);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(10, Transition.PRECEDENCE);
      assertNotNull(actionTransition0);
      assertFalse(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starLoopbackState0.toString());
      assertEquals(9, starLoopbackState0.getStateType());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(0, starLoopbackState0.getNumberOfTransitions());
      assertTrue(actionTransition0.isEpsilon());
      assertEquals(6, actionTransition0.getSerializationType());
      
      actionTransition0.target = predAST0.atnState;
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starLoopbackState0.toString());
      assertEquals(9, starLoopbackState0.getStateType());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(0, starLoopbackState0.getNumberOfTransitions());
      assertTrue(actionTransition0.isEpsilon());
      assertEquals(6, actionTransition0.getSerializationType());
      
      actionTransition0.target = predAST0.atnState;
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starLoopbackState0.toString());
      assertEquals(9, starLoopbackState0.getStateType());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(0, starLoopbackState0.getNumberOfTransitions());
      assertTrue(actionTransition0.isEpsilon());
      assertEquals(6, actionTransition0.getSerializationType());
      
      String string0 = actionTransition0.toString();
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals((-1), starLoopbackState0.stateNumber);
      assertFalse(starLoopbackState0.epsilonOnlyTransitions);
      assertEquals(0, starLoopbackState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(3, Transition.RULE);
      assertEquals(9, Transition.WILDCARD);
      assertFalse(actionTransition0.isCtxDependent);
      assertEquals(2, Transition.RANGE);
      assertEquals(1, Transition.EPSILON);
      assertEquals(1, actionTransition0.actionIndex);
      assertEquals(7, Transition.SET);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(6, Transition.ACTION);
      assertEquals(3, actionTransition0.ruleIndex);
      assertEquals(5, Transition.ATOM);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(10, Transition.PRECEDENCE);
      assertEquals("action_3:1", string0);
      assertNotNull(string0);
      assertFalse(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals("-1", starLoopbackState0.toString());
      assertEquals(9, starLoopbackState0.getStateType());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(0, starLoopbackState0.getNumberOfTransitions());
      assertTrue(actionTransition0.isEpsilon());
      assertEquals(6, actionTransition0.getSerializationType());
      
      starLoopbackState0.addTransition(int0, (Transition) actionTransition0);
      assertEquals(3, ATNState.BLOCK_START);
      assertEquals(4, ATNState.INITIAL_NUM_TRANSITIONS);
      assertEquals(2, ATNState.RULE_START);
      assertEquals(4, ATNState.PLUS_BLOCK_START);
      assertEquals((-1), starLoopbackState0.stateNumber);
      assertEquals(0, starLoopbackState0.ruleIndex);
      assertEquals(0, ATNState.INVALID_TYPE);
      assertEquals((-1), ATNState.INVALID_STATE_NUMBER);
      assertEquals(8, ATNState.BLOCK_END);
      assertEquals(10, ATNState.STAR_LOOP_ENTRY);
      assertEquals(9, ATNState.STAR_LOOP_BACK);
      assertEquals(6, ATNState.TOKEN_START);
      assertTrue(starLoopbackState0.epsilonOnlyTransitions);
      assertEquals(12, ATNState.LOOP_END);
      assertEquals(11, ATNState.PLUS_LOOP_BACK);
      assertEquals(7, ATNState.RULE_STOP);
      assertEquals(5, ATNState.STAR_BLOCK_START);
      assertEquals(1, ATNState.BASIC);
      assertEquals(3, Transition.RULE);
      assertEquals(9, Transition.WILDCARD);
      assertFalse(actionTransition0.isCtxDependent);
      assertEquals(2, Transition.RANGE);
      assertEquals(1, Transition.EPSILON);
      assertEquals(1, actionTransition0.actionIndex);
      assertEquals(7, Transition.SET);
      assertEquals(8, Transition.NOT_SET);
      assertEquals(6, Transition.ACTION);
      assertEquals(3, actionTransition0.ruleIndex);
      assertEquals(5, Transition.ATOM);
      assertEquals(4, Transition.PREDICATE);
      assertEquals(10, Transition.PRECEDENCE);
      assertEquals("-1", starLoopbackState0.toString());
      assertTrue(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals(9, starLoopbackState0.getStateType());
      assertEquals(1, starLoopbackState0.getNumberOfTransitions());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertTrue(actionTransition0.isEpsilon());
      assertEquals(6, actionTransition0.getSerializationType());
      
      predAST0.atnState = (ATNState) starLoopbackState0;
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals("-1", starLoopbackState0.toString());
      assertTrue(starLoopbackState0.onlyHasEpsilonTransitions());
      assertEquals(9, starLoopbackState0.getStateType());
      assertEquals(1, starLoopbackState0.getNumberOfTransitions());
      assertFalse(starLoopbackState0.isNonGreedyExitState());
      assertEquals(1, predAST0.atnState.getNumberOfTransitions());
      assertTrue(predAST0.atnState.onlyHasEpsilonTransitions());
      assertEquals("-1", predAST0.atnState.toString());
      assertFalse(predAST0.atnState.isNonGreedyExitState());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string1 = StringRenderer.escapeHTML(predAST0.textOverride);
      assertEquals((-1), predAST0.childIndex);
      assertNull(string1);
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertTrue(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList1.size());
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) locale1, string1, locale1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      
      TreeWizard.TreePatternTreeAdaptor treeWizard_TreePatternTreeAdaptor0 = new TreeWizard.TreePatternTreeAdaptor();
      assertNotNull(treeWizard_TreePatternTreeAdaptor0);
      
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "unichr";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      CommonToken commonToken1 = (CommonToken)treeWizard_TreePatternTreeAdaptor0.createToken((Token) commonToken0);
      assertNotNull(commonToken1);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      
      TerminalAST terminalAST0 = new TerminalAST(commonToken1);
      assertEquals((-1), terminalAST0.childIndex);
      assertNotNull(terminalAST0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(boolean1);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(boolean2);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertTrue(set0.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      Tool tool0 = null;
      String string1 = "PARSER";
      CodeGenerator codeGenerator1 = new CodeGenerator(tool0, terminalAST0.g, string1);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(72, codeGenerator1.lineWidth);
      assertNotNull(codeGenerator1);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      ParserFactory parserFactory0 = new ParserFactory(codeGenerator1);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(72, codeGenerator1.lineWidth);
      assertNotNull(parserFactory0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      CodeGeneratorExtension codeGeneratorExtension0 = new CodeGeneratorExtension(parserFactory0);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(72, codeGenerator1.lineWidth);
      assertNotNull(codeGeneratorExtension0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      String string2 = "4F(+";
      RuleAST ruleAST0 = new RuleAST(commonToken0);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      
      int int0 = 134;
      Rule rule0 = new Rule(codeGenerator1.g, string2, ruleAST0, int0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), rule0.actionIndex);
      assertEquals(134, rule0.numberOfAlts);
      assertTrue(rule0.isStartRule);
      assertEquals(0, rule0.index);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(72, codeGenerator1.lineWidth);
      assertNotNull(rule0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(134, rule0.getOriginalNumberOfAlts());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      
      // Undeclared exception!
      try { 
        parserFactory0.rule(rule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.model.decl.StructDecl", e);
      }
  }
}
