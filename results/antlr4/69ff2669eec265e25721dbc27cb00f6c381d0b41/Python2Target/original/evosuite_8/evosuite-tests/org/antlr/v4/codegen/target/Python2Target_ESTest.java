/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:18:34 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.parse.ActionSplitter;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      String string0 = "";
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean0);
      
      int int0 = (-1276);
      int int1 = 75;
      int int2 = 15;
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean1);
      
      boolean boolean2 = python2Target0.wantsBaseListener();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        python2Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotNull(python2Target0);
      
      String string0 = "\u0001|";
      int int0 = (-1789569705);
      int int1 = 41;
      ClassicToken classicToken0 = new ClassicToken(int1);
      assertFalse(int1 == int0);
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNotNull(classicToken0);
      
      String string1 = "delattr";
      BlockAST blockAST0 = new BlockAST(int0, classicToken0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1789569705), blockAST0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1789569705), blockAST0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      assertFalse(set0.contains(string0));
      assertTrue(set0.contains(string1));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        python2Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "org.antlr.runtime.tree.CommonTree";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale(string0, string0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("org.antlr.runtime.tree.commontree", locale1.getLanguage());
      assertEquals("ORG.ANTLR.RUNTIME.TREE.COMMONTREE", locale1.getCountry());
      assertEquals("org.antlr.runtime.tree.commontree_ORG.ANTLR.RUNTIME.TREE.COMMONTREE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      String string0 = "";
      boolean boolean0 = false;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      
      int int0 = 0;
      int int1 = (-41);
      ClassicToken classicToken0 = new ClassicToken(int1, string1, int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-41), classicToken0.getType());
      assertNotNull(classicToken0);
      
      TerminalAST terminalAST0 = new TerminalAST(int0, classicToken0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-41), classicToken0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertNotNull(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-41), classicToken0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean2);
      assertEquals((-1), terminalAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "Ann";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "mBOWeBRz(5MB3=)`Q";
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("mBOWeBRz(5MB3=)`Q", string1);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(python2Target0);
      
      String string0 = "";
      boolean boolean0 = false;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean1);
      
      boolean boolean2 = python2Target0.wantsBaseListener();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean2);
      
      int int0 = 0;
      int int1 = 0;
      int int2 = 78;
      ClassicToken classicToken0 = new ClassicToken(int1, string1, int2);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getLine());
      assertEquals(78, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNotNull(classicToken0);
      
      TerminalAST terminalAST0 = new TerminalAST(int0, classicToken0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getLine());
      assertEquals(78, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertNotNull(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      
      TerminalAST terminalAST1 = new TerminalAST(terminalAST0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(terminalAST1.equals((Object)terminalAST0));
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getLine());
      assertEquals(78, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST1.getChildCount());
      assertEquals(0, terminalAST1.getCharPositionInLine());
      assertFalse(terminalAST1.isNil());
      assertEquals(0, terminalAST1.getTokenStopIndex());
      assertEquals(0, terminalAST1.getNumberOfOptions());
      assertEquals(0, terminalAST1.getType());
      assertEquals(0, terminalAST1.getTokenStartIndex());
      assertEquals((-1), terminalAST1.getChildIndex());
      assertEquals(0, terminalAST1.getLine());
      assertNotNull(terminalAST1);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals((-1), terminalAST1.childIndex);
      
      boolean boolean3 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(terminalAST0.equals((Object)terminalAST1));
      assertFalse(terminalAST1.equals((Object)terminalAST0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getLine());
      assertEquals(78, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getType());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST1.getChildCount());
      assertEquals(0, terminalAST1.getCharPositionInLine());
      assertFalse(terminalAST1.isNil());
      assertEquals(0, terminalAST1.getTokenStopIndex());
      assertEquals(0, terminalAST1.getNumberOfOptions());
      assertEquals(0, terminalAST1.getType());
      assertEquals(0, terminalAST1.getTokenStartIndex());
      assertEquals((-1), terminalAST1.getChildIndex());
      assertEquals(0, terminalAST1.getLine());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(terminalAST0, terminalAST1);
      assertNotSame(terminalAST1, terminalAST0);
      assertFalse(boolean3);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals((-1), terminalAST1.childIndex);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      String string0 = "coerce";
      boolean boolean1 = false;
      String string1 = python2Target0.getTargetStringLiteralFromString(string0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("coerce", string1);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      assertTrue(set0.contains(string0));
      assertNotNull(set0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean2);
      
      boolean boolean3 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean3);
      
      int int0 = 2545;
      String string2 = python2Target0.encodeIntAsCharEscape(int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("\\u09f1", string2);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      assertTrue(set1.contains(string1));
      assertFalse(set1.contains(string2));
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      
      String string0 = "]/lZ|O\\ZyK#Tjui).";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"]/lZ|O\\\\ZyK#Tjui).\"", string1);
      
      String string2 = python2Target0.getTargetStringLiteralFromString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("\"]/lZ|O\\\\ZyK#Tjui).\"", string2);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup1 = python2Target0.loadTemplates();
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertNotNull(sTGroup1);
      assertNotSame(sTGroup1, sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      
      String string3 = python2Target0.getVersion();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("4.5.2.1", string3);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayScript();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("", string4);
      
      String string5 = python2Target_PythonStringRenderer0.toString((Object) string0, string3, locale0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertEquals("4.5.2.1", string5);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      OrderedHashSet<Locale> orderedHashSet0 = new OrderedHashSet<Locale>();
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertFalse(orderedHashSet0.contains(locale0));
      assertNotNull(orderedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) orderedHashSet0, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertFalse(list0.contains(locale0));
      assertFalse(orderedHashSet0.contains(locale0));
      assertNotNull(list0);
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(orderedHashSet0.contains(locale0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(orderedHashSet0.contains(locale0));
      assertNotNull(list2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list2, locale_FilteringMode0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertFalse(list3.contains(locale0));
      assertFalse(orderedHashSet0.contains(locale0));
      assertNotNull(list3);
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      
      String string6 = python2Target0.getVersion();
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string6);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertSame(string6, string3);
      assertEquals("4.5.2.1", string6);
      
      String string7 = python2Target_PythonStringRenderer0.toString((Object) string1, string1, locale0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertEquals("\"]/lZ|O\\\\ZyK#Tjui).\"", string7);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      String string8 = python2Target0.getVersion();
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string8);
      assertNotSame(string8, string5);
      assertSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertEquals("4.5.2.1", string8);
      
      int int0 = (-4247);
      String string9 = "";
      ClassicToken classicToken0 = new ClassicToken(int0, string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-4247), classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      
      TerminalAST terminalAST0 = new TerminalAST(classicToken0);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-4247), classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertFalse(terminalAST0.isNil());
      assertEquals((-4247), terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertNotNull(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-4247), classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertFalse(terminalAST0.isNil());
      assertEquals((-4247), terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertNotSame(string9, string0);
      assertSame(string9, string4);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertFalse(boolean1);
      assertEquals((-1), terminalAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "MdjzG6s*7EN6;?n=6M";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org/antlr/v4/tool/templates/messages/formats/antlr.stg");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      stringArray0[0] = string0;
      String string1 = "er!Nb^enx4?;*";
      stringArray0[1] = string1;
      String string2 = "YVgM/zW]aqa";
      stringArray0[2] = string2;
      String string3 = "str";
      stringArray0[3] = string3;
      String string4 = "cannot use or declare channel with reserved name <arg>";
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      String string0 = "\u0001|";
      int int0 = (-1789569705);
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNotNull(aNTLRStringStream0);
      
      int int1 = 41;
      ClassicToken classicToken0 = new ClassicToken(int1);
      assertFalse(int1 == int0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNotNull(classicToken0);
      
      String string1 = "delattr";
      BlockAST blockAST0 = new BlockAST(int0, classicToken0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals((-1789569705), blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      
      GrammarAST grammarAST0 = new GrammarAST(blockAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals((-1789569705), blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1789569705), grammarAST0.getType());
      assertNotNull(grammarAST0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(41, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals((-1789569705), blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1789569705), grammarAST0.getType());
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), grammarAST0.childIndex);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      assertTrue(set0.contains(string1));
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      ActionSplitter actionSplitter0 = new ActionSplitter(aNTLRStringStream0);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertFalse(actionSplitter0.failed());
      assertNotNull(actionSplitter0);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ActionSplitter.ID);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream(actionSplitter0, actionSplitter0.TEXT);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertFalse(actionSplitter0.failed());
      assertEquals((-1), tokenRewriteStream0.getLastRewriteTokenIndex());
      assertEquals(0, tokenRewriteStream0.size());
      assertEquals((-1), tokenRewriteStream0.index());
      assertEquals((-1), tokenRewriteStream0.range());
      assertNotNull(tokenRewriteStream0);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ActionSplitter.ID);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, TokenRewriteStream.MIN_TOKEN_INDEX);
      assertEquals(100, TokenRewriteStream.PROGRAM_INIT_SIZE);
      
      // Undeclared exception!
      tokenRewriteStream0.LT(actionSplitter0.WS);
  }
}
