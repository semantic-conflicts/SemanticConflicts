/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:20:45 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognitionException;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.SourceGenTriggers;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ActionSplitter;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertNotNull(sTGroup0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      
      CommonToken commonToken0 = new CommonToken(sTGroup0.delimiterStartChar, sTGroup0.DICT_KEY);
      assertNotNull(commonToken0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(60, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      
      String string0 = "map";
      AltAST altAST0 = new AltAST(sTGroup0.delimiterStopChar, commonToken0, string0);
      assertNotNull(altAST0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(60, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(62, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(60, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(62, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertTrue(boolean0);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), altAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Reader reader0 = null;
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertNotNull(grammarAST0);
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(boolean1);
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean2);
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean3);
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "BxZV./v";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "L\":H'CN$";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      String string1 = python2Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("L\":H'CN$", string1);
      
      String string2 = "\\*";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = "BLOCK ...";
      String string4 = "oct";
      Locale locale1 = new Locale(string3, string4, string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("OCT", locale1.getCountry());
      assertEquals("block ..._OCT_oct", locale1.toString());
      assertEquals("oct", locale1.getVariant());
      assertEquals("block ...", locale1.getLanguage());
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("OCT", locale1.getCountry());
      assertEquals("block ..._OCT_oct", locale1.toString());
      assertEquals("oct", locale1.getVariant());
      assertEquals("block ...", locale1.getLanguage());
      assertEquals("OCT", locale2.getCountry());
      assertEquals("oct", locale2.getVariant());
      assertEquals("block ..._OCT_oct", locale2.toString());
      assertEquals("block ...", locale2.getLanguage());
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      String string5 = "generate parse tree listener (default)";
      Locale locale3 = new Locale(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      assertEquals("", locale3.getISO3Country());
      assertEquals("generate parse tree listener (default)", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("generate parse tree listener (default)", locale3.toString());
      
      List<Locale.LanguageRange> list0 = null;
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        Locale.lookupTag(list0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      String string0 = "1)KvW!&j'N4E|m|>";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"1)KvW!&j'N4E|m|>\"", string1);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean2);
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean3);
      
      boolean boolean4 = python2Target0.wantsBaseListener();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean4);
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNotNull(set1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertSame(set1, set0);
      assertFalse(set1.contains(string1));
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertNotNull(grammarAST0);
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean5 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(boolean5);
      assertEquals((-1), grammarAST0.childIndex);
      
      // Undeclared exception!
      try { 
        grammarAST0.setUnknownTokenBoundaries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.tree.CommonTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      int int0 = 150;
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      assertNotNull(aNTLRReaderStream0);
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      
      int int1 = 2;
      Reader reader0 = null;
      aNTLRReaderStream0.load(reader0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      
      int int2 = 1270;
      CommonToken commonToken0 = new CommonToken(aNTLRReaderStream0, int1, int2, int2, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(commonToken0);
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, commonToken0.getLine());
      assertEquals(1270, commonToken0.getStartIndex());
      assertEquals(1270, commonToken0.getStopIndex());
      assertEquals(2, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(1270, commonToken0.getChannel());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      
      ActionSplitter actionSplitter0 = new ActionSplitter(aNTLRReaderStream0);
      assertNotNull(actionSplitter0);
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertNotNull(recognitionException0);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      
      BitSet bitSet0 = SourceGenTriggers.FOLLOW_alt_in_alternative161;
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.numBits());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      
      Object object0 = actionSplitter0.recoverFromMismatchedSet(aNTLRReaderStream0, recognitionException0, bitSet0);
      assertNull(object0);
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, recognitionException0.getUnexpectedType());
      assertEquals(64, bitSet0.numBits());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream(actionSplitter0);
      assertNotNull(bufferedTokenStream0);
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(int0, commonToken0, bufferedTokenStream0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(grammarRootAST0);
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(150, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, commonToken0.getLine());
      assertEquals(1270, commonToken0.getStartIndex());
      assertEquals(1270, commonToken0.getStopIndex());
      assertEquals(2, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(1270, commonToken0.getChannel());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      
      GrammarRootAST grammarRootAST1 = new GrammarRootAST(grammarRootAST0);
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(grammarRootAST1);
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(150, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(150, grammarRootAST1.getType());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, commonToken0.getLine());
      assertEquals(1270, commonToken0.getStartIndex());
      assertEquals(1270, commonToken0.getStopIndex());
      assertEquals(2, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(1270, commonToken0.getChannel());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarRootAST1);
      assertFalse(grammarRootAST0.equals((Object)grammarRootAST1));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.index());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(150, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(150, grammarRootAST1.getType());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, commonToken0.getLine());
      assertEquals(1270, commonToken0.getStartIndex());
      assertEquals(1270, commonToken0.getStopIndex());
      assertEquals(2, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(1270, commonToken0.getChannel());
      assertEquals("org\\antlr\\v4\\parse\\ActionSplitter.g", actionSplitter0.getGrammarFileName());
      assertEquals(0, actionSplitter0.getRuleMemoizationCacheSize());
      assertFalse(actionSplitter0.failed());
      assertEquals(0, actionSplitter0.getNumberOfSyntaxErrors());
      assertEquals(0, actionSplitter0.getCharPositionInLine());
      assertEquals(1, actionSplitter0.getLine());
      assertEquals(0, actionSplitter0.getBacktrackingLevel());
      assertNotSame(grammarRootAST0, grammarRootAST1);
      assertNotSame(grammarRootAST1, grammarRootAST0);
      assertFalse(boolean1);
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, ActionSplitter.WS);
      assertEquals(12, ActionSplitter.SET_NONLOCAL_ATTR);
      assertEquals(5, ActionSplitter.ATTR_VALUE_EXPR);
      assertEquals(9, ActionSplitter.NONLOCAL_ATTR);
      assertEquals(10, ActionSplitter.QUALIFIED_ATTR);
      assertEquals(13, ActionSplitter.TEXT);
      assertEquals(7, ActionSplitter.ID);
      assertEquals(8, ActionSplitter.LINE_COMMENT);
      assertEquals((-1), ActionSplitter.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(4, ActionSplitter.ATTR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, ActionSplitter.SET_ATTR);
      assertEquals(6, ActionSplitter.COMMENT);
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean2);
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean3);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string1 = "";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object1, string1, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-100);
      byteArray0[0] = byte0;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      assertTrue(boolean1);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertNotNull(sTGroup0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      boolean boolean2 = new Boolean(sTGroup0.GROUP_FILE_EXTENSION);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(boolean2);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      int int0 = 2594;
      int int1 = (-3236);
      String string0 = "a.kF=9IT,0G[GJKiG)";
      CommonToken commonToken0 = new CommonToken(int1, string0);
      assertFalse(int1 == int0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-3236), commonToken0.getType());
      
      String string1 = "map";
      AltAST altAST0 = new AltAST(int0, commonToken0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(altAST0);
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(2594, altAST0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-3236), commonToken0.getType());
      assertEquals((-1), altAST0.childIndex);
      
      AltAST altAST1 = new AltAST(altAST0);
      assertFalse(altAST1.equals((Object)altAST0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(altAST1);
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(2594, altAST0.getType());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getChildCount());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(2594, altAST1.getType());
      assertFalse(altAST1.isNil());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-3236), commonToken0.getType());
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      
      boolean boolean3 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST1);
      assertFalse(altAST0.equals((Object)altAST1));
      assertFalse(altAST1.equals((Object)altAST0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(2594, altAST0.getType());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getChildCount());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(2594, altAST1.getType());
      assertFalse(altAST1.isNil());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-3236), commonToken0.getType());
      assertNotSame(altAST0, altAST1);
      assertNotSame(altAST1, altAST0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean3);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
  }
}
