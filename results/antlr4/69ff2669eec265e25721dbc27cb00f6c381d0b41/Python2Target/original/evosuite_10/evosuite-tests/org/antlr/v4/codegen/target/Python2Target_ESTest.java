/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:22:57 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.CodeBlockForOuterMostAlt;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.SrcOp;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.atn.PrecedencePredicateTransition;
import org.antlr.v4.runtime.misc.IntervalSet;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LeftRecursiveRule;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      // Undeclared exception!
      try { 
        python2Target0.getImplicitSetLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Set<String> set0 = Grammar.semPredOptions;
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertFalse(set1.equals((Object)set0));
      assertNotNull(set1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertNotSame(set1, set0);
      
      boolean boolean0 = false;
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertNotNull(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertNotNull(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, predAST0.getChildCount());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertFalse(boolean0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, predAST0.getChildCount());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = ".#ik[1/&;$7";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "GdHhh";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      String string1 = python2Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("GdHhh", string1);
      assertNotNull(string1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.templatesExist();
      assertTrue(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      int int0 = 9;
      CommonToken commonToken0 = new CommonToken(int0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(9, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      
      PredAST predAST0 = new PredAST(int0, commonToken0);
      assertNotNull(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(9, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(9, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getChildCount());
      
      String string0 = python2Target0.getLoopLabel(predAST0);
      assertEquals("loop-1", string0);
      assertNotNull(string0);
      assertEquals((-1), predAST0.childIndex);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(9, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(9, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getChildCount());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      String string1 = python2Target0.getVersion();
      assertFalse(string1.equals((Object)string0));
      assertEquals("4.5.2.1", string1);
      assertNotNull(string1);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      GrammarAST grammarAST0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      int int0 = 0;
      String string0 = "org.antlr.v4.runtime.atn.PlusBlockStartState";
      int int1 = (-158);
      ClassicToken classicToken0 = new ClassicToken(int0, string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(classicToken0);
      assertEquals("org.antlr.v4.runtime.atn.PlusBlockStartState", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-158), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      
      BlockAST blockAST0 = new BlockAST(int0, classicToken0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals("org.antlr.v4.runtime.atn.PlusBlockStartState", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-158), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      
      String string1 = python2Target0.getLoopCounter(blockAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cnt0", string1);
      assertNotNull(string1);
      assertEquals((-1), blockAST0.childIndex);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org.antlr.v4.runtime.atn.PlusBlockStartState", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-158), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), blockAST0.childIndex);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org.antlr.v4.runtime.atn.PlusBlockStartState", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-158), classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertNotSame(string0, string1);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      int int2 = 71;
      PrecedencePredicateTransition precedencePredicateTransition0 = null;
      try {
        precedencePredicateTransition0 = new PrecedencePredicateTransition(blockAST0.atnState, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target cannot be null.
         //
         verifyException("org.antlr.v4.runtime.atn.Transition", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "]4eCj$(UGQH";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitTokenLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = ".#iZk[1/&;$7";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNotNull(set1);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertSame(set1, set0);
      
      boolean boolean0 = true;
      String string0 = "reduce";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"reduce\"", string1);
      assertNotNull(string1);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertNotNull(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), predAST0.childIndex);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
  }
}
