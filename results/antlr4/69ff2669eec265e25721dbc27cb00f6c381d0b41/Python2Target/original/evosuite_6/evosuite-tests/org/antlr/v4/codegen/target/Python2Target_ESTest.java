/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 05:13:59 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.model.AltBlock;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.decl.CodeBlock;
import org.antlr.v4.codegen.model.decl.Decl;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", string0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      String string1 = python2Target_PythonStringRenderer0.toString((Object) codeGenerator0, sTGroup0.DICT_KEY, locale0);
      assertNotNull(string1);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotSame(string1, string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("key", string1);
      assertFalse(string1.equals((Object)string0));
      
      CommonToken commonToken0 = new CommonToken(sTGroup0.delimiterStopChar);
      assertNotNull(commonToken0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      
      BlockAST blockAST0 = new BlockAST(commonToken0);
      assertNotNull(blockAST0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals(62, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(62, commonToken0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals(62, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      int int0 = (-2147483617);
      CommonToken commonToken0 = new CommonToken(int0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2147483617), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      
      String string0 = "min";
      AltAST altAST0 = new AltAST(int0, commonToken0, string0);
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2147483617), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-2147483617), altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2147483617), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-2147483617), altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String string1 = python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.addBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "U?";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("\"U?\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(codeGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", string0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      TerminalAST terminalAST0 = null;
      TerminalAST terminalAST1 = null;
      try {
        terminalAST1 = new TerminalAST(terminalAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.tree.CommonTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", string0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string1 = "";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) codeGenerator0, string1, locale0);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 81;
      GrammarAST grammarAST0 = new GrammarAST(int0);
      assertNotNull(grammarAST0);
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(81, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(81, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      TerminalAST terminalAST0 = null;
      TerminalAST terminalAST1 = null;
      try {
        terminalAST1 = new TerminalAST(terminalAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.tree.CommonTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = python2Target_PythonStringRenderer0.toString((Object) codeGenerator0, sTGroup0.DICT_KEY, locale0);
      assertNotNull(string1);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertNotSame(string1, string0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("key", string1);
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertFalse(set1.contains(string1));
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", string0);
      
      python2Target0.addBadWords();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      boolean boolean0 = new Boolean(sTGroup0.DEFAULT_KEY);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(boolean0);
      
      python2Target0.addBadWords();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string1 = "";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int0 = 2147483645;
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      
      String string2 = "min";
      AltAST altAST0 = new AltAST(int0, commonToken0, string2);
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      assertEquals(2147483645, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      assertEquals(2147483645, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertTrue(boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "138{";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("\"138{\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = "Lize(e1x'hp4 ";
      StringReader stringReader0 = new StringReader(string2);
      assertNotNull(stringReader0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = (-1610612734);
      int int1 = 2;
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream(stringReader0, int0, int1);
      assertNotNull(aNTLRReaderStream0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(13, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertNotNull(recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRReaderStream0, recognizerSharedState1);
      assertNotNull(aNTLRLexer0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(13, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.emit();
      assertNotNull(commonToken0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(13, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertNotNull(predAST0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals((-1), predAST0.childIndex);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(13, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
