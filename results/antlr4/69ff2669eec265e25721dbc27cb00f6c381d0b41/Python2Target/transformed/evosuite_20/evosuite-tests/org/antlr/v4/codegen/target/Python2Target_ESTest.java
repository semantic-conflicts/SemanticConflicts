/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 06:54:41 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.SrcOp;
import org.antlr.v4.codegen.model.decl.CodeBlock;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.atn.RangeTransition;
import org.antlr.v4.runtime.atn.SemanticContext;
import org.antlr.v4.runtime.atn.TokensStartState;
import org.antlr.v4.runtime.misc.Interval;
import org.antlr.v4.runtime.misc.IntervalSet;
import org.antlr.v4.tool.ANTLRMessage;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.ErrorType;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      int int0 = (-97);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-57);
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      int int1 = 524;
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream(byteArrayInputStream0, int1, python2Target0.language);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertNotNull(aNTLRInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      
      aNTLRInputStream0.reset();
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRInputStream0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertNotNull(aNTLRLexer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.getEOFToken();
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertNotNull(commonToken0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      
      ActionAST actionAST0 = new ActionAST(int0, commonToken0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(actionAST0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals((-97), actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals(1, actionAST0.getLine());
      assertEquals((-1), actionAST0.getChildIndex());
      
      String string0 = actionAST0.getText();
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals("\u0000", string0);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals((-97), actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals(1, actionAST0.getLine());
      assertEquals((-1), actionAST0.getChildIndex());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, aNTLRInputStream0.getCharPositionInLine());
      assertEquals(0, aNTLRInputStream0.index());
      assertEquals(2, aNTLRInputStream0.size());
      assertNull(aNTLRInputStream0.getSourceName());
      assertEquals(1, aNTLRInputStream0.getLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(1, commonToken0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals((-97), actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getChildCount());
      assertFalse(actionAST0.isNil());
      assertEquals(1, actionAST0.getLine());
      assertEquals((-1), actionAST0.getChildIndex());
      
      String string1 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      String string2 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      python2Target0.addBadWords();
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      String string0 = "Vso";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitRuleLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "bool";
      stringArray0[0] = string0;
      Tool tool0 = null;
      try {
        tool0 = new Tool(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean0 = false;
      String string0 = python2Target0.getTargetStringLiteralFromString(python2Target0.language, boolean0);
      assertNull(string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      String string1 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string1);
      assertNotNull(string1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      int int0 = 2131;
      org.antlr.v4.runtime.CommonToken commonToken0 = new org.antlr.v4.runtime.CommonToken(int0, python2Target0.language);
      assertNotNull(commonToken0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(2131, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string2 = "ESC_SEQ";
      String string3 = python2Target_PythonStringRenderer0.toString((Object) string0, string2, locale0);
      assertEquals("ESC_SEQ", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertTrue(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) commonToken0, python2Target0.language, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.runtime.CommonToken cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(python2Target0.targetCharValueEscape);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "Rik;%ql+d'C";
      String string1 = "35<-#";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayScript();
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      Locale.setDefault(locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string3 = "&/{0gvy]\\d$";
      Locale locale2 = Locale.forLanguageTag(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      
      Locale locale3 = Locale.forLanguageTag(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getLanguage());
      assertEquals("", locale3.toString());
      assertEquals("", locale3.getVariant());
      
      Locale locale4 = Locale.forLanguageTag(string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(locale4, locale2);
      assertSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertNotNull(locale4);
      assertEquals("", locale4.getISO3Language());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getLanguage());
      assertEquals("", locale4.toString());
      
      char char0 = 'c';
      String string4 = locale0.getExtension(char0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertNull(string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string5 = locale0.getDisplayCountry(locale1);
      assertEquals("\u53F0\u6E7E\u5730\u533A", string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      String string6 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("35<-#", string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string7 = locale4.toLanguageTag();
      assertEquals("und", string7);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(locale4, locale2);
      assertSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", locale4.getISO3Language());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getLanguage());
      assertEquals("", locale4.toString());
      
      Grammar grammar0 = null;
      CodeGenerator codeGenerator0 = null;
      try {
        codeGenerator0 = new CodeGenerator(grammar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.CodeGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      String[] stringArray0 = new String[0];
      python2Target0.targetCharValueEscape = stringArray0;
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean1 = python2Target0.templatesExist();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "";
      String string1 = python2Target0.getTargetStringLiteralFromString(string0, boolean0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertFalse(set1.contains(string0));
      assertSame(set1, set0);
      assertNotNull(set1);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python2Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      String string0 = python2Target0.getTargetStringLiteralFromString(sTGroup0.GROUP_FILE_EXTENSION);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals("\".stg\"", string0);
      assertNotNull(string0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean2 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(python2Target0.python2Keywords);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }
}
