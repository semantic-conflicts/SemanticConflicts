/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 06:44:09 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.atn.BasicBlockStartState;
import org.antlr.v4.runtime.atn.PredicateTransition;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.semantics.ActionSniffer;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.AttributeDict;
import org.antlr.v4.tool.ErrorManager;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LeftRecursiveRule;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      RuleFunction ruleFunction0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotNull(recognizerSharedState1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = null;
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Collection<Locale> collection0 = null;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, collection0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(list2.contains(locale0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      
      String string1 = "";
      String string2 = python2Target_PythonStringRenderer0.toString((Object) ruleFunction0, string1, locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(string2, string1);
      assertNotSame(locale1, locale0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      int int0 = (-3630);
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertNotNull(aNTLRReaderStream0);
      
      int int1 = 1306;
      int int2 = 60;
      int int3 = 86;
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      aNTLRReaderStream0.load(stringReader0, int1, int3);
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      CommonToken commonToken0 = new CommonToken(aNTLRReaderStream0, int0, int1, int2, int3);
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-3630), commonToken0.getType());
      assertEquals(1306, commonToken0.getChannel());
      assertEquals(60, commonToken0.getStartIndex());
      assertEquals(86, commonToken0.getStopIndex());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(commonToken0);
      
      int int4 = 0;
      commonToken0.setChannel(int4);
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-3630), commonToken0.getType());
      assertEquals(60, commonToken0.getStartIndex());
      assertEquals(86, commonToken0.getStopIndex());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      ClassicToken classicToken0 = new ClassicToken(commonToken0);
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-3630), commonToken0.getType());
      assertEquals(60, commonToken0.getStartIndex());
      assertEquals(86, commonToken0.getStopIndex());
      assertEquals("<EOF>", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3630), classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(classicToken0);
      
      AltAST altAST0 = new AltAST(int0, classicToken0);
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-3630), commonToken0.getType());
      assertEquals(60, commonToken0.getStartIndex());
      assertEquals(86, commonToken0.getStopIndex());
      assertEquals("<EOF>", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3630), classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-3630), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals((-1), altAST0.childIndex);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(altAST0);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-3630), commonToken0.getType());
      assertEquals(60, commonToken0.getStartIndex());
      assertEquals(86, commonToken0.getStopIndex());
      assertEquals("<EOF>", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3630), classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1), classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-3630), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals((-1), altAST0.childIndex);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Set<String> set1 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertNotNull(set1);
      
      boolean boolean3 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = python2Target0.getVersion();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotSame(string1, string0);
      assertEquals("4.5.2.1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean4 = python2Target0.wantsBaseListener();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Set<String> set2 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set2.size());
      assertFalse(set2.isEmpty());
      assertSame(set2, set0);
      assertSame(set2, set1);
      assertFalse(set2.contains(string0));
      assertNotNull(set2);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = null;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      OrderedHashSet<Locale> orderedHashSet0 = new OrderedHashSet<Locale>();
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertNotNull(orderedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) orderedHashSet0, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertNotNull(list0);
      
      Locale locale0 = Locale.lookup(stack0, list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertNull(locale0);
      
      String string2 = python2Target_PythonStringRenderer0.toString(object0, sTGroup0.GROUP_FILE_EXTENSION, locale0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertEquals(".stg", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertNotNull(python2Target0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(python2Target0.targetCharValueEscape);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Tool tool0 = null;
      int int0 = 0;
      PredAST predAST0 = new PredAST(int0);
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      
      PredAST predAST1 = new PredAST(predAST0);
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals(0, predAST1.getType());
      assertEquals((-1), predAST1.getChildIndex());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertFalse(predAST1.equals((Object)predAST0));
      assertNotNull(predAST1);
      
      Grammar grammar0 = predAST1.g;
      assertNull(grammar0);
      
      String string0 = "ah5f`+eI>|^L>T0HF(4";
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, string0);
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals(0, predAST1.getType());
      assertEquals((-1), predAST1.getChildIndex());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertFalse(predAST0.equals((Object)predAST1));
      assertFalse(predAST1.equals((Object)predAST0));
      assertNotNull(codeGenerator0);
      
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals(0, predAST1.getType());
      assertEquals((-1), predAST1.getChildIndex());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertFalse(predAST0.equals((Object)predAST1));
      assertFalse(predAST1.equals((Object)predAST0));
      assertNotNull(python2Target0);
      
      python2Target0.addBadWords();
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals(0, predAST1.getType());
      assertEquals((-1), predAST1.getChildIndex());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotSame(predAST0, predAST1);
      assertNotSame(predAST1, predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertFalse(predAST0.equals((Object)predAST1));
      assertFalse(predAST1.equals((Object)predAST0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String[] stringArray0 = new String[1];
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Grammar grammar0 = null;
      CodeGenerator codeGenerator0 = null;
      try {
        codeGenerator0 = new CodeGenerator(grammar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.CodeGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      String string0 = "1";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitRuleLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertNotNull(python2Target0);
      
      int int0 = 8591;
      ClassicToken classicToken0 = new ClassicToken(int0);
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(8591, classicToken0.getType());
      assertNotNull(classicToken0);
      
      AttributeDict attributeDict0 = Rule.predefinedRulePropertiesDict;
      assertNull(attributeDict0.getName());
      assertNotNull(attributeDict0);
      
      GrammarAST grammarAST0 = attributeDict0.ast;
      assertNull(grammarAST0);
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      String string0 = python2Target0.getVersion();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      
      int int0 = 4268;
      String string1 = null;
      int int1 = 0;
      ClassicToken classicToken0 = new ClassicToken(int0, string1, int1);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(4268, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(classicToken0);
      
      Python2Target.python2Keywords = python2Target0.targetCharValueEscape;
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      BlockAST blockAST0 = new BlockAST(classicToken0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(4268, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(4268, blockAST0.getType());
      assertEquals((-1), blockAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(blockAST0);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(4268, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(4268, blockAST0.getType());
      assertEquals((-1), blockAST0.childIndex);
      assertTrue(boolean1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      
      python2Target0.addBadWords();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
  }
}
