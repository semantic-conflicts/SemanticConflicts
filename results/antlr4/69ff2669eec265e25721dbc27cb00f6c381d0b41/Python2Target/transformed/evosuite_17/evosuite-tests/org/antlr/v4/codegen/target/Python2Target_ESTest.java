/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 06:38:55 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.StructDecl;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.atn.PredicateTransition;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      
      int int0 = 1415;
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      GrammarAST grammarAST0 = new GrammarAST(int0, commonToken0, sTGroup0.DEFAULT_KEY);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(1415, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(1415, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), grammarAST0.childIndex);
      
      python2Target0.addBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      int int0 = 8191;
      String string0 = "m";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("M", locale0.getCountry());
      assertEquals("m", locale0.getLanguage());
      assertNotNull(locale0);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse(string0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Set<String> set0 = Grammar.ruleOptions;
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(locale0));
      
      List<Locale> list1 = Locale.filter(list0, (Collection<Locale>) stack0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(stack0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list2 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertFalse(set0.contains(string0));
      assertFalse(list2.contains(string0));
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("M", string1);
      assertEquals("m_M", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("M", locale0.getCountry());
      assertEquals("m", locale0.getLanguage());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = 894;
      String string2 = "_r>5e*WHeB4;=K&SJe";
      Locale locale1 = Locale.CHINA;
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      String string3 = "";
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, string3, locale1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, python2Target0.language, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      int int0 = (-266);
      CommonToken commonToken0 = new CommonToken(int0, python2Target0.language);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-266), commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      AltAST altAST0 = new AltAST(commonToken0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-266), commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-266), altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(boolean0);
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-266), commonToken0.getType());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-266), altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      CodeGenerator codeGenerator0 = null;
      String string0 = "[HWvjR5AJ;6t{H;1";
      // Undeclared exception!
      try { 
        python2Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(python2Target0);
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.childIndex);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "";
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      int int0 = (-2188);
      int int1 = (-1578);
      ClassicToken classicToken0 = new ClassicToken(int1);
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertNotNull(classicToken0);
      assertFalse(int1 == int0);
      
      ClassicToken classicToken1 = new ClassicToken(classicToken0);
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertNotNull(classicToken1);
      assertFalse(int1 == int0);
      assertFalse(classicToken1.equals((Object)classicToken0));
      
      AltAST altAST0 = new AltAST(int0, classicToken1);
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-2188), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertFalse(classicToken1.equals((Object)classicToken0));
      
      altAST0.setUnknownTokenBoundaries();
      assertEquals(0, classicToken0.getLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-2188), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertFalse(classicToken1.equals((Object)classicToken0));
      assertNotSame(classicToken0, classicToken1);
      assertNotSame(classicToken1, classicToken0);
      
      classicToken0.setCharPositionInLine(int0);
      assertEquals(0, classicToken0.getLine());
      assertEquals((-2188), classicToken0.getCharPositionInLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertNotSame(classicToken0, classicToken1);
      
      AltAST altAST1 = new AltAST(altAST0);
      assertEquals(0, classicToken0.getLine());
      assertEquals((-2188), classicToken0.getCharPositionInLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-2188), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST1.getChildCount());
      assertEquals((-2188), altAST1.getType());
      assertFalse(altAST1.isNil());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getTokenStartIndex());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertNotNull(altAST1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertFalse(classicToken1.equals((Object)classicToken0));
      assertFalse(altAST1.equals((Object)altAST0));
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST1);
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-2188), classicToken0.getCharPositionInLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-2188), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST1.getChildCount());
      assertEquals((-2188), altAST1.getType());
      assertFalse(altAST1.isNil());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals(0, altAST1.getTokenStartIndex());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertFalse(classicToken1.equals((Object)classicToken0));
      assertFalse(altAST0.equals((Object)altAST1));
      assertFalse(altAST1.equals((Object)altAST0));
      assertNotSame(classicToken0, classicToken1);
      assertNotSame(classicToken1, classicToken0);
      assertNotSame(altAST0, altAST1);
      assertNotSame(altAST1, altAST0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python2Target0.templatesExist();
      assertFalse(boolean2);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = false;
      String string0 = python2Target0.getTargetStringLiteralFromString(altAST0.textOverride, boolean3);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-2188), classicToken0.getCharPositionInLine());
      assertEquals((-1578), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getChannel());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken1.getTokenIndex());
      assertEquals(0, classicToken1.getChannel());
      assertEquals(0, classicToken1.getCharPositionInLine());
      assertNull(classicToken1.getText());
      assertEquals((-1578), classicToken1.getType());
      assertEquals(0, classicToken1.getLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-2188), altAST0.getType());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
      assertNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(classicToken0.equals((Object)classicToken1));
      assertFalse(classicToken1.equals((Object)classicToken0));
      assertFalse(altAST0.equals((Object)altAST1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(classicToken0, classicToken1);
      assertNotSame(classicToken1, classicToken0);
      assertNotSame(altAST0, altAST1);
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "ord";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertEquals("ord", string1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      String string0 = "";
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }
}
