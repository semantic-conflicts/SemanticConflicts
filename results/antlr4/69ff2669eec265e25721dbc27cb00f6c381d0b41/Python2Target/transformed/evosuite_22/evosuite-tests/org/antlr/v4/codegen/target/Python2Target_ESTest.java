/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 07:05:03 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.atn.PredicateTransition;
import org.antlr.v4.runtime.atn.SemanticContext;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      String string0 = "org.antlr.v4.runtime.Parser$TraceListener";
      // Undeclared exception!
      try { 
        python2Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      Python2Target.python2Keywords = python2Target0.targetCharValueEscape;
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string1 = "S;,h,'w^a";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      assertSame(locale0, locale1);
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("S;,h,'w^a", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(locale0, locale1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      int int0 = 2060;
      String string0 = null;
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(2060, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNotNull(classicToken0);
      
      BlockAST blockAST0 = new BlockAST(classicToken0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(2060, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(2060, blockAST0.getType());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertNotNull(blockAST0);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(2060, classicToken0.getType());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(2060, blockAST0.getType());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotNull(python2Target0);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      Token token0 = null;
      BlockAST blockAST0 = new BlockAST(token0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertTrue(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertNotNull(blockAST0);
      
      // Undeclared exception!
      try { 
        blockAST0.dupTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = python2Target0.language;
      stringArray0[1] = python2Target0.language;
      stringArray0[2] = python2Target0.language;
      stringArray0[3] = python2Target0.language;
      stringArray0[4] = python2Target0.language;
      stringArray0[5] = stringArray0[1];
      stringArray0[6] = python2Target0.language;
      python2Target0.targetCharValueEscape = stringArray0;
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      int int0 = 0;
      PredAST predAST0 = new PredAST(int0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertNotNull(predAST0);
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertFalse(boolean2);
      assertEquals((-1), predAST0.childIndex);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      
      boolean boolean3 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "Ig4eH}yt0=HL{'R";
      String string1 = StringRenderer.escapeHTML(string0);
      assertEquals("Ig4eH}yt0=HL{'R", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Locale locale0 = null;
      String string2 = python2Target_PythonStringRenderer0.toString(object0, python2Target0.language, locale0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      int int0 = 0;
      String string0 = python2Target0.encodeIntAsCharEscape(int0);
      assertEquals("\\0", string0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(string0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      STGroup sTGroup0 = STGroup.defaultGroup;
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNull(sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      python2Target0.templates = sTGroup0;
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(sTGroup0.getFileName());
      assertNull(python2Target0.templates.getFileName());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "ord";
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = locale1.getDisplayScript(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(string1, string0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(python2Target0);
      
      String string2 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string2));
      assertTrue(set0.contains(string0));
      assertNotNull(set0);
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      Set<String> set1 = python2Target0.getBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertFalse(set1.contains(string2));
      assertTrue(set1.contains(string0));
      assertNotNull(set1);
      assertSame(set1, set0);
      
      int int0 = 0;
      int int1 = (-212);
      String string3 = "divmod";
      ClassicToken classicToken0 = new ClassicToken(int1, string3, int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-212), classicToken0.getType());
      assertEquals("divmod", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-212), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      
      GrammarAST grammarAST0 = new GrammarAST(int0, classicToken0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-212), classicToken0.getType());
      assertEquals("divmod", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-212), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertNotNull(grammarAST0);
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean1);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-212), classicToken0.getType());
      assertEquals("divmod", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-212), classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      String string4 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
  }
}
