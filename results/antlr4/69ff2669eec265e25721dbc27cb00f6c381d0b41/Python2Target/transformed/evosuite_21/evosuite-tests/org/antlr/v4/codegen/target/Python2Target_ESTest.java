/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 06:59:37 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.misc.LogManager;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.DefaultToolListener;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LeftRecursiveRule;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "7wAKDc/yzxy8%";
      String string1 = "None";
      String string2 = StringRenderer.escapeHTML(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("None", string2);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayLanguage(locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\u4E2D\u56FD\u8A9E", string3);
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(boolean0);
      
      String string0 = "";
      boolean boolean1 = false;
      String string1 = python2Target0.getTargetStringLiteralFromString(string0, boolean1);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Python2Target python2Target0 = new Python2Target();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotNull(python2Target0);
      
      python2Target0.addBadWords();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertNotNull(python2Target0);
      
      String string0 = "$DkPp52j%\\y*7";
      // Undeclared exception!
      try { 
        python2Target0.getImplicitTokenLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertNotNull(python2Target0);
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getType());
      assertTrue(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      String string0 = ",[iQU";
      // Undeclared exception!
      try { 
        python2Target0.getElementListName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "P";
      String string1 = "";
      Locale locale0 = null;
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(python2Target0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      assertNotNull(set1);
      
      String string0 = python2Target0.getVersion();
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotNull(string0);
      assertEquals("4.5.2.1", string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNotNull(python2Target0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertNotNull(sTGroup0);
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(boolean0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotNull(python2Target0);
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotNull(python2Target0);
      
      int int0 = 29;
      PredAST predAST0 = new PredAST(int0);
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(29, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      
      PredAST predAST1 = new PredAST(predAST0);
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(29, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals((-1), predAST1.getChildIndex());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(29, predAST1.getType());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertFalse(predAST1.equals((Object)predAST0));
      assertNotNull(predAST1);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(29, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals((-1), predAST1.getChildIndex());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(29, predAST1.getType());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertNotSame(predAST0, predAST1);
      assertNotSame(predAST1, predAST0);
      assertFalse(predAST0.equals((Object)predAST1));
      assertFalse(predAST1.equals((Object)predAST0));
      assertFalse(boolean0);
  }
}
