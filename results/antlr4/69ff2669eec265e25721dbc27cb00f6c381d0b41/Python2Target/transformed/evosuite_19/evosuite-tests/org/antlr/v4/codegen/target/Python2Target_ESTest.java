/*
 * This file was automatically generated by EvoSuite
 * Thu May 28 06:49:14 GMT 2020
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.Token;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.CodeGeneratorExtension;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.SourceGenTriggers;
import org.antlr.v4.codegen.model.CodeBlockForAlt;
import org.antlr.v4.codegen.model.OptionalBlock;
import org.antlr.v4.codegen.model.SrcOp;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.atn.BasicBlockStartState;
import org.antlr.v4.runtime.atn.Transition;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.Alternative;
import org.antlr.v4.tool.AttributeDict;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.compiler.CompiledST;
import org.stringtemplate.v4.compiler.FormalArgument;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      int int0 = 2719;
      String string0 = ",Y\"v'D3wpEIh";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertNotNull(classicToken0);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      
      String string1 = "memoryview";
      BlockAST blockAST0 = new BlockAST(int0, classicToken0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(blockAST0);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.childIndex);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertTrue(set0.contains(string1));
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      String string2 = blockAST0.getAltLabel();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(string2);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.childIndex);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = 54;
      String string3 = blockAST0.getAltLabel();
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(string3);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.childIndex);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string4 = blockAST0.toString();
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals("memoryview", string4);
      assertEquals((-1), blockAST0.childIndex);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string4);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      
      classicToken0.setLine(int1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int1 == int0);
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(54, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      
      blockAST0.setUnknownTokenBoundaries();
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(54, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.childIndex);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string4);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(",Y\"v'D3wpEIh", classicToken0.getText());
      assertEquals(54, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(2719, classicToken0.getType());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(2719, blockAST0.getType());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertTrue(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string4);
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", string0);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer1 = new Python2Target.PythonStringRenderer();
      assertFalse(python2Target_PythonStringRenderer1.equals((Object)python2Target_PythonStringRenderer0));
      assertNotNull(python2Target_PythonStringRenderer1);
      
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = null;
      Set<String> set0 = Rule.validLexerCommands;
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(7, set0.size());
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python2Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      LexerFactory lexerFactory0 = null;
      try {
        lexerFactory0 = new LexerFactory(python2Target0.gen);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.DefaultOutputModelFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.badWords = python2Target0.badWords;
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      String string0 = "reduce";
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean1);
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(boolean2);
      
      STGroup sTGroup1 = python2Target0.loadTemplates();
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertNotNull(sTGroup1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotSame(sTGroup1, sTGroup0);
      
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream();
      assertNotNull(aNTLRReaderStream0);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      
      RecognitionException recognitionException0 = new RecognitionException(aNTLRReaderStream0);
      assertNotNull(recognitionException0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognitionException0.index);
      assertEquals((-1), recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(1, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      AltAST altAST0 = new AltAST(token0);
      assertNotNull(altAST0);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(0, aNTLRReaderStream0.size());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals((-1), recognitionException0.getUnexpectedType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getType());
      assertTrue(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognitionException0.index);
      assertEquals((-1), recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(1, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals((-1), altAST0.childIndex);
      
      GrammarAST grammarAST0 = altAST0.altLabel;
      assertNull(grammarAST0);
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      int int0 = (-2674);
      String string0 = "/5~[t%IGvJ)\"/\\+k'";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertNotNull(classicToken0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-2674), classicToken0.getType());
      
      int int1 = 0;
      classicToken0.setType(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      
      classicToken0.setText(string0);
      assertFalse(int0 == int1);
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      
      TerminalAST terminalAST0 = new TerminalAST(classicToken0);
      assertFalse(int0 == int1);
      assertNotNull(terminalAST0);
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.childIndex);
      
      int int2 = 0;
      classicToken0.setType(int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      
      TerminalAST terminalAST1 = new TerminalAST(terminalAST0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(terminalAST1.equals((Object)terminalAST0));
      assertNotNull(terminalAST1);
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST1.getCharPositionInLine());
      assertEquals(0, terminalAST1.getChildCount());
      assertFalse(terminalAST1.isNil());
      assertEquals(0, terminalAST1.getTokenStopIndex());
      assertEquals(0, terminalAST1.getLine());
      assertEquals(0, terminalAST1.getTokenStartIndex());
      assertEquals((-1), terminalAST1.getChildIndex());
      assertEquals(0, terminalAST1.getNumberOfOptions());
      assertEquals(0, terminalAST1.getType());
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals((-1), terminalAST1.childIndex);
      
      terminalAST1.token = (Token) classicToken0;
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST1.getCharPositionInLine());
      assertEquals(0, terminalAST1.getChildCount());
      assertFalse(terminalAST1.isNil());
      assertEquals(0, terminalAST1.getTokenStopIndex());
      assertEquals(0, terminalAST1.getLine());
      assertEquals(0, terminalAST1.getTokenStartIndex());
      assertEquals((-1), terminalAST1.getChildIndex());
      assertEquals(0, terminalAST1.getNumberOfOptions());
      assertEquals(0, terminalAST1.getType());
      assertEquals(0, terminalAST1.token.getCharPositionInLine());
      assertEquals(0, terminalAST1.token.getChannel());
      assertEquals(0, terminalAST1.token.getLine());
      assertEquals(0, terminalAST1.token.getType());
      assertEquals(0, terminalAST1.token.getTokenIndex());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(terminalAST0.equals((Object)terminalAST1));
      assertFalse(terminalAST1.equals((Object)terminalAST0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(0, terminalAST0.getChildCount());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getType());
      assertEquals(0, terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals(0, terminalAST1.getCharPositionInLine());
      assertEquals(0, terminalAST1.getChildCount());
      assertFalse(terminalAST1.isNil());
      assertEquals(0, terminalAST1.getTokenStopIndex());
      assertEquals(0, terminalAST1.getLine());
      assertEquals(0, terminalAST1.getTokenStartIndex());
      assertEquals((-1), terminalAST1.getChildIndex());
      assertEquals(0, terminalAST1.getNumberOfOptions());
      assertEquals(0, terminalAST1.getType());
      assertFalse(boolean0);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals((-1), terminalAST1.childIndex);
      assertNotSame(terminalAST0, terminalAST1);
      assertNotSame(terminalAST1, terminalAST0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean1);
      
      String string1 = "nextToken";
      boolean boolean2 = false;
      String string2 = python2Target0.getTargetStringLiteralFromString(string1, boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("nextToken", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      boolean boolean3 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean3);
      
      boolean boolean4 = python2Target0.wantsBaseListener();
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean4);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      boolean boolean5 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean5);
      
      boolean boolean6 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean6);
      
      boolean boolean7 = python2Target0.wantsBaseVisitor();
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean7);
      
      boolean boolean8 = python2Target0.supportsOverloadedMethods();
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean8);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      OrderedHashSet<Locale> orderedHashSet0 = new OrderedHashSet<Locale>();
      assertNotNull(orderedHashSet0);
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) orderedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string3 = python2Target_PythonStringRenderer0.toString((Object) string0, python2Target0.language, locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, linkedList0.size());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(orderedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("/5~[t%IGvJ)\"/\\+k'", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      boolean boolean9 = python2Target0.wantsBaseListener();
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean8);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean9);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      int int0 = 1101;
      String string0 = python2Target0.encodeIntAsCharEscape(int0);
      assertNotNull(string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("\\u044d", string0);
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = null;
      python2Target0.badWords = set0;
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = "reduce";
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      // Undeclared exception!
      try { 
        python2Target0.getElementName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }
}
