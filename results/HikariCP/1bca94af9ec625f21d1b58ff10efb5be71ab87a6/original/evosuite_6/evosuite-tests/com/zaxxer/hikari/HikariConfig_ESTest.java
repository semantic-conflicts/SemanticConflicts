/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:42:11 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.sql.Connection;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      Collection<Object> collection0 = properties0.values();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 187;
      hikariConfig0.setMaximumPoolSize(int0);
      long long0 = (-243L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      hikariConfig0.setIdleTimeout(long0);
      long long1 = 389L;
      String string0 = "";
      Object object0 = new Object();
      Object object1 = properties0.put(string0, object0);
      hikariConfig0.setIdleTimeout(long1);
      Object object2 = properties0.put(hikariConfig0, string0);
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      long long2 = 10L;
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long2);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "=>38g$w0BH`";
      String string1 = "U6G9tflJu)>Z-o=8[";
      HikariConfig hikariConfig1 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig1.setReadOnly(boolean0);
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setTransactionIsolation(string1);
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setConnectionCustomizerClassName(string1);
      String string2 = "f8`'DWB-Qy&;[&b{";
      hikariConfig0.setTransactionIsolation(string2);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariConfig0.setAutoCommit(boolean0);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      int int0 = hikariConfig0.getAcquireIncrement();
      String string0 = " because of ";
      String string1 = "2p._N^A|V]AZ";
      String string2 = ",i6raA7?hvB";
      hikariConfig0.setConnectionTestQuery(string2);
      hikariConfig0.setPoolName(string1);
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean1 = hikariConfig0.isReadOnly();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      hikariConfig0.setConnectionInitSql(string1);
      hikariConfig0.setAcquireRetries(int0);
      String string3 = "Kbh4B2<T";
      hikariConfig0.setConnectionCustomizerClassName(string3);
      hikariConfig0.setAcquireIncrement(int0);
      String string4 = hikariConfig0.getJdbcUrl();
      hikariConfig0.setConnectionInitSql(string4);
      hikariConfig0.validate();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance:  because of 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      int int0 = 0;
      int int1 = 0;
      Object object0 = new Object();
      long long0 = 0L;
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      int int2 = (-190);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int2);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      String string0 = "";
      int int0 = 1089;
      boolean boolean0 = true;
      hikariDataSource0.setMaximumPoolSize(int0);
      hikariDataSource0.setPoolName(string0);
      int int1 = hikariDataSource0.getAcquireRetries();
      String string1 = "";
      hikariDataSource0.setAcquireRetries(int0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hikariDataSource0.setTransactionIsolation(string1);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "9,w8%%4cAY4hH\\{z";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = hikariConfig0.getMaximumPoolSize();
      Object object0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        properties0.put(object0, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      long long0 = 2990L;
      hikariConfig0.setConnectionTimeout(long0);
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = 0;
      String string1 = "(g)eaF*";
      hikariConfig0.setCatalog(string1);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(long0);
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      String string0 = "y8:Y5#sD7HZ^";
      hikariDataSource0.setDataSourceClassName(string0);
      boolean boolean0 = true;
      hikariDataSource0.setConnectionTimeout(long0);
      hikariDataSource0.setReadOnly(boolean0);
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: y8:Y5#sD7HZ^
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.setDataSource(hikariDataSource0);
      String string0 = null;
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.validate();
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig1.setRegisterMbeans(boolean1);
      String string1 = "";
      hikariConfig1.copyState(hikariConfig0);
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "CTne;&5l)[kX";
      hikariConfig0.addDataSourceProperty(string0, string0);
      int int0 = 0;
      hikariConfig0.setAcquireRetries(int0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setCatalog(string0);
      hikariConfig0.setDataSource(dataSource0);
      long long0 = 1626L;
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      boolean boolean1 = true;
      hikariConfig0.setReadOnly(boolean1);
      boolean boolean2 = false;
      hikariConfig0.setRegisterMbeans(boolean2);
      hikariConfig0.setConnectionTimeout(long0);
      boolean boolean3 = true;
      hikariConfig0.setUseInstrumentation(boolean3);
      String string1 = "";
      hikariConfig0.setJdbcUrl(string1);
      boolean boolean4 = hikariConfig0.isReadOnly();
      boolean boolean5 = hikariConfig0.isInitializationFailFast();
      boolean boolean6 = hikariConfig0.isRegisterMbeans();
      hikariConfig0.setMaxLifetime(long0);
      int int1 = hikariConfig0.getAcquireRetries();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL 
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 1097;
      hikariDataSource0.setLoginTimeout(int0);
      long long0 = 855L;
      hikariDataSource0.setConnectionTimeout(long0);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string0 = "Rf'6u!z<:53N=ChB";
      hikariDataSource0.setCatalog(string0);
      hikariDataSource0.setMinimumPoolSize(int0);
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      hikariDataSource0.setAcquireRetries(int0);
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      hikariDataSource0.copyState(hikariConfig0);
      String string0 = hikariDataSource0.getConnectionInitSql();
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      Properties properties1 = new Properties();
      hikariConfig0.setDataSourceProperties(properties1);
      String string2 = hikariDataSource0.getDataSourceClassName();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string0 = "acquireRetryDelay cannot be negative";
      Object object0 = properties0.put(string0, string0);
      long long0 = hikariConfig0.getIdleTimeout();
      String string1 = hikariConfig0.getPoolName();
      hikariConfig0.setInitializationFailFast(boolean0);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "Vl?#X&| aeM\\";
      boolean boolean0 = true;
      hikariDataSource0.setAutoCommit(boolean0);
      hikariDataSource0.setDataSourceClassName(string0);
      int int0 = hikariDataSource0.getAcquireIncrement();
      hikariDataSource0.validate();
      boolean boolean1 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      String string1 = hikariDataSource0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "9xu@qC";
      hikariConfig0.setDataSourceClassName(string0);
      int int0 = hikariConfig0.getAcquireRetries();
      hikariConfig0.setAcquireRetries(int0);
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "&p^?Fb";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = (-133);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "PKh/RR+E)1N]";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getTransactionIsolation();
      boolean boolean0 = false;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "ihXOFL5F+3c5hDdGZ7";
      hikariConfig0.setConnectionInitSql(string0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Properties properties0 = new Properties();
      String string0 = "h0(x{)O\\g/<\\";
      BiFunction<Object, Object, Integer> biFunction0 = null;
      int int0 = (-1934);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "shortValue";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "oLLQDd-5P5TosCz4$w";
      hikariDataSource0.setDataSourceClassName(string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      hikariDataSource0.setConnectionTestQuery(string0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Class<HikariConfig> class0 = HikariConfig.class;
      boolean boolean0 = hikariDataSource0.isWrapperFor(class0);
      String string0 = hikariDataSource0.getConnectionTestQuery();
      hikariDataSource0.setPoolName(string0);
      String string1 = "}";
      hikariDataSource0.setCatalog(string1);
      boolean boolean1 = true;
      hikariDataSource0.setAutoCommit(boolean1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      long long0 = 2266L;
      hikariConfig0.setAcquireRetryDelay(long0);
      Properties properties0 = new Properties();
      hikariConfig0.setDataSourceProperties(properties0);
      String string1 = "Yz\\/+ j:gH`eL|,";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'Yz\\/+ j:gH`eL|,' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "p5,5o@%JW(";
      hikariConfig0.setJdbcUrl(string0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      boolean boolean0 = true;
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      hikariConfig0.setRegisterMbeans(boolean0);
      String string1 = "";
      long long0 = 4346L;
      hikariConfig0.setMaxLifetime(long0);
      String string2 = "";
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      hikariConfig0.setCatalog(string2);
      hikariConfig0.setPoolName(string1);
      Object object1 = new Object();
      Object object2 = properties0.putIfAbsent(hikariConfig0, object1);
      Object object3 = new Object();
      Object object4 = properties0.put(object3, object3);
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setCom.zaxxer.hikari.HikariConfig@0000000001
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = hikariDataSource0.getCatalog();
      String string1 = "";
      hikariDataSource0.setPoolName(string1);
      boolean boolean0 = hikariDataSource0.isIsolateInternalQueries();
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      hikariDataSource0.copyState(hikariConfig0);
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Q|B3ekLr*sdrI)Wz";
      Object object0 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object0);
      long long0 = hikariConfig0.getAcquireRetryDelay();
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "value";
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.copyState(hikariDataSource0);
      hikariConfig0.setConnectionInitSql(string1);
      long long0 = hikariConfig0.getIdleTimeout();
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      long long1 = (-1L);
      Properties properties0 = new Properties();
      hikariConfig0.setDataSourceProperties(properties0);
      boolean boolean1 = false;
      hikariDataSource0.setInitializationFailFast(boolean1);
      hikariConfig0.setIdleTimeout(long1);
      hikariConfig0.setConnectionCustomizerClassName(string1);
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      String string2 = "";
      hikariConfig0.addDataSourceProperty(string0, string2);
      String string3 = "|:=v=#a\">;-";
      hikariConfig0.setConnectionInitSql(string3);
      hikariConfig0.setDataSourceProperties(properties0);
      Set<String> set0 = properties0.stringPropertyNames();
      long long0 = hikariConfig0.getMaxLifetime();
      int int0 = hikariConfig0.getTransactionIsolation();
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = hikariDataSource0.getLeakDetectionThreshold();
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      long long1 = 30L;
      hikariDataSource0.setLeakDetectionThreshold(long1);
      hikariDataSource0.setMaxLifetime(long0);
      String string0 = hikariDataSource0.getJdbcUrl();
      String string1 = "oE;nzl'8gq(L`1$33";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'oE;nzl'8gq(L`1$33' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      String string0 = "";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariConfig0.setPoolName(string1);
      boolean boolean0 = true;
      hikariConfig0.setUseInstrumentation(boolean0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.put(hikariDataSource0, object0);
      hikariDataSource0.setAcquireRetries(int0);
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setCom.zaxxer.hikari.HikariDataSource@0000000001
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 2865;
      hikariConfig0.setAcquireIncrement(int0);
      String string0 = hikariConfig0.getCatalog();
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(long0);
      String string0 = "y8:Y5#sD7HZ^";
      hikariDataSource0.setDataSourceClassName(string0);
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: y8:Y5#sD7HZ^
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      String string0 = "bad bytecode. fatal?";
      Object object1 = properties0.getOrDefault(object0, string0);
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string1 = "/(Hhwhf7{";
      hikariConfig0.setPoolName(string1);
      String string2 = "";
      hikariConfig0.setConnectionTestQuery(string2);
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      hikariConfig0.setReadOnly(boolean0);
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      String string3 = "V6}V/r_*k6^q=s";
      Object object2 = new Object();
      hikariConfig0.addDataSourceProperty(string3, object2);
      String string4 = hikariConfig0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = hikariConfig0.getConnectionTimeout();
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      Object object0 = properties0.put(string0, string0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = hikariConfig0.getAcquireRetries();
      hikariConfig0.setConnectionCustomizerClassName(string0);
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      Object object1 = properties0.put(string1, hikariConfig0);
      long long0 = hikariConfig0.getMaxLifetime();
      long long1 = hikariConfig0.getConnectionTimeout();
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      hikariConfig0.setLeakDetectionThreshold(int0);
      Properties properties1 = hikariConfig0.getDataSourceProperties();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 5000L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      int int0 = hikariConfig0.getMaximumPoolSize();
      long long1 = (-8L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      String string0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 600L;
      hikariConfig0.setIdleTimeout(long0);
      String string0 = "";
      long long1 = 3177L;
      hikariConfig0.setConnectionTimeout(long1);
      hikariConfig0.setConnectionTestQuery(string0);
      long long2 = 0L;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariConfig0.setAcquireRetryDelay(long2);
      String string1 = "G(Y\"=@~(eK[";
      hikariConfig0.setJdbcUrl(string1);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      String string2 = hikariConfig0.getDataSourceClassName();
      boolean boolean1 = hikariConfig0.isReadOnly();
      String string3 = hikariConfig0.getJdbcUrl();
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      long long1 = 0L;
      long long2 = (-1717L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long2);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      String string0 = "{return new ";
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = 2383L;
      hikariConfig0.setConnectionTimeout(long0);
      long long1 = 0L;
      hikariConfig0.setAcquireRetryDelay(long1);
      boolean boolean1 = hikariConfig0.isAutoCommit();
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 303;
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource0.setMinimumPoolSize(int0);
      String string0 = "";
      hikariDataSource0.setJdbcUrl(string0);
      int int1 = 0;
      hikariDataSource0.setAcquireRetries(int1);
      int int2 = 0;
      hikariDataSource0.setMaximumPoolSize(int2);
      hikariDataSource0.setIdleTimeout(int2);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      hikariConfig0.setDataSourceClassName(string0);
      int int0 = (-2507);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Nc";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "?&:h[1uLDW}gF5_+";
      hikariConfig0.addDataSourceProperty(string0, string1);
      Properties properties0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 5000L;
      String string0 = "a|{% !;o{7@%2ro";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariConfig0.setLeakDetectionThreshold(long0);
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      String string1 = "connectionTimeout cannot be less than 100ms";
      hikariConfig0.setConnectionInitSql(string1);
      int int0 = (-4705);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      Properties properties0 = new Properties();
      boolean boolean0 = properties0.remove((Object) hikariConfig0, (Object) hikariConfig0);
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      String string0 = "[B";
      hikariConfig1.setPoolName(string0);
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      hikariConfig1.setLeakDetectionThreshold(long0);
      int int0 = 3;
      hikariConfig0.setAcquireRetries(int0);
      long long1 = 4454L;
      Object object0 = properties0.put(hikariConfig0, hikariConfig1);
      Object object1 = new Object();
      Object object2 = properties0.put(hikariConfig0, object1);
      long long2 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long2);
      hikariConfig0.setConnectionTimeout(long1);
      int int1 = (-1909);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      String string0 = hikariConfig0.getConnectionInitSql();
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      int int1 = (-2312);
      String string1 = "";
      hikariConfig0.setCatalog(string1);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int1);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1945L);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string0 = "javassist.bytecode.SignatureAttribute$ClassType";
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'javassist.bytecode.SignatureAttribute$ClassType' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      int int0 = stringReader0.read();
      properties0.load((Reader) stringReader0);
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      Set<String> set0 = properties0.stringPropertyNames();
      long long0 = 286L;
      hikariConfig0.setIdleTimeout(long0);
      Object object0 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object0);
      Object object1 = new Object();
      Object object2 = new Object();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object3 = properties0.merge(object1, object2, biFunction0);
      int int1 = 3;
      hikariConfig0.setMaximumPoolSize(int1);
      String string1 = hikariConfig0.getConnectionInitSql();
      String string2 = "";
      hikariConfig0.setDataSourceClassName(string2);
      int int2 = hikariConfig0.getAcquireIncrement();
      int int3 = hikariConfig0.getAcquireIncrement();
      int int4 = hikariConfig0.getMaximumPoolSize();
      int int5 = hikariConfig0.getMaximumPoolSize();
      int int6 = hikariConfig0.getMaximumPoolSize();
      boolean boolean1 = hikariConfig0.isAutoCommit();
      String string3 = hikariConfig0.getJdbcUrl();
      String string4 = "one of either dataSource or dataSourceClassName must be specified";
      hikariConfig0.setPoolName(string4);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      Properties properties0 = new Properties();
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      Object object1 = properties0.put(hikariConfig0, hikariConfig0);
      hikariConfig0.setDataSourceProperties(properties0);
      long long0 = 37L;
      hikariConfig0.setAcquireRetryDelay(long0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-5L);
      hikariDataSource0.setIdleTimeout(long0);
      String string0 = "y8:Y5#sD7HZ^";
      hikariDataSource0.setDataSourceClassName(string0);
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariConfig0.setAutoCommit(boolean0);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      long long0 = 10L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      int int0 = hikariConfig0.getAcquireIncrement();
      String string0 = " because of ";
      String string1 = "2p._N^A|V]AZ";
      String string2 = ",i6raA7?hvB";
      hikariConfig0.setConnectionTestQuery(string2);
      hikariConfig0.setPoolName(string1);
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean1 = hikariConfig0.isReadOnly();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      hikariConfig0.setConnectionInitSql(string1);
      hikariConfig0.setAcquireRetries(int0);
      String string3 = "Kbh4B2<T";
      hikariConfig0.setConnectionCustomizerClassName(string3);
      String string4 = hikariConfig0.getJdbcUrl();
      hikariConfig0.setConnectionInitSql(string4);
      hikariConfig0.validate();
      long long1 = 1334L;
      hikariConfig0.setConnectionTimeout(long1);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(long0);
      String string0 = "\"][@>+jj<t.1q\\";
      hikariDataSource0.setTransactionIsolation(string0);
      String string1 = "y8:Y5#sD7HZ^";
      hikariDataSource0.setDataSourceClassName(string1);
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      HikariPool hikariPool0 = hikariDataSource0.fastPathPool;
      hikariDataSource0.fastPathPool = hikariPool0;
      HikariPool hikariPool1 = null;
      try {
        hikariPool1 = new HikariPool(hikariDataSource0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: \"][@>+jj<t.1q\\
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      String string0 = "";
      String string1 = "X<!S=jr..uxi2$`";
      hikariDataSource1.setTransactionIsolation(string1);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariConfig0.copyState(hikariDataSource0);
      long long0 = 1773L;
      hikariDataSource0.setConnectionTimeout(long0);
      hikariConfig0.setConnectionTimeout(long0);
      hikariDataSource0.copyState(hikariConfig0);
      long long1 = 750L;
      hikariDataSource0.setConnectionTimeout(long1);
      long long2 = 100L;
      hikariConfig0.setConnectionTimeout(long2);
      hikariConfig0.copyState(hikariDataSource0);
      hikariDataSource0.copyState(hikariDataSource1);
      String string2 = "";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      int int0 = 0;
      int int1 = 0;
      Object object0 = new Object();
      long long0 = 0L;
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      hikariConfig0.setMaximumPoolSize(int0);
      boolean boolean4 = true;
      hikariConfig0.validate();
      hikariConfig0.setIsolateInternalQueries(boolean4);
      int int2 = hikariConfig0.getAcquireIncrement();
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = new Object();
      hikariDataSource0.setAcquireRetries(int0);
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "com.zaxxer.hikari.HikariConfig";
      hikariDataSource0.setDriverClassName(string0);
      hikariConfig0.copyState(hikariDataSource0);
      hikariDataSource0.copyState(hikariConfig0);
      String string1 = hikariDataSource0.getConnectionInitSql();
      hikariDataSource0.setTransactionIsolation(string1);
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      Properties properties1 = new Properties();
      hikariConfig0.setDataSourceProperties(properties1);
      String string3 = hikariDataSource0.getDataSourceClassName();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
  }
}
