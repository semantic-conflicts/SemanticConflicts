/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:56:46 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Enumeration;
import java.util.Properties;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "3q3VlL#u:~]HA A7";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "one of either dataSource or dataSourceClassName must be specified";
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      int int0 = 0;
      String string2 = "<<=";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      hikariConfig0.setMinimumPoolSize(int0);
      String string3 = " . ";
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      hikariConfig0.setConnectionTestQuery(string3);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariDataSource0.setDataSourceClassName(string0);
      hikariDataSource0.copyState(hikariConfig0);
      hikariConfig0.copyState(hikariDataSource0);
      hikariConfig0.setPoolName(string1);
      hikariConfig0.setCatalog(string0);
      int int1 = 10;
      hikariConfig0.setMinimumPoolSize(int1);
      boolean boolean1 = false;
      int int2 = 0;
      hikariConfig0.setMinimumPoolSize(int2);
      int int3 = 0;
      hikariConfig0.setMaximumPoolSize(int3);
      hikariConfig0.setConnectionCustomizerClassName(string1);
      hikariConfig0.setRegisterMbeans(boolean1);
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      int int4 = hikariConfig0.getMaximumPoolSize();
      hikariConfig0.setAcquireRetryDelay(int4);
      Object object0 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object0);
      hikariConfig0.validate();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      long long0 = 8L;
      int int0 = 3;
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long1 = 0L;
      hikariConfig0.setConnectionTimeout(long1);
      HikariConfig hikariConfig1 = new HikariConfig();
      long long2 = (-2493L);
      // Undeclared exception!
      try { 
        hikariConfig1.setConnectionTimeout(long2);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 122;
      hikariDataSource0.setLoginTimeout(int0);
      boolean boolean0 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      hikariDataSource0.setMinimumPoolSize(int0);
      String string0 = "fhx%Gl,ZNNeC";
      hikariDataSource0.setTransactionIsolation(string0);
      boolean boolean1 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      long long0 = hikariDataSource0.getIdleTimeout();
      hikariDataSource0.setAcquireRetries(int0);
      boolean boolean2 = hikariDataSource0.isRegisterMbeans();
      int int1 = hikariDataSource0.getAcquireRetries();
      int int2 = hikariDataSource0.getAcquireRetries();
      String string1 = "OP}:";
      hikariDataSource0.setTransactionIsolation(string1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      int int0 = 362;
      String string0 = "";
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "javMs>ist.bytec#de.ignatureAttribute$Type";
      hikariConfig0.setPoolName(string1);
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setLeakDetectionThreshold(int0);
      String string2 = "LPN]YD0ezruyQKg|P";
      hikariConfig0.setJdbcUrl(string2);
      hikariConfig0.setInitializationFailFast(boolean0);
      hikariConfig0.setLeakDetectionThreshold(int0);
      String string3 = "s#.'6<t'o";
      hikariConfig0.setAcquireRetryDelay(int0);
      hikariConfig0.setLeakDetectionThreshold(int0);
      hikariConfig0.setCatalog(string3);
      boolean boolean1 = true;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      long long0 = 1L;
      hikariConfig0.setIdleTimeout(long0);
      boolean boolean2 = hikariConfig0.isAutoCommit();
      long long1 = 899L;
      hikariConfig0.setConnectionTimeout(long1);
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'LPN]YD0ezruyQKg|P' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Enumeration<Object> enumeration0 = properties0.elements();
      String string0 = "W";
      hikariConfig0.setDataSourceClassName(string0);
      Enumeration<Object> enumeration1 = properties0.elements();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: W
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "*p/d2Rj%MD1Y0bd";
      int int0 = 655;
      String string1 = "";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      hikariConfig0.setMaxLifetime(int0);
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.setJdbcUrl(string0);
      hikariConfig0.setCatalog(string0);
      long long0 = (-4370L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 1000L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      Properties properties0 = null;
      int int0 = 308;
      hikariDataSource0.setAcquireIncrement(int0);
      // Undeclared exception!
      try { 
        hikariDataSource0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 3222L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "";
      String string1 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      HikariConfig hikariConfig1 = new HikariConfig();
      String string2 = hikariConfig1.getConnectionTestQuery();
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.setCatalog(string0);
      long long1 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean0 = hikariConfig1.isIsolateInternalQueries();
      String string3 = hikariConfig0.getConnectionInitSql();
      String string4 = hikariConfig0.getJdbcUrl();
      long long2 = hikariConfig0.getAcquireRetryDelay();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      String string1 = "";
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setDataSource(dataSource0);
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      long long1 = (-2292L);
      hikariConfig0.setMaxLifetime(long1);
      boolean boolean1 = hikariConfig0.isAutoCommit();
      long long2 = hikariConfig0.getMaxLifetime();
      long long3 = hikariConfig0.getMaxLifetime();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      String string0 = null;
      hikariConfig0.setCatalog(string0);
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.setInitializationFailFast(boolean0);
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      hikariConfig0.setMaximumPoolSize(int0);
      int int1 = 1460;
      hikariConfig0.setAcquireIncrement(int1);
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      String string1 = null;
      hikariConfig0.setConnectionCustomizerClassName(string1);
      boolean boolean2 = hikariConfig0.isAutoCommit();
      hikariConfig0.setConnectionTestQuery(string1);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      int int0 = 170;
      hikariConfig1.setAcquireRetries(int0);
      long long0 = 0L;
      hikariConfig1.setMaxLifetime(long0);
      hikariConfig1.setAcquireIncrement(int0);
      String string0 = hikariConfig1.getPoolName();
      long long1 = hikariConfig0.getConnectionTimeout();
      boolean boolean2 = true;
      hikariConfig1.setIsolateInternalQueries(boolean2);
      int int1 = 926;
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setPoolName(string0);
      long long2 = hikariConfig1.getLeakDetectionThreshold();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "maxPoolSize cannot be negative";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      int int0 = (-375);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      int int0 = hikariDataSource0.getMinimumPoolSize();
      boolean boolean0 = true;
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      hikariDataSource0.setDataSource(dataSource0);
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      long long0 = 859L;
      hikariDataSource0.setIdleTimeout(long0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.copyState(hikariDataSource1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Could not create datasource instance: ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig1.setDataSourceClassName(string0);
      hikariConfig0.copyState(hikariConfig1);
      Properties properties0 = new Properties();
      Object object0 = null;
      int int0 = (-3583);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      String string0 = "ooc84Y";
      hikariDataSource0.setJdbcUrl(string0);
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "HdCQl/1n5u[";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      String string0 = "*p/d2Rj%MD1Y0bd";
      int int0 = 655;
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.setJdbcUrl(string0);
      hikariConfig0.setCatalog(string0);
      long long0 = (-4370L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 48L;
      hikariDataSource0.setMaxLifetime(long0);
      HikariPool hikariPool0 = null;
      int int0 = 405;
      hikariDataSource0.setLoginTimeout(int0);
      hikariDataSource0.pool = hikariPool0;
      String string0 = hikariDataSource0.getCatalog();
      hikariDataSource0.setTransactionIsolation(string0);
      String string1 = "_2Ydvu6s5\")$?";
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      int int1 = 0;
      hikariDataSource0.setAcquireRetries(int1);
      int int2 = hikariDataSource0.getMinimumPoolSize();
      String string2 = "";
      String string3 = "\\<_*y\\t;>u3Z{-^ 17";
      hikariDataSource0.addDataSourceProperty(string2, string3);
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = hikariConfig0.getMaxLifetime();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Object object0 = new Object();
      Object object1 = properties0.put(object0, hikariConfig0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string0 = "?`dFjf2c@]>IY!";
      Object object2 = properties0.clone();
      hikariConfig0.setConnectionCustomizerClassName(string0);
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "javassist.bytecode.stackmap.MapMaker";
      hikariConfig0.setConnectionInitSql(string0);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      int int0 = 1;
      hikariConfig0.setMinimumPoolSize(int0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "D_Jrmbu$c?Y]";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'D_Jrmbu$c?Y]' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "8Wo=:<`W2mO&?&k";
      String string1 = "";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 2183L;
      hikariConfig0.setIdleTimeout(long0);
      int int0 = 3271;
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setConnectionTimeout(int0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getAcquireRetries();
      String string0 = "-bsq";
      hikariDataSource0.setPoolName(string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "javassist.bytecode.SignatureAttribute";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Exception copying HikariConfig state: ";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      long long0 = (-807L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = hikariDataSource0.getJdbcUrl();
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      boolean boolean0 = false;
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      boolean boolean1 = hikariConfig0.isReadOnly();
      String string1 = hikariConfig0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = hikariConfig0.getConnectionTimeout();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      String string1 = "Invalid transaction isolation value: ";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      String string2 = hikariConfig0.getDataSourceClassName();
      long long0 = 78L;
      hikariConfig0.setIdleTimeout(long0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariDataSource0.isJdbc4ConnectionTest();
      String string0 = ".CallableStatementJavassistProxy($$);}";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = hikariConfig0.getMaximumPoolSize();
      String string0 = "";
      hikariConfig0.addDataSourceProperty(string0, properties0);
      long long0 = hikariConfig0.getIdleTimeout();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Object object0 = properties0.put(hikariDataSource0, string0);
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      String string1 = hikariConfig0.getDataSourceClassName();
      hikariConfig0.setMaximumPoolSize(int0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 3800L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      String string0 = "";
      hikariDataSource0.setConnectionInitSql(string0);
      int int0 = 0;
      hikariDataSource0.setMaximumPoolSize(int0);
      boolean boolean1 = hikariDataSource0.isJdbc4ConnectionTest();
      String string1 = hikariDataSource0.getDataSourceClassName();
      int int1 = 0;
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireIncrement(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      String string0 = hikariConfig0.getJdbcUrl();
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string0 = "javassist.bytecode.SignatureAttribute$ArrayType";
      hikariConfig0.setTransactionIsolation(string0);
      hikariConfig0.setDataSourceProperties(properties0);
      long long0 = hikariConfig0.getConnectionTimeout();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      long long0 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      hikariConfig0.setAcquireRetryDelay(long0);
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      int int0 = 170;
      hikariConfig1.setAcquireRetries(int0);
      long long1 = 0L;
      hikariConfig1.setMaxLifetime(long1);
      hikariConfig1.setAcquireIncrement(int0);
      String string0 = hikariConfig1.getPoolName();
      long long2 = hikariConfig0.getConnectionTimeout();
      boolean boolean2 = true;
      hikariConfig1.setIsolateInternalQueries(boolean2);
      int int1 = 926;
      hikariConfig0.setMaximumPoolSize(int1);
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setPoolName(string0);
      hikariConfig1.setAcquireRetries(int1);
      long long3 = hikariConfig1.getLeakDetectionThreshold();
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "c~s8a7";
      hikariConfig0.setJdbcUrl(string0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL c~s8a7
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "G";
      hikariConfig0.setConnectionTestQuery(string0);
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      String string2 = hikariConfig0.getDataSourceClassName();
      long long0 = (-1164L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-1592L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      DataSource dataSource0 = hikariConfig0.getDataSource();
      int int0 = (-2163);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      int int0 = 3;
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = properties0.put(object0, object1);
      hikariConfig0.setDataSourceProperties(properties0);
      String string0 = "cannot defrost ";
      String string1 = "Bqz2%a:oj~'/*";
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setPoolName(string0);
      String string2 = "3,@2p;";
      hikariConfig0.setCatalog(string2);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariConfig0.setAcquireRetries(int0);
      String string3 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string3, string3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariConfig hikariConfig1 = null;
      int int0 = 198;
      hikariConfig0.setMinimumPoolSize(int0);
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Object object0 = properties0.put(hikariDataSource0, hikariDataSource0);
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setCom.zaxxer.hikari.HikariDataSource@0000000001
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      long long0 = (-2683L);
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      String string0 = null;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        properties0.putIfAbsent(string0, object1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = hikariConfig0.getTransactionIsolation();
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "javassist.bytecode.CodeAttribute$LdcEntry";
      boolean boolean0 = false;
      int int0 = 1456;
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      hikariConfig0.setJdbcUrl(string0);
      String string1 = hikariConfig0.getJdbcUrl();
      int int1 = hikariConfig0.getMinimumPoolSize();
      int int2 = (-2432);
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'javassist.bytecode.CodeAttribute$LdcEntry' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      Properties properties0 = new Properties();
      String string0 = "";
      Object object0 = new Object();
      Object object1 = properties0.put(string0, object0);
      Object object2 = properties0.put(string0, hikariConfig0);
      Object object3 = new Object();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.copyState(hikariDataSource0);
      Object object4 = properties0.put(object3, object3);
      hikariConfig0.setDataSourceProperties(properties0);
      hikariConfig0.setTransactionIsolation(string0);
      String string1 = "'*N";
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      hikariConfig0.setJdbcUrl(string1);
      int int0 = (-51);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "o-cbX3)V?h";
      hikariDataSource0.setTransactionIsolation(string0);
      String string1 = hikariDataSource0.getConnectionCustomizerClassName();
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "~";
      hikariConfig0.setTransactionIsolation(string0);
      int int0 = (-129);
      Object object0 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object0);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 1112L;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.copyState(hikariDataSource0);
      hikariConfig0.setAcquireRetryDelay(long0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      boolean boolean0 = false;
      hikariDataSource1.setUseInstrumentation(boolean0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "Error loading properties file";
      String string1 = ".:nx(|8't(=oK@@'";
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-4985);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "xBKSxy%$IT)1*da>h";
      boolean boolean0 = false;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      String string1 = null;
      int int0 = hikariDataSource0.getAcquireIncrement();
      hikariDataSource0.setPoolName(string1);
      try { 
        hikariDataSource0.getParentLogger();
      } catch(SQLFeatureNotSupportedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 3222L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "";
      String string1 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      HikariConfig hikariConfig1 = new HikariConfig();
      String string2 = hikariConfig1.getConnectionTestQuery();
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.setCatalog(string0);
      long long1 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean0 = hikariConfig0.isAutoCommit();
      String string3 = hikariConfig0.getConnectionInitSql();
      String string4 = hikariConfig0.getJdbcUrl();
      long long2 = hikariConfig0.getAcquireRetryDelay();
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      boolean boolean0 = false;
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Properties properties0 = new Properties();
      Enumeration<?> enumeration0 = properties0.propertyNames();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "5NO:K&";
      String string1 = null;
      hikariConfig0.setDataSourceClassName(string0);
      int int0 = 5;
      String string2 = "<PIpQ";
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 5NO:K&
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("HdCQl/1n5u[");
      String string0 = "M]a,-{pt";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      String string1 = "HdCQl/1n5u[";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Enumeration<Object> enumeration0 = properties0.elements();
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      Enumeration<Object> enumeration1 = properties0.elements();
      long long0 = (-2079L);
      hikariConfig0.validate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        properties0.load((InputStream) bufferedInputStream0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig();
      Enumeration<Object> enumeration0 = properties0.keys();
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      long long0 = (-364L);
      hikariConfig0.setIdleTimeout(long0);
      Enumeration<Object> enumeration1 = properties0.elements();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      hikariConfig0.setInitializationFailFast(boolean1);
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      Object object0 = new Object();
      int int0 = 5012;
      Integer integer0 = new Integer(int0);
      Object object1 = properties0.put(object0, integer0);
      hikariConfig0.copyState(hikariConfig1);
      long long0 = 100L;
      int int1 = 2645;
      hikariConfig1.setMaximumPoolSize(int1);
      hikariConfig1.setConnectionTimeout(long0);
      long long1 = 1435L;
      hikariConfig1.setConnectionTimeout(long1);
      hikariConfig1.copyState(hikariConfig0);
      int int2 = 2536;
      hikariConfig0.setAcquireRetries(int2);
      boolean boolean3 = true;
      hikariConfig1.setJdbc4ConnectionTest(boolean3);
      hikariConfig1.setConnectionTimeout(long1);
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setConnectionTimeout(long1);
      boolean boolean4 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean4);
      hikariConfig0.setConnectionTimeout(int1);
      long long2 = 899L;
      hikariConfig0.setConnectionTimeout(long2);
      String string0 = "x9MzF<X*`lJOX5~c";
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'x9MzF<X*`lJOX5~c' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
