/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:39:09 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 0;
      hikariConfig0.setIdleTimeout(int0);
      Object object0 = new Object();
      Object object1 = properties0.put(object0, hikariConfig0);
      String string0 = "StringBuffer";
      hikariConfig0.setConnectionTestQuery(string0);
      hikariConfig0.setMinimumPoolSize(int0);
      boolean boolean0 = false;
      Object object2 = new Object();
      hikariConfig0.setConnectionInitSql(string0);
      Object object3 = properties0.put(hikariConfig0, object2);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.setAutoCommit(boolean0);
      String string1 = hikariConfig0.getDataSourceClassName();
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setConnectionTimeout(int0);
      String string2 = "gy=U~\"";
      hikariConfig0.setAcquireRetries(int0);
      long long0 = (-16L);
      Object object4 = properties0.put(object0, string0);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = hikariConfig0.getMaxLifetime();
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      String string0 = "j9QNZq95|$G1=;";
      hikariConfig0.setDataSourceClassName(string0);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      Properties properties0 = new Properties();
      HashMap<HikariConfig, Object> hashMap0 = new HashMap<HikariConfig, Object>();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      hikariConfig0.validate();
      long long1 = 3505L;
      hikariConfig0.setConnectionTimeout(long1);
      properties0.putAll(hashMap0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: j9QNZq95|$G1=;
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "XL+x}M";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      int int0 = 1322;
      hikariDataSource0.setAcquireRetries(int0);
      hikariConfig0.setMaximumPoolSize(int0);
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      hikariConfig0.copyState(hikariDataSource0);
      String string2 = "NJ5'*1rSgR$o ,ib+";
      hikariDataSource0.setAcquireIncrement(int0);
      hikariDataSource0.setConnectionTimeout(int0);
      String string3 = "Exception copying HikariConfig state: ";
      hikariConfig0.setPoolName(string3);
      hikariDataSource0.setConnectionTestQuery(string2);
      hikariConfig0.setDataSource(hikariDataSource0);
      long long0 = hikariConfig0.getIdleTimeout();
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      hikariConfig0.setDataSource(hikariDataSource0);
      boolean boolean1 = true;
      hikariDataSource0.setInitializationFailFast(boolean1);
      String string4 = hikariConfig0.getDataSourceClassName();
      String string5 = "[n";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string5);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '[n' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      long long0 = (-2646L);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long1 = 775L;
      hikariConfig0.setAcquireRetryDelay(long1);
      hikariConfig0.copyState(hikariDataSource0);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      String string1 = "4$*Zw";
      hikariConfig0.setTransactionIsolation(string1);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      String string0 = "";
      Object object1 = properties0.put(object0, string0);
      Object object2 = properties0.put(object0, string0);
      HikariConfig hikariConfig0 = new HikariConfig();
      String string1 = null;
      hikariConfig0.setConnectionInitSql(string1);
      long long0 = (-2066L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      long long0 = (-823L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "XX[DAX@F$02";
      hikariConfig0.setJdbcUrl(string0);
      String string1 = null;
      hikariConfig0.setDataSourceClassName(string1);
      boolean boolean1 = true;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = hikariConfig0.getTransactionIsolation();
      hikariConfig0.setIdleTimeout(long0);
      String string2 = "SO`wb9_7*zTT,iLrJ5l";
      hikariConfig0.setCatalog(string2);
      int int1 = hikariConfig0.getAcquireRetries();
      boolean boolean2 = hikariConfig0.isAutoCommit();
      int int2 = hikariConfig0.getMinimumPoolSize();
      boolean boolean3 = hikariConfig0.isIsolateInternalQueries();
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      String string4 = hikariConfig0.getCatalog();
      boolean boolean4 = hikariConfig0.isJdbc4ConnectionTest();
      hikariConfig0.setDataSourceProperties(properties0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string5 = "bad bytecode. fatal?";
      hikariDataSource0.setConnectionInitSql(string5);
      hikariConfig0.setDataSource(hikariDataSource0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL XX[DAX@F$02
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setCatalog(string0);
      long long0 = hikariConfig0.getConnectionTimeout();
      HikariConfig hikariConfig1 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig1.setReadOnly(boolean0);
      long long1 = 1720L;
      hikariConfig1.setMaxLifetime(long1);
      hikariConfig1.setLeakDetectionThreshold(long0);
      hikariConfig0.addDataSourceProperty(string0, hikariConfig1);
      // Undeclared exception!
      try { 
        hikariConfig1.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "H=*7(";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariDataSource0.setAutoCommit(boolean0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      HikariDataSource hikariDataSource2 = new HikariDataSource(hikariDataSource0);
      String string1 = null;
      boolean boolean1 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean1);
      hikariDataSource2.setJdbcUrl(string1);
      String string2 = hikariDataSource2.toString();
      long long0 = (-2591L);
      // Undeclared exception!
      try { 
        hikariDataSource2.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.copyState(hikariDataSource1);
      String string0 = "Z!#He:QGS0U5K";
      hikariDataSource1.setConnectionInitSql(string0);
      Properties properties0 = hikariDataSource1.getDataSourceProperties();
      String string1 = hikariDataSource1.getPoolName();
      String string2 = hikariDataSource1.getDataSourceClassName();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      hikariDataSource1.copyState(hikariConfig0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = null;
      hikariConfig0.setCatalog(string0);
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      String string1 = "intValue";
      hikariConfig0.setConnectionInitSql(string1);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      String string2 = hikariConfig0.getConnectionTestQuery();
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      String string3 = hikariConfig0.getJdbcUrl();
      int int0 = (-1489);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ")_4=n =Zd";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      long long0 = hikariConfig0.getMaxLifetime();
      boolean boolean2 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte)25;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-127);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-37);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-24);
      byteArray0[5] = byte5;
      boolean boolean3 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      hikariConfig0.setAutoCommit(boolean2);
      String string1 = "j9QNZq95|$G1=;";
      hikariConfig0.setDataSourceClassName(string1);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = null;
      hikariConfig0.setDataSourceClassName(string0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.remove(object0);
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "A";
      Object object0 = properties0.put(hikariConfig0, string0);
      int int0 = 339;
      hikariConfig0.setAcquireIncrement(int0);
      Object object1 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object1);
      int int1 = hikariConfig0.getMaximumPoolSize();
      int int2 = hikariConfig0.getMaximumPoolSize();
      String string1 = "J.VS";
      hikariConfig0.setConnectionInitSql(string1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      String string0 = hikariConfig0.getJdbcUrl();
      int int1 = 0;
      hikariConfig0.setAcquireRetries(int1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      boolean boolean0 = false;
      hikariDataSource0.setUseInstrumentation(boolean0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName";
      hikariConfig0.setDataSourceClassName(string0);
      String string1 = "";
      String string2 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      hikariConfig0.setConnectionTestQuery(string1);
      String string3 = hikariConfig0.getDataSourceClassName();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 750L;
      hikariDataSource0.setConnectionTimeout(long0);
      String string0 = "";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      hikariDataSource0.setDataSourceClassName(string0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      long long0 = 8L;
      hikariDataSource1.setLeakDetectionThreshold(long0);
      String string1 = "J\\G`kSaM.vwhXPm'7m";
      boolean boolean0 = true;
      hikariDataSource1.setJdbc4ConnectionTest(boolean0);
      hikariDataSource1.setPoolName(string1);
      hikariDataSource0.setDataSource(hikariDataSource1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "XL+x}M";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      int int0 = 1322;
      hikariDataSource0.setAcquireRetries(int0);
      hikariConfig0.setMaximumPoolSize(int0);
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      hikariConfig0.copyState(hikariDataSource0);
      String string2 = "NJ5'*1rSgR$o ,ib+";
      hikariDataSource0.setAcquireIncrement(int0);
      hikariDataSource0.setConnectionTimeout(int0);
      String string3 = "Exception copying HikariConfig state: ";
      hikariConfig0.setPoolName(string3);
      hikariDataSource0.setConnectionTestQuery(string2);
      hikariConfig0.setDataSource(hikariDataSource0);
      long long0 = hikariConfig0.getIdleTimeout();
      long long1 = hikariDataSource0.getAcquireRetryDelay();
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      boolean boolean0 = true;
      hikariDataSource0.setInitializationFailFast(boolean0);
      String string4 = hikariConfig0.getDataSourceClassName();
      String string5 = "[n";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string5);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '[n' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "uvxBq]p&|z.";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "TYPE";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = hikariConfig0.getMinimumPoolSize();
      Object object0 = null;
      // Undeclared exception!
      try { 
        properties0.put(object0, hikariConfig0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = null;
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      hikariDataSource0.setTransactionIsolation(string0);
      long long0 = 2711L;
      hikariDataSource0.setMaxLifetime(long0);
      boolean boolean0 = hikariDataSource0.isInitializationFailFast();
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-1594);
      String string0 = "fFNep51[q4reRT9HS7n";
      hikariConfig0.setConnectionTestQuery(string0);
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "";
      Object object2 = properties0.put(object0, string0);
      Object object3 = properties0.put(object0, object1);
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.Object@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariDataSource0.isAutoCommit();
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 34;
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      Properties properties0 = new Properties();
      hikariConfig0.setDataSourceProperties(properties0);
      hikariConfig0.setAcquireRetries(int0);
      boolean boolean1 = false;
      hikariConfig0.setReadOnly(boolean1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setPoolName(string0);
      int int0 = hikariConfig0.getMaximumPoolSize();
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      String string0 = "o%AQ-{#<O%eF#zu";
      hikariConfig0.setJdbcUrl(string0);
      hikariConfig0.setLeakDetectionThreshold(long0);
      int int0 = (-1066);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      boolean boolean1 = true;
      String string0 = "maxLifetime cannot be negative.";
      hikariConfig0.setJdbcUrl(string0);
      hikariConfig0.setReadOnly(boolean1);
      int int0 = hikariConfig0.getMaximumPoolSize();
      String string1 = "acquireRetryDelay cannot be negative";
      hikariConfig0.setJdbcUrl(string1);
      int int1 = hikariConfig0.getAcquireRetries();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      long long0 = (-823L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "XX[DAX@F$02";
      hikariConfig0.setJdbcUrl(string0);
      String string1 = null;
      hikariConfig0.setDataSourceClassName(string1);
      boolean boolean1 = true;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = hikariConfig0.getAcquireRetries();
      hikariConfig0.setIdleTimeout(long0);
      String string2 = "SO`wb9_7*zTT,iLrJ5l";
      hikariConfig0.setCatalog(string2);
      int int1 = hikariConfig0.getAcquireRetries();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL XX[DAX@F$02
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = hikariDataSource0.getLeakDetectionThreshold();
      String string0 = hikariDataSource0.getConnectionTestQuery();
      HikariPool hikariPool0 = null;
      try {
        hikariPool0 = new HikariPool(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = hikariConfig0.getMaxLifetime();
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      String string0 = "j9QNZq95|$G1=;";
      hikariConfig0.setDataSourceClassName(string0);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      Properties properties0 = new Properties();
      HashMap<HikariConfig, Object> hashMap0 = new HashMap<HikariConfig, Object>();
      properties0.putAll(hashMap0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: j9QNZq95|$G1=;
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-1569L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      int int0 = 4310;
      hikariConfig0.setAcquireIncrement(int0);
      String string0 = "YO'}uv&cm";
      int int1 = (-1);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int1);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      String string1 = ">V(Oa],,c";
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariConfig0.setConnectionCustomizerClassName(string1);
      String string2 = hikariConfig0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      hikariDataSource0.setConnectionInitSql(string0);
      String string1 = "--9*mM7^w_[pU\\5Ks";
      boolean boolean0 = true;
      String string2 = "FfQ+%Yd'L9^{P";
      hikariDataSource0.setConnectionTestQuery(string2);
      long long0 = (-3255L);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      long long0 = hikariConfig0.getIdleTimeout();
      hikariConfig0.setLeakDetectionThreshold(long0);
      boolean boolean2 = false;
      hikariConfig0.setReadOnly(boolean2);
      int int0 = (-2503);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-730L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      String string0 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      hikariDataSource0.setPoolName(string0);
      long long1 = hikariDataSource0.getConnectionTimeout();
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      hikariDataSource0.setDataSourceClassName(string0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      long long0 = 100L;
      hikariConfig0.setAcquireRetryDelay(long0);
      hikariConfig0.setReadOnly(boolean0);
      long long1 = (-1L);
      hikariConfig0.setMaxLifetime(long1);
      long long2 = (-383L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long2);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "javassist.bytecode.ByteArray";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = "connectionCustomizationClass specified class '";
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setCatalog(string0);
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      String string2 = hikariConfig0.getCatalog();
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "c?+%";
      int int0 = 2614;
      String string1 = "4$*Zw";
      hikariConfig0.setTransactionIsolation(string1);
      hikariConfig0.setMaximumPoolSize(int0);
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = ">>";
      hikariConfig0.setCatalog(string0);
      hikariConfig0.setConnectionTestQuery(string0);
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      boolean boolean1 = hikariConfig0.isAutoCommit();
      int int0 = 1271;
      hikariConfig0.setMaximumPoolSize(int0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      String string1 = hikariConfig0.getPoolName();
      int int1 = hikariConfig0.getTransactionIsolation();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      String string2 = hikariConfig0.getDataSourceClassName();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      long long0 = (-567L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = hikariConfig0.getMaxLifetime();
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = ",r@)ElemdOxf\"L4Z";
      long long1 = (-861L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "acquireRetries cannot be less than 1";
      Properties properties0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "volatile";
      hikariDataSource0.setDataSourceClassName(string0);
      long long0 = (-1397L);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource1.setConnectionInitSql(string0);
      long long1 = 0L;
      hikariDataSource1.setConnectionTimeout(long1);
      long long2 = 48L;
      hikariDataSource0.setLeakDetectionThreshold(long2);
      hikariDataSource1.setLeakDetectionThreshold(long0);
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource0.setMaxLifetime(long0);
      String string1 = hikariDataSource0.getConnectionCustomizerClassName();
      hikariDataSource1.setDataSource(hikariDataSource0);
      int int0 = hikariDataSource1.getMaximumPoolSize();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireIncrement(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-2577L);
      int int0 = 363;
      hikariConfig0.setMinimumPoolSize(int0);
      hikariConfig0.setIdleTimeout(long0);
      String string0 = null;
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.setMaxLifetime(long0);
      long long1 = (-562L);
      hikariConfig0.setIdleTimeout(long1);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      String string0 = "Really, a JDBC URL?  It's time to party like it's 1999!";
      hikariConfig0.setConnectionTestQuery(string0);
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      boolean boolean0 = true;
      String string1 = "}s4e";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int2 = 1935;
      hikariDataSource0.setAcquireIncrement(int2);
      hikariConfig0.copyState(hikariDataSource0);
      hikariConfig0.setConnectionInitSql(string1);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      String string2 = "InH$Q44";
      hikariConfig0.setDataSourceClassName(string2);
      String string3 = "Sxx ~JA";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string3);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'Sxx ~JA' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = hikariConfig0.getAcquireIncrement();
      String string0 = "{{GX3b_CIuy\"p&";
      int int1 = 4076;
      hikariConfig0.setLeakDetectionThreshold(int1);
      hikariConfig0.setAcquireRetries(int1);
      long long1 = (-2074L);
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.setMinimumPoolSize(int1);
      hikariConfig0.setLeakDetectionThreshold(long1);
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '{{GX3b_CIuy\"p&' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      boolean boolean1 = false;
      String string0 = " RBF1D#{wN%Uo$I+Y";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      long long0 = 0L;
      hikariDataSource0.setMaxLifetime(long0);
      hikariDataSource0.setRegisterMbeans(boolean1);
      String string1 = hikariDataSource0.getConnectionInitSql();
      long long1 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long1);
      String string2 = "Exception copying HikariConfig state: ";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'Exception copying HikariConfig state: ' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      OutputStream outputStream0 = null;
      char char0 = 'I';
      int int0 = (-168);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      Properties properties1 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties1);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig1);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2614;
      String string1 = "4$*Zw";
      hikariConfig0.setTransactionIsolation(string1);
      hikariConfig0.setMaximumPoolSize(int0);
      boolean boolean1 = hikariConfig0.isReadOnly();
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = hikariConfig0.getAcquireIncrement();
      int int1 = 4076;
      hikariConfig0.setLeakDetectionThreshold(int1);
      hikariConfig0.setAcquireRetries(int1);
      long long0 = (-2074L);
      hikariConfig0.setMinimumPoolSize(int1);
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "f`HZ:iM%6M?";
      hikariConfig0.setPoolName(string0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      String string2 = "aUP}F@[h3.\\z";
      hikariConfig0.setJdbcUrl(string2);
      String string3 = "java.lang.Short";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string3);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'java.lang.Short' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.validate();
      hikariConfig0.setConnectionCustomizerClassName(string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 2147483647L;
      hikariDataSource0.setConnectionTimeout(long0);
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Xfz$#u!@U/)3(#");
      String string0 = "driverClassName specified class '";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      String string1 = "+Xfz$#u!@U/)3(#";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hikariDataSource0.setDataSourceClassName(string0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      long long0 = 8L;
      hikariDataSource1.setLeakDetectionThreshold(long0);
      String string1 = "J\\G`kSaM.vwhXPm'7m";
      boolean boolean0 = true;
      hikariDataSource1.setJdbc4ConnectionTest(boolean0);
      hikariDataSource1.setPoolName(string1);
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource0.validate();
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      long long0 = (-823L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = null;
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean1 = true;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      int int0 = hikariConfig0.getTransactionIsolation();
      hikariConfig0.setIdleTimeout(long0);
      String string1 = "SO`wb9_7*zTT,iLrJ5l";
      int int1 = hikariConfig0.getAcquireRetries();
      boolean boolean2 = hikariConfig0.isAutoCommit();
      int int2 = hikariConfig0.getMinimumPoolSize();
      boolean boolean3 = hikariConfig0.isIsolateInternalQueries();
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      String string3 = hikariConfig0.getCatalog();
      boolean boolean4 = hikariConfig0.isJdbc4ConnectionTest();
      hikariConfig0.setDataSourceProperties(properties0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string4 = "bad bytecode. fatal?";
      hikariDataSource0.setConnectionInitSql(string4);
      hikariConfig0.setDataSource(hikariDataSource0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
