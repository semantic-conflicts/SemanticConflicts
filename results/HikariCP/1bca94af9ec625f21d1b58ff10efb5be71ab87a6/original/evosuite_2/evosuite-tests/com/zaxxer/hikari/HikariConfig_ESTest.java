/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:23:47 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "8?+ZTo!RtQ,";
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      hikariDataSource0.setConnectionTestQuery(string0);
      long long0 = 0L;
      hikariDataSource0.setMaxLifetime(long0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.copyState(hikariDataSource1);
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource1.setMaxLifetime(long0);
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      String string1 = hikariDataSource1.getJdbcUrl();
      int int0 = hikariDataSource1.getTransactionIsolation();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "acquireRetries cannot be negative";
      long long0 = 0L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      int int0 = 0;
      hikariDataSource0.setMinimumPoolSize(int0);
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      int int1 = (-1247);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int1);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 0;
      hikariDataSource0.setMinimumPoolSize(int0);
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      int int1 = 43;
      hikariDataSource0.setAcquireIncrement(int1);
      boolean boolean0 = false;
      hikariDataSource0.setUseInstrumentation(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 646;
      String string0 = "maxPoolSize cannot be negative";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      long long0 = (-2639L);
      int int0 = (-1141);
      boolean boolean0 = true;
      int int1 = 0;
      String string0 = null;
      String string1 = "#D";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-125);
      byteArray0[1] = byte1;
      byte byte2 = (byte)127;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-103);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setConnectionTestQuery(string0);
      long long0 = 0L;
      hikariConfig0.copyState(hikariConfig0);
      boolean boolean0 = false;
      hikariConfig0.copyState(hikariConfig0);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setRegisterMbeans(boolean0);
      int int0 = hikariConfig0.getAcquireRetries();
      String string1 = hikariConfig0.getConnectionInitSql();
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      String string2 = hikariConfig0.getJdbcUrl();
      boolean boolean2 = hikariConfig0.isAutoCommit();
      String string3 = "minPoolSize cannot be negative";
      hikariConfig0.setIsolateInternalQueries(boolean2);
      hikariConfig0.setDataSourceClassName(string3);
      long long1 = (-1988L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      int int0 = 881;
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.setAutoCommit(boolean0);
      String string0 = "pos=";
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = hikariConfig0.getPoolName();
      String string2 = hikariConfig0.getPoolName();
      long long0 = hikariConfig0.getIdleTimeout();
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      hikariConfig0.setConnectionCustomizerClassName(string2);
      int int1 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      Enumeration<Object> enumeration0 = properties0.elements();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      hikariConfig0.setJdbcUrl(string0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL 
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      Properties properties0 = new Properties();
      hikariConfig0.setDataSourceProperties(properties0);
      hikariConfig0.setInitializationFailFast(boolean0);
      HikariConfig hikariConfig1 = new HikariConfig();
      long long0 = 0L;
      hikariConfig1.setConnectionTimeout(long0);
      long long1 = (-2835L);
      // Undeclared exception!
      try { 
        hikariConfig1.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "lHat";
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = 814L;
      hikariConfig0.setAcquireRetryDelay(long0);
      Object object0 = new Object();
      int int0 = 339;
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.addDataSourceProperty(string0, object0);
      boolean boolean1 = true;
      String string1 = "#j_a";
      hikariConfig0.setTransactionIsolation(string1);
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      long long1 = hikariConfig0.getIdleTimeout();
      boolean boolean2 = hikariConfig0.isRegisterMbeans();
      hikariConfig0.setConnectionTimeout(long1);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      long long2 = hikariConfig0.getConnectionTimeout();
      IConnectionCustomizer iConnectionCustomizer1 = hikariConfig0.getConnectionCustomizer();
      int int1 = 2705;
      hikariConfig0.setAcquireRetries(int1);
      boolean boolean3 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean3);
      int int2 = hikariConfig0.getAcquireRetries();
      boolean boolean4 = hikariConfig0.isAutoCommit();
      hikariConfig0.setPoolName(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariConfig hikariConfig1 = new HikariConfig();
      String string0 = "";
      int int0 = 2142933894;
      hikariConfig1.setMinimumPoolSize(int0);
      hikariConfig1.setConnectionTestQuery(string0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1555L);
      hikariDataSource0.setMaxLifetime(long0);
      hikariConfig0.setDataSource(hikariDataSource0);
      int int1 = 2144184901;
      Integer integer0 = new Integer(int1);
      hikariConfig0.addDataSourceProperty(string0, integer0);
      hikariConfig0.copyState(hikariConfig1);
      HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
      String string1 = "E$M~`#imvn!u";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string1, string0);
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 16L;
      hikariConfig0.setMaxLifetime(long0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "driverClassName specified class '";
      hikariConfig0.setConnectionInitSql(string0);
      int int0 = hikariConfig0.getAcquireRetries();
      String string1 = "InvokeDynamic #";
      hikariConfig0.setConnectionInitSql(string1);
      hikariConfig0.setAcquireIncrement(int0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "nc+J}k)7De+lzEd/^4T";
      hikariConfig0.setPoolName(string0);
      String string1 = "C";
      hikariConfig0.setJdbcUrl(string1);
      hikariConfig0.setTransactionIsolation(string1);
      boolean boolean0 = hikariConfig0.isAutoCommit();
      hikariConfig0.setDataSourceClassName(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      String string0 = hikariConfig0.getCatalog();
      long long0 = hikariConfig0.getMaxLifetime();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string0, object0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 1229;
      hikariConfig0.setAcquireRetries(int0);
      long long0 = (-1140L);
      hikariConfig0.setMaxLifetime(long0);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      String string0 = "";
      hikariConfig0.setJdbcUrl(string0);
      String string1 = hikariConfig0.getJdbcUrl();
      long long1 = hikariConfig0.getMaxLifetime();
      int int1 = 412;
      hikariConfig0.setAcquireIncrement(int1);
      int int2 = hikariConfig0.getTransactionIsolation();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL 
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      String string0 = hikariDataSource0.getDataSourceClassName();
      int int0 = hikariDataSource0.getAcquireIncrement();
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      long long0 = hikariDataSource0.getMaxLifetime();
      String string1 = hikariDataSource0.getConnectionInitSql();
      hikariDataSource0.setJdbcUrl(string0);
      long long1 = (-3336L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long1);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "9^(\"T";
      hikariDataSource0.setCatalog(string0);
      long long0 = (-344L);
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      hikariDataSource0.setMaxLifetime(long0);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      hikariConfig0.setTransactionIsolation(string0);
      boolean boolean1 = hikariConfig0.isReadOnly();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = hikariConfig0.getLeakDetectionThreshold();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string0 = hikariDataSource0.getConnectionInitSql();
      int int0 = hikariDataSource0.getMinimumPoolSize();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = hikariDataSource0.getConnectionInitSql();
      int int0 = 1124;
      hikariDataSource0.setMaximumPoolSize(int0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Object object0 = properties0.put(hikariConfig0, hikariDataSource0);
      int int0 = 151;
      hikariConfig0.setMaximumPoolSize(int0);
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      hikariConfig0.setAcquireRetries(int0);
      boolean boolean0 = false;
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource1.setCatalog(string0);
      hikariConfig0.copyState(hikariDataSource1);
      Object object1 = new Object();
      Object object2 = properties0.put(object1, hikariConfig0);
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.setTransactionIsolation(string0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string0 = "6&(8dnQ[";
      hikariConfig0.setPoolName(string0);
      boolean boolean1 = true;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      hikariConfig0.setCatalog(string0);
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
      int int0 = (-670);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariPool hikariPool0 = hikariDataSource0.fastPathPool;
      long long0 = 2450L;
      hikariDataSource0.setIdleTimeout(long0);
      // Undeclared exception!
      try { 
        hikariDataSource0.shutdown();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Set<Object> set0 = properties0.keySet();
      String string0 = "";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 60;
      hikariConfig0.setMinimumPoolSize(int0);
      String string0 = "wHxt";
      hikariConfig0.setJdbcUrl(string0);
      boolean boolean0 = false;
      hikariConfig0.setUseInstrumentation(boolean0);
      int int1 = hikariConfig0.getMaximumPoolSize();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "ccxPz-f1";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      String string0 = "jd/I!s@#n !";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      boolean boolean1 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      String string1 = "vA";
      int int0 = (-1765);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "No connection wait timeout is set, this might cause an infinite wait.";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'No connection wait timeout is set, this might cause an infinite wait.' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 1L;
      hikariConfig0.setMaxLifetime(long0);
      String string0 = null;
      hikariConfig0.setConnectionInitSql(string0);
      String string1 = ")ppT6`?6c%4&";
      hikariConfig0.setPoolName(string1);
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      HikariConfig hikariConfig2 = null;
      try {
        hikariConfig2 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "$=BfXyU#U,Q6]+Agqa";
      hikariConfig0.setCatalog(string0);
      int int0 = (-753);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "C";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = hikariConfig0.getConnectionInitSql();
      int int0 = 1;
      hikariConfig0.setConnectionTestQuery(string0);
      hikariConfig0.setMaximumPoolSize(int0);
      int int1 = (-1085);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      int int0 = 0;
      hikariConfig1.setAcquireRetries(int0);
      Object object0 = new Object();
      Object object1 = properties0.put(hikariConfig1, object0);
      hikariConfig0.setConnectionTestQuery(string0);
      String string1 = hikariConfig0.getConnectionTestQuery();
      int int1 = hikariConfig1.getAcquireRetries();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      String string0 = ">+KGFEnt*Nl";
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      String string1 = "";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.copyState(hikariDataSource0);
      hikariConfig0.setConnectionCustomizerClassName(string1);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      String string2 = "2D|px";
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(string2);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Ii)2P{lGY?";
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      long long0 = 10L;
      hikariConfig0.setMaxLifetime(long0);
      boolean boolean0 = hikariConfig0.isAutoCommit();
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      hikariConfig0.copyState(hikariConfig1);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      String string0 = hikariConfig0.getPoolName();
      String string1 = "";
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setConnectionTestQuery(string0);
      HikariConfig hikariConfig1 = null;
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "Unexpected exception";
      hikariConfig0.setConnectionTestQuery(string0);
      String string1 = null;
      hikariConfig0.setCatalog(string1);
      int int0 = 60;
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string1, object0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = properties0.remove((Object) hikariConfig0, (Object) hikariConfig0);
      String string0 = "javassist.CtClass$1";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = properties0.put(object0, object1);
      int int0 = 60;
      hikariConfig0.setAcquireIncrement(int0);
      String string1 = "32";
      hikariConfig0.setDataSourceClassName(string1);
      Object object3 = new Object();
      Object object4 = properties0.getOrDefault(object3, object3);
      hikariConfig0.setConnectionInitSql(string0);
      String string2 = "Really, a JDBC URL?  It's time to party like it's 1999!";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean1 = false;
      hikariConfig0.setAutoCommit(boolean1);
      String string3 = hikariConfig0.getDataSourceClassName();
      String string4 = hikariConfig0.getCatalog();
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      hikariConfig0.setAcquireRetryDelay(long0);
      String string5 = hikariConfig0.getJdbcUrl();
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long1);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setMaxLifetime(long0);
      String string0 = "connectionCustomizationClass specified class '";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      hikariConfig0.setConnectionTestQuery(string0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "";
      Object object0 = new Object();
      Object object1 = properties0.put(string0, object0);
      Object object2 = properties0.clone();
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      String string1 = "";
      hikariConfig0.setConnectionInitSql(string1);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: 
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 1350;
      String string0 = "pb.9S%ku";
      hikariConfig0.setCatalog(string0);
      hikariConfig0.setMinimumPoolSize(int0);
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      hikariConfig0.setDataSourceClassName(string0);
      int int1 = 445;
      hikariConfig0.setMaxLifetime(long0);
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      int int2 = 692;
      hikariConfig0.setAcquireIncrement(int2);
      hikariConfig0.setAcquireIncrement(int1);
      long long1 = (-1031L);
      hikariConfig0.setMaxLifetime(long1);
      String string1 = hikariConfig0.getJdbcUrl();
      hikariConfig0.setTransactionIsolation(string0);
      int int3 = 3;
      hikariConfig0.setMinimumPoolSize(int3);
      hikariConfig0.setAcquireRetryDelay(int1);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 3333;
      String string0 = "[C";
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAcquireRetries(int0);
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      int int0 = 343;
      hikariConfig0.setMaximumPoolSize(int0);
      int int1 = 1904;
      hikariConfig0.setAcquireIncrement(int1);
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
      String string0 = "+#]vGP`8b*;=y";
      hikariConfig0.setCatalog(string0);
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      String string1 = hikariConfig0.getPoolName();
      boolean boolean2 = hikariConfig0.isIsolateInternalQueries();
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 120000L;
      hikariConfig0.setAcquireRetryDelay(long0);
      String string0 = "com.zaxxer.hikari.HikariConfig";
      hikariConfig0.setDriverClassName(string0);
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean2, boolean0, boolean3);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariConfig hikariConfig1 = new HikariConfig();
      String string0 = "";
      int int0 = 2142933894;
      hikariConfig1.setMinimumPoolSize(int0);
      hikariConfig1.setConnectionTestQuery(string0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1555L);
      hikariDataSource0.setMaxLifetime(long0);
      hikariConfig0.setDataSource(hikariDataSource0);
      int int1 = 2144184901;
      Integer integer0 = new Integer(int1);
      long long1 = 3519L;
      hikariConfig0.setMaxLifetime(long1);
      hikariConfig0.addDataSourceProperty(string0, integer0);
      hikariConfig0.copyState(hikariConfig1);
      HikariDataSource hikariDataSource1 = new HikariDataSource(hikariConfig0);
      String string1 = "E$M~`#imvn!u";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string1, string0);
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
