/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:59:32 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.io.File;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Properties;
import java.util.function.BiFunction;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 77;
      boolean boolean0 = false;
      hikariConfig0.setInitializationFailFast(boolean0);
      int int1 = 466;
      hikariConfig0.setMinimumPoolSize(int1);
      hikariConfig0.setMinimumPoolSize(int0);
      String string0 = "one of either dataSource or dataSourceClassName must be specified";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setConnectionInitSql(string0);
      int int2 = hikariConfig0.getTransactionIsolation();
      int int3 = 10;
      hikariConfig0.setAcquireIncrement(int3);
      hikariConfig0.setAcquireRetries(int0);
      long long0 = hikariConfig0.getIdleTimeout();
      boolean boolean2 = true;
      hikariConfig0.setUseInstrumentation(boolean2);
      hikariConfig0.setPoolName(string0);
      String string1 = "Kq<!`IezpDb~Vkw` 6";
      String string2 = "KhQ1?S!A\\P0O";
      hikariConfig0.setJdbcUrl(string2);
      hikariConfig0.setDataSourceClassName(string1);
      long long1 = hikariConfig0.getAcquireRetryDelay();
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      int int4 = hikariConfig0.getAcquireIncrement();
      long long2 = 0L;
      hikariConfig0.setConnectionTimeout(long2);
      boolean boolean3 = hikariConfig0.isInitializationFailFast();
      hikariConfig0.setTransactionIsolation(string1);
      long long3 = hikariConfig0.getMaxLifetime();
      String string4 = hikariConfig0.getConnectionTestQuery();
      boolean boolean4 = hikariConfig0.isIsolateInternalQueries();
      long long4 = 0L;
      hikariConfig0.setIdleTimeout(long4);
      long long5 = 5000L;
      hikariConfig0.setConnectionTimeout(long5);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string0 = "";
      hikariDataSource0.setConnectionTestQuery(string0);
      int int0 = hikariDataSource0.getTransactionIsolation();
      long long0 = 0L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      int int1 = hikariDataSource0.getAcquireRetries();
      long long1 = 19L;
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long1);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = false;
      hikariDataSource0.setRegisterMbeans(boolean0);
      String string0 = hikariDataSource0.getDataSourceClassName();
      HikariConfig hikariConfig0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.copyState(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      Properties properties0 = new Properties();
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      hikariConfig0.setDataSourceProperties(properties0);
      int int0 = 102;
      String string0 = "u{0YdT`V3D/t[Au ";
      hikariConfig0.setJdbcUrl(string0);
      String string1 = hikariConfig0.getConnectionInitSql();
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      int int2 = hikariConfig0.getMinimumPoolSize();
      int int3 = hikariConfig0.getMaximumPoolSize();
      String string2 = "|A(\"Q1\\[O";
      hikariConfig0.setAcquireRetries(int1);
      hikariConfig0.setConnectionTestQuery(string2);
      String string3 = hikariConfig0.getDataSourceClassName();
      String string4 = hikariConfig0.getConnectionTestQuery();
      boolean boolean0 = true;
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setJdbcUrl(string4);
      String string5 = hikariConfig0.getDataSourceClassName();
      boolean boolean1 = true;
      hikariConfig0.setAcquireRetryDelay(int2);
      hikariConfig0.setJdbc4ConnectionTest(boolean1);
      String string6 = "V<PH1{*]n4e@He/[O.";
      hikariConfig0.setConnectionCustomizerClassName(string6);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      hikariConfig0.setConnectionTimeout(int0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL |A(\"Q1\\[O
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = null;
      boolean boolean0 = false;
      String string1 = "cz?nX$D2RPuuzEbE^";
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      String string2 = " B^GGy!NXsRc)Wp";
      int int0 = 578;
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAcquireIncrement(int0);
      hikariConfig0.setMaxLifetime(int0);
      hikariConfig0.setConnectionTestQuery(string0);
      hikariConfig0.setTransactionIsolation(string2);
      hikariConfig0.setConnectionInitSql(string1);
      String string3 = hikariConfig0.getJdbcUrl();
      long long0 = 672L;
      hikariConfig0.setConnectionTimeout(long0);
      long long1 = 2147483647L;
      hikariConfig0.setConnectionTimeout(long1);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = new HikariConfig();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.copyState(hikariDataSource0);
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      boolean boolean0 = true;
      int int0 = 1185;
      hikariConfig0.setMaximumPoolSize(int0);
      String string1 = "JQ7.%~,9kNvGJ";
      hikariConfig0.setConnectionInitSql(string1);
      hikariConfig0.setInitializationFailFast(boolean0);
      String string2 = hikariConfig0.getCatalog();
      long long0 = 0L;
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
      hikariConfig0.setConnectionTimeout(long0);
      String string3 = hikariConfig0.getPoolName();
      long long1 = hikariConfig0.getConnectionTimeout();
      hikariConfig0.setConnectionTimeout(long0);
      String string4 = hikariConfig0.getCatalog();
      String string5 = hikariConfig0.getConnectionCustomizerClassName();
      String string6 = hikariConfig0.getPoolName();
      hikariConfig1.copyState(hikariConfig0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "j";
      Object object0 = new Object();
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.addDataSourceProperty(string0, object0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = 160;
      hikariConfig0.setMaximumPoolSize(int0);
      boolean boolean0 = hikariConfig0.isAutoCommit();
      hikariConfig0.setReadOnly(boolean0);
      String string1 = "[D";
      long long0 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      long long1 = 0L;
      hikariConfig0.setMaxLifetime(long1);
      hikariConfig0.setReadOnly(boolean0);
      int int1 = hikariConfig0.getMaximumPoolSize();
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      String string2 = "/K%nfYNJBy6UjNT9";
      HikariConfig hikariConfig2 = new HikariConfig(properties0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = properties0.compute(hikariConfig2, biFunction0);
      hikariConfig1.setCatalog(string2);
      hikariConfig0.setConnectionTimeout(long1);
      hikariConfig0.copyState(hikariConfig1);
      long long2 = 30L;
      // Undeclared exception!
      try { 
        hikariConfig1.setConnectionTimeout(long2);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      String string0 = "hi2RYU5FZRZAl";
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean0 = false;
      hikariConfig0.validate();
      hikariConfig0.setIdleTimeout(int0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: hi2RYU5FZRZAl
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "$proceed";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-1070);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setInitializationFailFast(boolean0);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1862L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      hikariConfig0.setDataSourceProperties(properties0);
      int int0 = (-1150);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "Property file ";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      Object object0 = new Object();
      hikariConfig0.addDataSourceProperty(string0, object0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = hikariConfig0.getConnectionCustomizerClassName();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = hikariConfig0.isRegisterMbeans();
      boolean boolean1 = true;
      hikariConfig0.setReadOnly(boolean1);
      long long0 = 5000L;
      HikariConfig hikariConfig1 = new HikariConfig();
      String string0 = "Error loading properties file";
      hikariConfig1.setConnectionCustomizerClassName(string0);
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setLeakDetectionThreshold(long0);
      long long1 = hikariConfig0.getAcquireRetryDelay();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig1.setDataSource(hikariDataSource0);
      hikariConfig0.addDataSourceProperty(string0, string0);
      int int0 = 41;
      hikariConfig1.setAcquireRetries(int0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "com.zaxxer.hikari.HikariConfig";
      hikariConfig0.setCatalog(string0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "javassist.compiler.TokenId";
      hikariDataSource0.setDataSourceClassName(string0);
      boolean boolean0 = true;
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      HikariPool hikariPool0 = hikariDataSource0.pool;
      hikariDataSource0.fastPathPool = hikariPool0;
      hikariDataSource0.validate();
      String string1 = "rC oE,BeGKV";
      hikariDataSource0.setConnectionInitSql(string1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 3424L;
      hikariDataSource0.setConnectionTimeout(long0);
      String string0 = "javassist.bytecode.FieldInfo";
      String string1 = "Q!+";
      File file0 = MockFile.createTempFile(string0, string1);
      String string2 = "2_9$";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, string2);
      } catch(Throwable e) {
         //
         // 2_9$
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setInitializationFailFast(boolean0);
      String string0 = "Iq*};.Ej~X";
      long long0 = (-918L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = hikariDataSource0.getDataSourceClassName();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = hikariConfig0.getAcquireRetries();
      String string0 = "Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.";
      hikariConfig0.setJdbcUrl(string0);
      int int1 = hikariConfig0.getAcquireRetries();
      String string1 = hikariConfig0.getConnectionCustomizerClassName();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      String string0 = "&&";
      hikariDataSource0.setDataSourceClassName(string0);
      boolean boolean1 = hikariDataSource0.isInitializationFailFast();
      IConnectionCustomizer iConnectionCustomizer0 = hikariDataSource0.getConnectionCustomizer();
      hikariDataSource0.setJdbcUrl(string0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.copyState(hikariDataSource1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "No connection wait timeout is set, this might cause an infinite wait.";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "m(hoNeSiIr-)d(IZX";
      String string1 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.addDataSourceProperty(string0, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "driverClassName specified class '";
      hikariDataSource0.setConnectionInitSql(string0);
      String string1 = hikariDataSource0.toString();
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      long long0 = hikariDataSource0.getAcquireRetryDelay();
      hikariDataSource0.setJdbcUrl(string0);
      String string2 = hikariDataSource0.getDataSourceClassName();
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string3 = "QP*Ay! wLf<.";
      hikariDataSource0.setCatalog(string3);
      long long1 = (-3368L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long1);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "bd,";
      hikariDataSource0.setTransactionIsolation(string0);
      long long0 = 10L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      boolean boolean1 = hikariDataSource0.isRegisterMbeans();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = hikariConfig0.getMaximumPoolSize();
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      long long0 = hikariConfig0.getConnectionTimeout();
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setJdbcUrl(string0);
      String string1 = hikariConfig0.getJdbcUrl();
      long long0 = (-4715L);
      hikariConfig0.setIdleTimeout(long0);
      boolean boolean0 = hikariConfig0.isReadOnly();
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = hikariConfig0.isJdbc4ConnectionTest();
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      String string1 = null;
      hikariConfig0.setCatalog(string1);
      int int0 = 3;
      hikariConfig0.setIdleTimeout(int0);
      hikariConfig0.setMinimumPoolSize(int0);
      long long0 = 48L;
      String string2 = "tQ4}$TW\\K{xq";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'tQ4}$TW\\K{xq' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setUseInstrumentation(boolean0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-1L);
      hikariConfig0.setMaxLifetime(long0);
      int int0 = hikariConfig0.getMaximumPoolSize();
      int int1 = hikariConfig0.getMinimumPoolSize();
      String string0 = "Float ";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      String string1 = "";
      hikariConfig0.addDataSourceProperty(string1, string1);
      long long1 = hikariConfig0.getMaxLifetime();
      boolean boolean0 = hikariConfig0.isReadOnly();
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      String string0 = ") is missing";
      hikariConfig0.setJdbcUrl(string0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL ) is missing
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      String string0 = "UiX\\y";
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      hikariConfig0.setReadOnly(boolean0);
      int int1 = hikariConfig0.getAcquireIncrement();
      long long0 = hikariConfig0.getMaxLifetime();
      hikariConfig0.setMaximumPoolSize(int1);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      hikariConfig0.setIdleTimeout(int1);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      Properties properties0 = new Properties();
      hikariConfig0.setDataSourceProperties(properties0);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      String string0 = hikariConfig0.getCatalog();
      String string1 = hikariConfig0.getCatalog();
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = hikariConfig0.isIsolateInternalQueries();
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getTransactionIsolation();
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      long long0 = hikariDataSource0.getLeakDetectionThreshold();
      int int1 = 2801;
      hikariDataSource0.setAcquireRetries(int1);
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      long long1 = hikariDataSource0.getLeakDetectionThreshold();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "switch";
      hikariDataSource0.setTransactionIsolation(string0);
      long long0 = 2461L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string1 = "";
      long long1 = 0L;
      hikariDataSource0.setLeakDetectionThreshold(long1);
      Class<String> class0 = String.class;
      boolean boolean0 = hikariDataSource0.isWrapperFor(class0);
      hikariDataSource0.setTransactionIsolation(string1);
      boolean boolean1 = true;
      hikariDataSource0.setInitializationFailFast(boolean1);
      String string2 = "2H~oe1(J-*oU";
      String string3 = hikariDataSource0.toString();
      String string4 = "g*2y2Q";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string4);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'g*2y2Q' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "7";
      hikariDataSource0.setCatalog(string0);
      int int0 = 0;
      hikariDataSource0.setAcquireRetries(int0);
      String string1 = "javassist.bytecode.MethodTypeInfo";
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string1, string1);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "`&";
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      int int0 = (-1940);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = hikariConfig0.getPoolName();
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "L+El$";
      hikariConfig0.addDataSourceProperty(string0, string0);
      long long0 = 10000L;
      hikariConfig0.setMaxLifetime(long0);
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      String string1 = "yBy(7.^8914.2;a";
      hikariConfig0.setTransactionIsolation(string1);
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      long long2 = hikariConfig0.getConnectionTimeout();
      String string2 = "";
      int int0 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-943);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Object object1 = properties0.put(object0, hikariDataSource0);
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.Object@0000000003
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = ":N{t?$5w\\7";
      hikariConfig0.setPoolName(string0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = hikariConfig0.getJdbcUrl();
      String string1 = hikariConfig0.getConnectionTestQuery();
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      hikariConfig0.setDataSourceProperties(properties0);
      int int0 = hikariConfig0.getTransactionIsolation();
      String string3 = "";
      hikariConfig0.setTransactionIsolation(string3);
      String string4 = hikariConfig0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "1qLjt`K BQ^";
      hikariDataSource0.setDataSourceClassName(string0);
      int int0 = 2374;
      hikariDataSource0.setLoginTimeout(int0);
      String string1 = "FP#QW@JO$tm(5Ub";
      long long0 = 30L;
      boolean boolean0 = false;
      hikariDataSource0.setAutoCommit(boolean0);
      hikariDataSource0.setMaxLifetime(long0);
      hikariDataSource0.setCatalog(string1);
      String string2 = ".length applied to a non array";
      hikariDataSource0.setPoolName(string2);
      String string3 = "c5\"z-U$=k)*U:t";
      hikariDataSource0.setJdbcUrl(string3);
      long long1 = hikariDataSource0.getIdleTimeout();
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '.length applied to a non array' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "idleTimeout is less than 30000ms, did you specify the wrong time unit?  Using default instead.";
      hikariDataSource0.setDataSourceClassName(string0);
      int int0 = 132;
      hikariDataSource0.setAcquireIncrement(int0);
      String string1 = "";
      long long0 = 3439L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      String string0 = "oD=PgF=0pH>T";
      hikariConfig0.setPoolName(string0);
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = (-1070);
      boolean boolean0 = true;
      long long1 = 0L;
      hikariConfig0.setAcquireRetryDelay(long1);
      boolean boolean1 = true;
      hikariConfig0.setAutoCommit(boolean1);
      hikariConfig0.setInitializationFailFast(boolean0);
      // Undeclared exception!
      try { 
        hikariConfig0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 685L;
      hikariDataSource0.setMaxLifetime(long0);
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      long long1 = 0L;
      hikariDataSource0.setConnectionTimeout(long1);
      String string0 = hikariDataSource0.toString();
      boolean boolean0 = false;
      hikariDataSource0.setInitializationFailFast(boolean0);
      String string1 = hikariDataSource0.toString();
      int int0 = hikariDataSource0.getAcquireIncrement();
      boolean boolean1 = false;
      hikariDataSource0.setAutoCommit(boolean1);
      int int1 = hikariDataSource0.getTransactionIsolation();
      boolean boolean2 = hikariDataSource0.isIsolateInternalQueries();
      boolean boolean3 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean3);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = false;
      String string0 = hikariDataSource0.toString();
      hikariDataSource0.setAutoCommit(boolean0);
      long long0 = (-485L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1175L);
      hikariDataSource0.setMaxLifetime(long0);
      int int0 = 0;
      String string0 = "Attempt to relinquish an object to the bag that was not reserved";
      hikariDataSource0.setDataSourceClassName(string0);
      hikariDataSource0.setConnectionTestQuery(string0);
      hikariDataSource0.setIdleTimeout(int0);
      hikariDataSource0.setMaximumPoolSize(int0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      int int1 = 0;
      hikariDataSource1.setAcquireRetries(int1);
      hikariDataSource0.setDataSource(hikariDataSource1);
      boolean boolean0 = false;
      hikariDataSource0.setRegisterMbeans(boolean0);
      int int2 = 3325;
      hikariDataSource0.setMinimumPoolSize(int2);
      int int3 = 1167;
      hikariDataSource0.setInitializationFailFast(boolean0);
      hikariDataSource0.setAcquireRetries(int3);
      hikariDataSource0.setMinimumPoolSize(int0);
      int int4 = 1931;
      hikariDataSource0.setMaximumPoolSize(int4);
      boolean boolean1 = false;
      hikariDataSource0.setInitializationFailFast(boolean1);
      long long1 = (-3992L);
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "^VO-";
      long long0 = 1122L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      hikariDataSource0.setTransactionIsolation(string0);
      HikariConfig hikariConfig0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.copyState(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = (-858);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      long long1 = 715L;
      Properties properties0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      Properties properties0 = new Properties();
      Object object0 = properties0.put(hikariConfig0, hikariConfig0);
      Collection<Object> collection0 = properties0.values();
      hikariConfig0.setDataSourceProperties(properties0);
      int int0 = 102;
      String string0 = "u{0YdT`V3D/t[Au ";
      hikariConfig0.setJdbcUrl(string0);
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAcquireRetries(int0);
      String string1 = hikariConfig0.getConnectionInitSql();
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      int int2 = hikariConfig0.getMinimumPoolSize();
      int int3 = hikariConfig0.getMaximumPoolSize();
      String string2 = "|A(\"Q1\\[O";
      int int4 = 1345;
      hikariConfig0.setAcquireRetries(int4);
      hikariConfig0.setConnectionTestQuery(string2);
      hikariConfig0.setAutoCommit(boolean0);
      String string3 = hikariConfig0.getDataSourceClassName();
      String string4 = hikariConfig0.getConnectionTestQuery();
      boolean boolean1 = true;
      hikariConfig0.setReadOnly(boolean1);
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setJdbcUrl(string4);
      String string5 = hikariConfig0.getDataSourceClassName();
      boolean boolean2 = true;
      hikariConfig0.setIsolateInternalQueries(boolean2);
      hikariConfig0.setAcquireRetryDelay(int4);
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      String string6 = "V<PH1{*]n4e@He/[O.";
      hikariConfig0.setConnectionCustomizerClassName(string6);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL |A(\"Q1\\[O
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 77;
      int int1 = 466;
      hikariConfig0.setMinimumPoolSize(int1);
      hikariConfig0.setMinimumPoolSize(int0);
      String string0 = "one of either dataSource or dataSourceClassName must be specified";
      hikariConfig0.setConnectionCustomizerClassName(string0);
      boolean boolean0 = true;
      hikariConfig0.setAutoCommit(boolean0);
      hikariConfig0.setConnectionInitSql(string0);
      int int2 = hikariConfig0.getTransactionIsolation();
      int int3 = 10;
      hikariConfig0.setAcquireIncrement(int3);
      hikariConfig0.setAcquireRetries(int0);
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      boolean boolean1 = true;
      hikariConfig0.setUseInstrumentation(boolean1);
      hikariConfig0.setPoolName(string0);
      String string1 = "Kq<!`IezpDb~Vkw` 6";
      String string2 = "KhQ1?S!A\\P0O";
      hikariConfig0.setJdbcUrl(string2);
      hikariConfig0.setDataSourceClassName(string1);
      long long1 = hikariConfig0.getAcquireRetryDelay();
      String string3 = hikariConfig0.getConnectionCustomizerClassName();
      int int4 = hikariConfig0.getAcquireIncrement();
      long long2 = 0L;
      hikariConfig0.setConnectionTimeout(long2);
      boolean boolean2 = hikariConfig0.isInitializationFailFast();
      hikariConfig0.setTransactionIsolation(string1);
      long long3 = hikariConfig0.getMaxLifetime();
      String string4 = hikariConfig0.getConnectionTestQuery();
      boolean boolean3 = hikariConfig0.isIsolateInternalQueries();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      long long4 = 0L;
      hikariConfig0.setIdleTimeout(long4);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL KhQ1?S!A\\P0O
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      long long0 = (-2240L);
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 750;
      String string0 = "";
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setMinimumPoolSize(int0);
      hikariConfig0.validate();
      String string1 = " class is frozen";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class ' class is frozen' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 843L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      String string1 = hikariConfig0.getPoolName();
      boolean boolean0 = false;
      long long1 = 635L;
      hikariConfig0.setMaxLifetime(long1);
      hikariConfig0.setInitializationFailFast(boolean0);
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      Properties properties0 = new Properties();
      Enumeration<?> enumeration0 = properties0.propertyNames();
      hikariConfig0.setDataSourceProperties(properties0);
      String string2 = hikariConfig0.getConnectionTestQuery();
      boolean boolean1 = false;
      hikariConfig0.setUseInstrumentation(boolean1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = hikariConfig0.getMinimumPoolSize();
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      int int1 = hikariConfig0.getAcquireRetries();
      int int2 = hikariConfig1.getMinimumPoolSize();
      DataSource dataSource0 = hikariConfig0.getDataSource();
      String string3 = "com.zaxxer.hikari.HikariConfig";
      hikariConfig1.setDriverClassName(string3);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 2147483647L;
      hikariConfig0.setIdleTimeout(long0);
      String string0 = "toBytecode";
      hikariConfig0.setTransactionIsolation(string0);
      int int0 = 1244;
      hikariConfig0.setMinimumPoolSize(int0);
      long long1 = 0L;
      long long2 = 0L;
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      hikariConfig0.setMaxLifetime(long2);
      hikariConfig0.setMaxLifetime(long1);
      long long3 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      String string1 = ".";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      String string2 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".");
      String string3 = "";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string3);
      hikariConfig0.setTransactionIsolation(string2);
      int int1 = hikariConfig0.getTransactionIsolation();
      String string4 = "";
      hikariConfig0.setConnectionInitSql(string4);
      Properties properties0 = new Properties();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = properties0.computeIfPresent(string1, biFunction0);
      HikariConfig hikariConfig1 = new HikariConfig(string1);
      hikariConfig0.copyState(hikariConfig1);
      // Undeclared exception!
      try { 
        hikariConfig1.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "Gu";
      hikariConfig0.addDataSourceProperty(string0, string0);
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = 8L;
      hikariConfig0.setIdleTimeout(long0);
      long long1 = 1L;
      int int0 = 0;
      hikariConfig0.setMaximumPoolSize(int0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.put(object0, hikariConfig0);
      hikariConfig0.setDataSourceProperties(properties0);
      hikariConfig0.setMinimumPoolSize(int0);
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      hikariConfig0.validate();
      String string2 = hikariConfig0.getConnectionTestQuery();
      boolean boolean2 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      int int1 = hikariConfig0.getAcquireRetries();
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      String string0 = "h>i2RYU5FZRZAl";
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAcquireRetries(int0);
      long long0 = (-687L);
      hikariConfig0.setLeakDetectionThreshold(long0);
      boolean boolean0 = true;
      hikariConfig0.validate();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: h>i2RYU5FZRZAl
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "j";
      Object object0 = new Object();
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.addDataSourceProperty(string0, object0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = 160;
      hikariConfig0.setMaximumPoolSize(int0);
      boolean boolean0 = hikariConfig0.isAutoCommit();
      hikariConfig0.setReadOnly(boolean0);
      String string1 = "[D";
      long long0 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      hikariConfig0.setConnectionTestQuery(string1);
      hikariConfig0.setIsolateInternalQueries(boolean0);
      long long1 = (-8L);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      hikariConfig0.setDataSource(hikariDataSource0);
      hikariConfig0.setMaxLifetime(long1);
      hikariConfig0.setReadOnly(boolean0);
      int int1 = hikariConfig0.getMaximumPoolSize();
      DataSource dataSource0 = hikariConfig0.getDataSource();
      hikariConfig0.setDataSource(dataSource0);
      Properties properties0 = new Properties();
      HikariConfig hikariConfig1 = new HikariConfig(properties0);
      String string2 = "/K%nfYNJBy6UjNT9";
      hikariConfig1.setCatalog(string2);
      hikariConfig0.copyState(hikariConfig1);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      String string0 = "h>i2RYU5FZRZAl";
      hikariConfig0.setDataSourceClassName(string0);
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.setTransactionIsolation(string0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalArgumentException e) {
         //
         // Invalid transaction isolation value: h>i2RYU5FZRZAl
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 100L;
      hikariDataSource0.setReadOnly(boolean0);
      hikariDataSource0.setConnectionTimeout(long0);
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = (-1511);
      String string0 = "hi2RYU5FZRZAl";
      hikariConfig0.setDataSourceClassName(string0);
      boolean boolean0 = false;
      hikariConfig0.validate();
      hikariConfig0.setIdleTimeout(int0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }
}
