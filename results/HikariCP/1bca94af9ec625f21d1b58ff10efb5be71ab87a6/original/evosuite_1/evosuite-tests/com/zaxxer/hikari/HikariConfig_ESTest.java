/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:20:34 GMT 2020
 */

package com.zaxxer.hikari;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPool;
import com.zaxxer.hikari.IConnectionCustomizer;
import java.sql.Connection;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikariConfig_ESTest extends HikariConfig_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      boolean boolean0 = true;
      String string0 = null;
      hikariConfig0.setPoolName(string0);
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.setTransactionIsolation(string0);
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      boolean boolean2 = false;
      hikariConfig0.setRegisterMbeans(boolean2);
      int int2 = (-1684);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int2);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMaximumPoolSize();
      String string0 = "minPoolSize cannot be negative";
      hikariDataSource0.setTransactionIsolation(string0);
      Class<String> class0 = String.class;
      long long0 = (-388L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = null;
      String string1 = "9X2S+cD\"Q6&H8G";
      char char0 = 'x';
      int int0 = 1801;
      hikariDataSource0.setAcquireRetries(int0);
      hikariDataSource0.setJdbcUrl(string1);
      boolean boolean0 = false;
      long long0 = (-429L);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      int int1 = (-1648);
      int int2 = 10;
      hikariDataSource0.setCatalog(string0);
      String string2 = "UC";
      hikariDataSource0.setConnectionTestQuery(string2);
      String string3 = "7,VS`];UHy#,C|Qt=";
      hikariDataSource0.setJdbcUrl(string3);
      String string4 = hikariDataSource0.getJdbcUrl();
      String string5 = "N;&";
      Properties properties0 = new Properties();
      Set<Object> set0 = properties0.keySet();
      hikariDataSource0.setDataSourceProperties(properties0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 118;
      hikariDataSource0.setAcquireRetries(int0);
      String string0 = "ZL%`!KV1[Y\\&wh";
      hikariDataSource0.setDataSourceClassName(string0);
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection();
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: ZL%`!KV1[Y\\&wh
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "";
      Object object0 = properties0.put(string0, string0);
      Properties properties1 = new Properties(properties0);
      HikariConfig hikariConfig0 = new HikariConfig(properties1);
      HikariConfig hikariConfig1 = new HikariConfig(properties1);
      hikariConfig0.copyState(hikariConfig1);
      boolean boolean0 = hikariConfig0.isReadOnly();
      String string1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string1, string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "l<pA<";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = hikariConfig0.getMaxLifetime();
      Properties properties0 = new Properties();
      String string0 = "MuPl<44yq:|j}HI;";
      hikariConfig0.addDataSourceProperty(string0, string0);
      hikariConfig0.setDataSourceProperties(properties0);
      String string1 = hikariConfig0.getConnectionTestQuery();
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      String string2 = hikariConfig0.getDataSourceClassName();
      hikariConfig0.setLeakDetectionThreshold(long0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 596;
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setConnectionTimeout(long0);
      String string0 = "n";
      hikariDataSource0.setJdbcUrl(string0);
      long long1 = 374L;
      hikariConfig0.setConnectionTimeout(long1);
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariDataSource0.copyState(hikariConfig0);
      hikariDataSource0.setMaximumPoolSize(int0);
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      boolean boolean1 = hikariDataSource0.isJdbc4ConnectionTest();
      hikariDataSource0.setRegisterMbeans(boolean1);
      int int1 = hikariDataSource0.getAcquireIncrement();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "360;X'@6~";
      hikariConfig0.setConnectionTestQuery(string0);
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = hikariConfig0.getAcquireRetries();
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      hikariDataSource0.setConnectionTimeout(long0);
      String string0 = "oh+xsZ x}";
      hikariDataSource0.setConnectionInitSql(string0);
      long long1 = hikariDataSource0.getConnectionTimeout();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      hikariDataSource0.setConnectionInitSql(string0);
      String string1 = ";u>xG&[-w.Dp";
      hikariDataSource0.setTransactionIsolation(string1);
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      String string2 = "+l#np!";
      Object object0 = new Object();
      hikariDataSource0.addDataSourceProperty(string2, object0);
      int int0 = 1197;
      hikariDataSource0.setAcquireIncrement(int0);
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "t' Jjlz~b2fUY[SF&n";
      hikariConfig0.setJdbcUrl(string0);
      int int0 = 2468;
      hikariConfig0.setMinimumPoolSize(int0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL t' Jjlz~b2fUY[SF&n
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = null;
      hikariConfig0.setPoolName(string0);
      long long0 = (-1L);
      hikariConfig0.setMaxLifetime(long0);
      boolean boolean0 = false;
      hikariConfig0.setJdbc4ConnectionTest(boolean0);
      long long1 = (-1684L);
      hikariConfig0.setIdleTimeout(long1);
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      hikariConfig0.setAutoCommit(boolean1);
      long long2 = hikariConfig0.getLeakDetectionThreshold();
      long long3 = hikariConfig0.getIdleTimeout();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1L);
      hikariDataSource0.setMaxLifetime(long0);
      String string0 = "}5I\"tW Hjk";
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      hikariDataSource0.setDataSourceClassName(string0);
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      String string1 = hikariDataSource0.getDataSourceClassName();
      int int0 = 1081;
      Object object0 = properties0.put(string1, string0);
      hikariDataSource0.setAcquireIncrement(int0);
      String string2 = "String #";
      // Undeclared exception!
      try { 
        hikariDataSource0.setDriverClassName(string2);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'String #' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource0.validate();
      String string0 = hikariDataSource0.getDataSourceClassName();
      String string1 = "com.zaxxer.hikari.HikariConfig";
      hikariDataSource0.setJdbcUrl(string1);
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      boolean boolean0 = hikariDataSource0.isIsolateInternalQueries();
      Properties properties0 = new Properties();
      hikariDataSource0.copyState(hikariDataSource1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      String string0 = null;
      hikariConfig0.setTransactionIsolation(string0);
      hikariConfig0.setRegisterMbeans(boolean0);
      String string1 = "";
      hikariConfig0.setPoolName(string1);
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      int int0 = hikariConfig0.getTransactionIsolation();
      hikariConfig0.setConnectionCustomizerClassName(string2);
      String string3 = hikariConfig0.getPoolName();
      hikariConfig0.setTransactionIsolation(string2);
      int int1 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 102L;
      hikariDataSource0.setConnectionTimeout(long0);
      HikariPool hikariPool0 = hikariDataSource0.fastPathPool;
      hikariDataSource0.pool = hikariPool0;
      int int0 = 83;
      hikariDataSource0.setMaximumPoolSize(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ztS?`Jy14.j4J2+-";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      boolean boolean1 = false;
      hikariConfig0.setReadOnly(boolean1);
      hikariConfig0.setInitializationFailFast(boolean0);
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      String string0 = "x6_RT v4!p";
      hikariConfig0.setConnectionTestQuery(string0);
      boolean boolean2 = hikariConfig0.isAutoCommit();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ".\"=0C1n-}d*";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      hikariConfig0.setDataSourceProperties(properties0);
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)9;
      String string1 = "07ay6jx08bW6iRI6S8P";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      byteArray0[0] = byte0;
      hikariConfig0.setTransactionIsolation(string1);
      byte byte1 = (byte)29;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)67;
      byteArray0[2] = byte2;
      byte byte3 = (byte)26;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-67);
      boolean boolean3 = true;
      hikariConfig0.setAutoCommit(boolean3);
      byteArray0[4] = byte4;
      byte byte5 = (byte)88;
      byteArray0[5] = byte5;
      boolean boolean4 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      HikariConfig hikariConfig1 = new HikariConfig();
      hikariConfig0.copyState(hikariConfig1);
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string1);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "Invalid transaction isolation value: ";
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      boolean boolean1 = true;
      long long0 = 368L;
      hikariConfig0.setLeakDetectionThreshold(long0);
      String string1 = "9.Np=1K3v|>&Qb";
      hikariConfig0.setDataSourceClassName(string1);
      hikariConfig0.setInitializationFailFast(boolean1);
      long long1 = 2136L;
      hikariConfig0.setIdleTimeout(long1);
      hikariConfig0.setConnectionInitSql(string0);
      hikariConfig0.validate();
      HikariConfig hikariConfig1 = null;
      try {
        hikariConfig1 = new HikariConfig(string1);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = 3248L;
      hikariConfig0.setAcquireRetryDelay(long0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "maxPoolSize is less than minPoolSize, forcing them equal.";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 10;
      String string0 = "undefined type: ";
      hikariConfig0.setTransactionIsolation(string0);
      hikariConfig0.setAcquireRetries(int0);
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-2569L);
      String string0 = "B#sL&";
      boolean boolean0 = false;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = null;
      hikariConfig0.setConnectionInitSql(string0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 748L;
      hikariDataSource0.setAcquireRetryDelay(long0);
      String string0 = "),Q]At[V";
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "ECcoZo97]7SbgKQ\\";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(RuntimeException e) {
         //
         // Error loading properties file
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.put(object0, object0);
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(properties0);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.Object@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(IllegalArgumentException e) {
         //
         // Property file  was not found.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      String string0 = "RZnt!/|i[bk=N2p";
      String string1 = "one of either dataSource or dataSourceClassName must be specified";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      hikariConfig0.setConnectionCustomizerClassName(string0);
      int int0 = 0;
      hikariConfig0.setAcquireRetries(int0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireIncrement(int1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be less than 1
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setPoolName(string0);
      boolean boolean0 = true;
      int int0 = 2852;
      hikariConfig0.setAcquireRetries(int0);
      hikariConfig0.setInitializationFailFast(boolean0);
      String string1 = "javassist.bytecode.ClassInfo";
      hikariConfig0.setConnectionCustomizerClassName(string1);
      hikariConfig0.setConnectionInitSql(string1);
      String string2 = "";
      hikariConfig0.setPoolName(string2);
      boolean boolean1 = true;
      boolean boolean2 = true;
      hikariConfig0.setJdbc4ConnectionTest(boolean2);
      long long0 = (-4738L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 0L;
      String string0 = "";
      hikariDataSource0.setDataSourceClassName(string0);
      hikariDataSource0.setLeakDetectionThreshold(long0);
      String string1 = "";
      hikariDataSource0.setPoolName(string1);
      String string2 = "leakDetectionThreshold is less than 10000ms, did you specify the wrong time unit?  Disabling leak detection.";
      hikariDataSource0.setJdbcUrl(string2);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = false;
      hikariConfig0.setAutoCommit(boolean0);
      long long0 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean1 = true;
      hikariConfig0.setRegisterMbeans(boolean1);
      long long1 = 0L;
      hikariConfig0.setLeakDetectionThreshold(long1);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 0L;
      hikariConfig0.setIdleTimeout(long0);
      int int0 = (-165);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      Object object0 = new Object();
      Object object1 = properties0.put(object0, hikariConfig0);
      String string0 = "..}2l+]#/sIqhu";
      String string1 = "";
      hikariConfig0.setDataSourceClassName(string1);
      hikariConfig0.setJdbcUrl(string1);
      Object object2 = properties0.getOrDefault(hikariConfig0, string0);
      long long0 = 1315L;
      int int0 = (-1319);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetries(int0);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetries cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      // Undeclared exception!
      try { 
        hikariDataSource0.shutdown();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = null;
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 5119L;
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      hikariConfig0.setLeakDetectionThreshold(long0);
      boolean boolean1 = false;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      Properties properties0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDataSourceProperties(properties0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = true;
      hikariDataSource0.setReadOnly(boolean0);
      String string0 = hikariDataSource0.getCatalog();
      int int0 = 106;
      hikariDataSource0.setMaximumPoolSize(int0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "uM]bO,8\"";
      hikariConfig0.setCatalog(string0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      hikariDataSource0.setDataSource(dataSource0);
      String string0 = "";
      hikariDataSource0.setDataSourceClassName(string0);
      int int0 = (-5378);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMaximumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      long long0 = hikariConfig0.getMaxLifetime();
      String string0 = "e9KON<k[";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'e9KON<k[' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = hikariConfig0.getMaximumPoolSize();
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      boolean boolean0 = hikariConfig0.isInitializationFailFast();
      String string0 = "i";
      hikariConfig0.setDataSource(dataSource0);
      hikariConfig0.setCatalog(string0);
      int int1 = 0;
      hikariConfig0.setMaximumPoolSize(int1);
      long long0 = hikariConfig0.getMaxLifetime();
      String string1 = hikariConfig0.getPoolName();
      boolean boolean1 = true;
      hikariConfig0.setInitializationFailFast(boolean1);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = hikariConfig0.isAutoCommit();
      boolean boolean1 = false;
      hikariConfig0.setAutoCommit(boolean1);
      long long0 = 1539L;
      hikariConfig0.setConnectionTimeout(long0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = " not found in ";
      Object object0 = new Object();
      hikariDataSource0.addDataSourceProperty(string0, object0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      String string0 = "";
      HikariConfig hikariConfig1 = new HikariConfig();
      Object object0 = properties0.put(hikariConfig1, string0);
      hikariConfig0.setConnectionInitSql(string0);
      Object object1 = properties0.put(hikariConfig0, string0);
      boolean boolean0 = true;
      hikariConfig1.setRegisterMbeans(boolean0);
      hikariConfig0.setCatalog(string0);
      String string1 = hikariConfig0.getPoolName();
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      boolean boolean1 = hikariConfig0.isInitializationFailFast();
      String string2 = hikariConfig0.getConnectionCustomizerClassName();
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class '' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = hikariConfig0.getAcquireIncrement();
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "E?$t#W;Cxp*Jh";
      String string1 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.addDataSourceProperty(string0, string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = hikariDataSource0.isRegisterMbeans();
      // Undeclared exception!
      try { 
        hikariDataSource0.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = 16L;
      hikariConfig0.setAcquireRetryDelay(long0);
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      hikariConfig0.setReadOnly(boolean0);
      boolean boolean1 = false;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      long long1 = hikariConfig0.getLeakDetectionThreshold();
      boolean boolean2 = false;
      hikariConfig0.setAutoCommit(boolean2);
      int int0 = hikariConfig0.getAcquireIncrement();
      boolean boolean3 = false;
      DataSource dataSource0 = null;
      hikariConfig0.setDataSource(dataSource0);
      hikariConfig0.setUseInstrumentation(boolean3);
      boolean boolean4 = hikariConfig0.isRegisterMbeans();
      String string0 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string0);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'null' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      String string0 = "z!/f=#ItBtWJ";
      Object object0 = properties0.put(string0, string0);
      hikariConfig0.setCatalog(string0);
      int int0 = hikariConfig0.getTransactionIsolation();
      hikariConfig0.setRegisterMbeans(boolean0);
      String string1 = hikariConfig0.getConnectionTestQuery();
      IConnectionCustomizer iConnectionCustomizer0 = hikariConfig0.getConnectionCustomizer();
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = (-1097);
      // Undeclared exception!
      try { 
        hikariConfig0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      DataSource dataSource0 = hikariDataSource0.getDataSource();
      hikariDataSource0.setDataSource(dataSource0);
      long long0 = hikariDataSource0.getMaxLifetime();
      boolean boolean0 = true;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      long long1 = hikariDataSource0.getConnectionTimeout();
      int int0 = hikariDataSource0.getMaximumPoolSize();
      Properties properties0 = hikariDataSource0.getDataSourceProperties();
      int int1 = 60;
      hikariDataSource0.setMinimumPoolSize(int1);
      Properties properties1 = hikariDataSource0.getDataSourceProperties();
      String string0 = null;
      hikariDataSource0.setConnectionCustomizerClassName(string0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      Properties properties0 = new Properties();
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      hikariConfig0.setDataSourceProperties(properties0);
      boolean boolean1 = hikariConfig0.isRegisterMbeans();
      String string0 = "7 ~&O";
      hikariConfig0.setJdbcUrl(string0);
      boolean boolean2 = hikariConfig0.isJdbc4ConnectionTest();
      String string1 = "aOoEf5";
      // Undeclared exception!
      try { 
        hikariConfig0.setDriverClassName(string1);
      } catch(RuntimeException e) {
         //
         // driverClassName specified class 'aOoEf5' could not be loaded
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "WE+Pk;GlQuL3ZjN?%U";
      hikariDataSource0.setTransactionIsolation(string0);
      int int0 = (-2120);
      // Undeclared exception!
      try { 
        hikariDataSource0.setMinimumPoolSize(int0);
      } catch(IllegalArgumentException e) {
         //
         // minPoolSize cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      long long0 = 0L;
      hikariDataSource0.setIdleTimeout(int0);
      long long1 = (-551L);
      // Undeclared exception!
      try { 
        hikariDataSource0.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 596;
      HikariConfig hikariConfig1 = new HikariConfig();
      long long0 = 0L;
      hikariConfig1.setConnectionTimeout(long0);
      String string0 = ")";
      hikariConfig0.setJdbcUrl(string0);
      long long1 = 374L;
      hikariConfig1.setConnectionTimeout(long1);
      boolean boolean0 = true;
      hikariConfig1.setRegisterMbeans(boolean0);
      hikariConfig0.copyState(hikariConfig1);
      hikariConfig0.setMaximumPoolSize(int0);
      long long2 = hikariConfig0.getAcquireRetryDelay();
      boolean boolean1 = hikariConfig0.isJdbc4ConnectionTest();
      hikariConfig0.setRegisterMbeans(boolean1);
      int int1 = hikariConfig0.getAcquireIncrement();
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      Properties properties0 = new Properties();
      String string0 = "javassist.bytecode.stackmap.BasicBlock$Mark";
      hikariDataSource0.setConnectionCustomizerClassName(string0);
      String string1 = "";
      hikariDataSource0.setConnectionCustomizerClassName(string1);
      Object object0 = new Object();
      HikariDataSource hikariDataSource1 = null;
      try {
        hikariDataSource1 = new HikariDataSource(hikariDataSource0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      boolean boolean0 = true;
      hikariConfig0.setReadOnly(boolean0);
      long long0 = (-2264L);
      // Undeclared exception!
      try { 
        hikariConfig0.setConnectionTimeout(long0);
      } catch(IllegalArgumentException e) {
         //
         // connectionTimeout cannot be less than 100ms
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 48L;
      hikariDataSource0.setLeakDetectionThreshold(long0);
      long long1 = 4617L;
      hikariDataSource0.setConnectionTimeout(long1);
      boolean boolean0 = false;
      boolean boolean1 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean1);
      hikariDataSource0.setAutoCommit(boolean0);
      String string0 = hikariDataSource0.getConnectionInitSql();
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "";
      hikariConfig0.setTransactionIsolation(string0);
      Properties properties0 = hikariConfig0.getDataSourceProperties();
      String string1 = "c&";
      String string2 = "acquireRetryDelay is less than 100ms, did you specify the wrong time unit?  Using default instead.";
      hikariConfig0.setConnectionCustomizerClassName(string2);
      hikariConfig0.setConnectionInitSql(string1);
      HikariConfig hikariConfig1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.copyState(hikariConfig1);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      HikariConfig hikariConfig0 = null;
      // Undeclared exception!
      try { 
        hikariDataSource0.copyState(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Exception copying HikariConfig state: null
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      int int0 = 0;
      hikariConfig0.setMinimumPoolSize(int0);
      boolean boolean0 = false;
      hikariConfig0.setRegisterMbeans(boolean0);
      int int1 = hikariConfig0.getMaximumPoolSize();
      long long0 = hikariConfig0.getLeakDetectionThreshold();
      boolean boolean1 = hikariConfig0.isIsolateInternalQueries();
      HikariConfig hikariConfig1 = new HikariConfig();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig1);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "3iY6~{;^z*8CxZLp!";
      hikariConfig0.setPoolName(string0);
      String string1 = hikariConfig0.getJdbcUrl();
      boolean boolean0 = true;
      hikariConfig0.setIsolateInternalQueries(boolean0);
      long long0 = hikariConfig0.getIdleTimeout();
      int int0 = hikariConfig0.getAcquireRetries();
      hikariConfig0.setAcquireRetryDelay(long0);
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string1, string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "javassist.CtMethod";
      hikariConfig0.setJdbcUrl(string0);
      long long0 = 1478L;
      boolean boolean0 = true;
      hikariConfig0.setRegisterMbeans(boolean0);
      boolean boolean1 = false;
      hikariConfig0.setIsolateInternalQueries(boolean1);
      boolean boolean2 = false;
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL javassist.CtMethod
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      Properties properties0 = null;
      HikariConfig hikariConfig0 = new HikariConfig(properties0);
      int int0 = 276;
      String string0 = "com.zaxxer.hikari.HikariConfig";
      hikariConfig0.setPoolName(string0);
      hikariConfig0.setMaximumPoolSize(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      hikariConfig0.setAcquireIncrement(int0);
      long long0 = (-1196L);
      hikariConfig0.setDriverClassName(string0);
      hikariConfig0.setMaxLifetime(long0);
      long long1 = (-860L);
      // Undeclared exception!
      try { 
        hikariConfig0.setAcquireRetryDelay(long1);
      } catch(IllegalArgumentException e) {
         //
         // acquireRetryDelay cannot be negative
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      boolean boolean0 = false;
      long long0 = 0L;
      hikariDataSource0.setConnectionTimeout(long0);
      String string0 = "oh+xsZ x}";
      hikariDataSource0.setConnectionInitSql(string0);
      hikariDataSource0.setIsolateInternalQueries(boolean0);
      long long1 = hikariDataSource0.getConnectionTimeout();
      boolean boolean1 = hikariDataSource0.isRegisterMbeans();
      hikariDataSource0.setConnectionInitSql(string0);
      String string1 = ";u>xG&[-w.Dp";
      hikariDataSource0.setTransactionIsolation(string1);
      long long2 = hikariDataSource0.getAcquireRetryDelay();
      HikariPool hikariPool0 = hikariDataSource0.fastPathPool;
      hikariDataSource0.pool = hikariPool0;
      String string2 = "+l#np!";
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "360;X'@6~";
      long long0 = 0L;
      hikariConfig0.setAcquireRetryDelay(long0);
      int int0 = hikariConfig0.getMinimumPoolSize();
      HikariDataSource hikariDataSource0 = null;
      try {
        hikariDataSource0 = new HikariDataSource(hikariConfig0);
      } catch(IllegalStateException e) {
         //
         // one of either dataSource or dataSourceClassName must be specified
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HikariConfig hikariConfig0 = new HikariConfig();
      String string0 = "360;X'@6~";
      hikariConfig0.setConnectionTestQuery(string0);
      hikariConfig0.setJdbcUrl(string0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(RuntimeException e) {
         //
         // Unable to get driver for JDBC URL 360;X'@6~
         //
         verifyException("com.zaxxer.hikari.util.DriverDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      String string0 = "ZL%`!KV1[Y\\&wh";
      hikariDataSource0.setDataSourceClassName(string0);
      hikariDataSource0.validate();
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      HikariConfig hikariConfig0 = new HikariConfig();
      long long0 = (-2259L);
      String string0 = "K\"@w.;";
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string1 = "";
      hikariConfig0.setCatalog(string1);
      hikariConfig0.setDataSourceClassName(string0);
      int int0 = 3;
      hikariConfig0.setMinimumPoolSize(int0);
      hikariConfig0.setIdleTimeout(long0);
      // Undeclared exception!
      try { 
        hikariConfig0.validate();
      } catch(IllegalStateException e) {
         //
         // idleTimeout cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "";
      Object object0 = properties0.put(string0, string0);
      Properties properties1 = new Properties(properties0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      HikariConfig hikariConfig0 = new HikariConfig(properties1);
      HikariConfig hikariConfig1 = new HikariConfig(properties1);
      long long0 = 100L;
      hikariConfig0.setConnectionTimeout(long0);
      hikariConfig0.copyState(hikariConfig1);
      boolean boolean3 = hikariConfig0.isReadOnly();
      String string1 = null;
      // Undeclared exception!
      try { 
        hikariConfig0.addDataSourceProperty(string1, string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = 30000L;
      hikariDataSource0.setMaxLifetime(long0);
      String string0 = "}5I\"tW Hjk";
      boolean boolean0 = false;
      hikariDataSource0.setJdbc4ConnectionTest(boolean0);
      hikariDataSource0.setDataSourceClassName(string0);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      Properties properties0 = new Properties();
      hikariDataSource0.setDataSourceProperties(properties0);
      String string1 = hikariDataSource0.getDataSourceClassName();
      int int0 = 1081;
      Object object0 = properties0.put(string1, string0);
      Enumeration<?> enumeration0 = properties0.propertyNames();
      // Undeclared exception!
      try { 
        hikariDataSource0.validate();
      } catch(IllegalStateException e) {
         //
         // Either jdbc4ConnectionTest must be enabled or a connectionTestQuery must be specified.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid transaction isolation value: ");
      String string0 = "@ ],Qp,,?A";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      String string1 = "Invalid transaction isolation value: ";
      HikariConfig hikariConfig0 = null;
      try {
        hikariConfig0 = new HikariConfig(string1);
      } catch(RuntimeException e) {
         //
         // java.beans.IntrospectionException: Method not found: setJava.lang.String@0000000002
         //
         verifyException("com.zaxxer.hikari.util.PropertyBeanSetter", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      long long0 = (-1L);
      hikariDataSource0.setMaxLifetime(long0);
      String string0 = "}5I\"tW Hjk";
      boolean boolean0 = false;
      hikariDataSource0.setDataSourceClassName(string0);
      Properties properties0 = new Properties();
      String string1 = "V)3a)=oia";
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection(string1, string1);
      } catch(IllegalStateException e) {
         //
         // maxLifetime cannot be negative.
         //
         verifyException("com.zaxxer.hikari.HikariConfig", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = hikariDataSource0.getMinimumPoolSize();
      hikariDataSource0.setIdleTimeout(int0);
      long long0 = (-551L);
      HikariDataSource hikariDataSource1 = new HikariDataSource();
      hikariDataSource0.setDataSource(hikariDataSource1);
      hikariDataSource0.validate();
      hikariDataSource0.setMaxLifetime(int0);
      String string0 = hikariDataSource0.getDataSourceClassName();
      String string1 = "com.zaxxer.hikari.HikariConfig";
      hikariDataSource0.setJdbcUrl(string1);
      // Undeclared exception!
      try { 
        hikariDataSource1.close();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zaxxer.hikari.HikariDataSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      int int0 = 118;
      hikariDataSource0.setAcquireRetries(int0);
      String string0 = "ZL%`!KV1[Y\\&wh";
      hikariDataSource0.setLeakDetectionThreshold(int0);
      hikariDataSource0.setDataSourceClassName(string0);
      // Undeclared exception!
      try { 
        hikariDataSource0.getConnection();
      } catch(RuntimeException e) {
         //
         // Could not create datasource instance: ZL%`!KV1[Y\\&wh
         //
         verifyException("com.zaxxer.hikari.HikariPool", e);
      }
  }
}
